{"problem_id": 29, "problem": "fizz_buzz", "method": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans", "tests": [{"test_id": "154", "test": "def test():\n        assert fizz_buzz(200) == 6", "coverage_executed": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", "?", ">", ">", "?"]}, {"test_id": "155", "test": "def test():\n        assert fizz_buzz(4000) == 192", "coverage_executed": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", "?", ">", ">", "?"]}, {"test_id": "157", "test": "def test():\n        assert fizz_buzz(100000) == 8026", "coverage_executed": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", "?", ">", ">", "?"]}, {"test_id": "156", "test": "def test():\n        assert fizz_buzz(10000) == 639", "coverage_executed": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", "?", ">", ">", "?"]}, {"test_id": "152", "test": "def test():\n        assert fizz_buzz(79) == 3", "coverage_executed": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", "?", ">", ">", "?"]}, {"test_id": "153", "test": "def test():\n        assert fizz_buzz(100) == 3", "coverage_executed": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", "?", ">", ">", "?"]}, {"test_id": "151", "test": "def test():\n        assert fizz_buzz(78) == 2", "coverage_executed": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", "?", ">", ">", "?"]}, {"test_id": "150", "test": "def test():\n        assert fizz_buzz(50) == 0", "coverage_executed": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage": "> def fizz_buzz(n: int):\n>     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>     >>> fizz_buzz(50)\n>     0\n>     >>> fizz_buzz(78)\n>     2\n>     >>> fizz_buzz(79)\n>     3\n>     \"\"\"\n>     ns = []\n>     for i in range(n):\n>         if i % 11 == 0 or i % 13 == 0:\n>             ns.append(i)\n>     s = ''.join(list(map(str, ns)))\n>     ans = 0\n>     for c in s:\n>         ans += (c == '7')\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", "?", ">", ">", "?"]}]}