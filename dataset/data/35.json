{"problem_id": 35, "problem": "sort_array", "method": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    Note:\n    * don't change the given array.\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "tests": [{"test_id": "536", "test": "def test():\n        assert sort_array([5]) == [5], \"Error\"", "coverage_executed": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n>     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n>     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "537", "test": "def test():\n        assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"", "coverage_executed": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n>     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n>     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "535", "test": "def test():\n        assert sort_array([]) == [], \"Error\"", "coverage_executed": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n>     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n>     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "534", "test": "def test():\n        assert True, \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n", "coverage": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n!     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "540", "test": "def test():\n        assert sort_array([2, 1]) == [1, 2], \"Error\"", "coverage_executed": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n>     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n>     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "541", "test": "def test():\n        assert sort_array([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"", "coverage_executed": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n>     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n>     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "542", "test": "def test():\n        assert sort_array([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"", "coverage_executed": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n>     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n>     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "538", "test": "def test():\n        assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"", "coverage_executed": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n>     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n>     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "539", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n", "coverage": "> def sort_array(array):\n>     \"\"\"\n>     Given an array of non-negative integers, return a copy of the given array after sorting,\n>     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n>     or sort it in descending order if the sum( first index value, last index value) is even.\n>     Note:\n>     * don't change the given array.\n>     Examples:\n>     * sort_array([]) => []\n>     * sort_array([5]) => [5]\n>     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n>     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n>     \"\"\"\n!     return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}