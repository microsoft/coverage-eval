{"problem_id": 16, "problem": "anti_shuffle", "method": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "tests": [{"test_id": "524", "test": "def test():\n        assert anti_shuffle('') == ''", "coverage_executed": "> def anti_shuffle(s):\n>     \"\"\"\n>     Write a function that takes a string and returns an ordered version of it.\n>     Ordered version of string, is a string where all words (separated by space)\n>     are replaced by a new word where all the characters arranged in\n>     ascending order based on ascii value.\n>     Note: You should keep the order of words and blank spaces in the sentence.\n>     For example:\n>     anti_shuffle('Hi') returns 'Hi'\n>     anti_shuffle('hello') returns 'ehllo'\n>     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n>     \"\"\"\n>     return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "coverage": "> def anti_shuffle(s):\n>     \"\"\"\n>     Write a function that takes a string and returns an ordered version of it.\n>     Ordered version of string, is a string where all words (separated by space)\n>     are replaced by a new word where all the characters arranged in\n>     ascending order based on ascii value.\n>     Note: You should keep the order of words and blank spaces in the sentence.\n>     For example:\n>     anti_shuffle('Hi') returns 'Hi'\n>     anti_shuffle('hello') returns 'ehllo'\n>     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n>     \"\"\"\n>     return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "525", "test": "def test():\n        assert anti_shuffle('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'", "coverage_executed": "> def anti_shuffle(s):\n>     \"\"\"\n>     Write a function that takes a string and returns an ordered version of it.\n>     Ordered version of string, is a string where all words (separated by space)\n>     are replaced by a new word where all the characters arranged in\n>     ascending order based on ascii value.\n>     Note: You should keep the order of words and blank spaces in the sentence.\n>     For example:\n>     anti_shuffle('Hi') returns 'Hi'\n>     anti_shuffle('hello') returns 'ehllo'\n>     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n>     \"\"\"\n>     return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "coverage": "> def anti_shuffle(s):\n>     \"\"\"\n>     Write a function that takes a string and returns an ordered version of it.\n>     Ordered version of string, is a string where all words (separated by space)\n>     are replaced by a new word where all the characters arranged in\n>     ascending order based on ascii value.\n>     Note: You should keep the order of words and blank spaces in the sentence.\n>     For example:\n>     anti_shuffle('Hi') returns 'Hi'\n>     anti_shuffle('hello') returns 'ehllo'\n>     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n>     \"\"\"\n>     return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "522", "test": "def test():\n        assert anti_shuffle('abcd') == 'abcd'", "coverage_executed": "> def anti_shuffle(s):\n>     \"\"\"\n>     Write a function that takes a string and returns an ordered version of it.\n>     Ordered version of string, is a string where all words (separated by space)\n>     are replaced by a new word where all the characters arranged in\n>     ascending order based on ascii value.\n>     Note: You should keep the order of words and blank spaces in the sentence.\n>     For example:\n>     anti_shuffle('Hi') returns 'Hi'\n>     anti_shuffle('hello') returns 'ehllo'\n>     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n>     \"\"\"\n>     return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "coverage": "> def anti_shuffle(s):\n>     \"\"\"\n>     Write a function that takes a string and returns an ordered version of it.\n>     Ordered version of string, is a string where all words (separated by space)\n>     are replaced by a new word where all the characters arranged in\n>     ascending order based on ascii value.\n>     Note: You should keep the order of words and blank spaces in the sentence.\n>     For example:\n>     anti_shuffle('Hi') returns 'Hi'\n>     anti_shuffle('hello') returns 'ehllo'\n>     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n>     \"\"\"\n>     return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "523", "test": "def test():\n        assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'", "coverage_executed": "> def anti_shuffle(s):\n>     \"\"\"\n>     Write a function that takes a string and returns an ordered version of it.\n>     Ordered version of string, is a string where all words (separated by space)\n>     are replaced by a new word where all the characters arranged in\n>     ascending order based on ascii value.\n>     Note: You should keep the order of words and blank spaces in the sentence.\n>     For example:\n>     anti_shuffle('Hi') returns 'Hi'\n>     anti_shuffle('hello') returns 'ehllo'\n>     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n>     \"\"\"\n>     return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "coverage": "> def anti_shuffle(s):\n>     \"\"\"\n>     Write a function that takes a string and returns an ordered version of it.\n>     Ordered version of string, is a string where all words (separated by space)\n>     are replaced by a new word where all the characters arranged in\n>     ascending order based on ascii value.\n>     Note: You should keep the order of words and blank spaces in the sentence.\n>     For example:\n>     anti_shuffle('Hi') returns 'Hi'\n>     anti_shuffle('hello') returns 'ehllo'\n>     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n>     \"\"\"\n>     return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "519", "test": "def test():\n        assert anti_shuffle('Hi') == 'Hi'", "coverage_executed": "> def anti_shuffle(s):\n>     \"\"\"\n>     Write a function that takes a string and returns an ordered version of it.\n>     Ordered version of string, is a string where all words (separated by space)\n>     are replaced by a new word where all the characters arranged in\n>     ascending order based on ascii value.\n>     Note: You should keep the order of words and blank spaces in the sentence.\n>     For example:\n>     anti_shuffle('Hi') returns 'Hi'\n>     anti_shuffle('hello') returns 'ehllo'\n>     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n>     \"\"\"\n>     return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "coverage": "> def anti_shuffle(s):\n>     \"\"\"\n>     Write a function that takes a string and returns an ordered version of it.\n>     Ordered version of string, is a string where all words (separated by space)\n>     are replaced by a new word where all the characters arranged in\n>     ascending order based on ascii value.\n>     Note: You should keep the order of words and blank spaces in the sentence.\n>     For example:\n>     anti_shuffle('Hi') returns 'Hi'\n>     anti_shuffle('hello') returns 'ehllo'\n>     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n>     \"\"\"\n>     return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "521", "test": "def test():\n        assert anti_shuffle('number') == 'bemnru'", "coverage_executed": "> def anti_shuffle(s):\n>     \"\"\"\n>     Write a function that takes a string and returns an ordered version of it.\n>     Ordered version of string, is a string where all words (separated by space)\n>     are replaced by a new word where all the characters arranged in\n>     ascending order based on ascii value.\n>     Note: You should keep the order of words and blank spaces in the sentence.\n>     For example:\n>     anti_shuffle('Hi') returns 'Hi'\n>     anti_shuffle('hello') returns 'ehllo'\n>     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n>     \"\"\"\n>     return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "coverage": "> def anti_shuffle(s):\n>     \"\"\"\n>     Write a function that takes a string and returns an ordered version of it.\n>     Ordered version of string, is a string where all words (separated by space)\n>     are replaced by a new word where all the characters arranged in\n>     ascending order based on ascii value.\n>     Note: You should keep the order of words and blank spaces in the sentence.\n>     For example:\n>     anti_shuffle('Hi') returns 'Hi'\n>     anti_shuffle('hello') returns 'ehllo'\n>     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n>     \"\"\"\n>     return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "520", "test": "def test():\n        assert anti_shuffle('hello') == 'ehllo'", "coverage_executed": "> def anti_shuffle(s):\n>     \"\"\"\n>     Write a function that takes a string and returns an ordered version of it.\n>     Ordered version of string, is a string where all words (separated by space)\n>     are replaced by a new word where all the characters arranged in\n>     ascending order based on ascii value.\n>     Note: You should keep the order of words and blank spaces in the sentence.\n>     For example:\n>     anti_shuffle('Hi') returns 'Hi'\n>     anti_shuffle('hello') returns 'ehllo'\n>     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n>     \"\"\"\n>     return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "coverage": "> def anti_shuffle(s):\n>     \"\"\"\n>     Write a function that takes a string and returns an ordered version of it.\n>     Ordered version of string, is a string where all words (separated by space)\n>     are replaced by a new word where all the characters arranged in\n>     ascending order based on ascii value.\n>     Note: You should keep the order of words and blank spaces in the sentence.\n>     For example:\n>     anti_shuffle('Hi') returns 'Hi'\n>     anti_shuffle('hello') returns 'ehllo'\n>     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n>     \"\"\"\n>     return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}