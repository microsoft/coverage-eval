{"problem_id": 150, "problem": "special_factorial", "method": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n    For example:\n    >>> special_factorial(4)\n    288\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact", "tests": [{"test_id": "971", "test": "def test():\n        assert special_factorial(4) == 288, \"Test 4\"", "coverage_executed": "> def special_factorial(n):\n>     \"\"\"The Brazilian factorial is defined as:\n>     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n>     where n > 0\n>     For example:\n>     >>> special_factorial(4)\n>     288\n>     The function will receive an integer as input and should return the special\n>     factorial of this integer.\n>     \"\"\"\n>     fact_i = 1\n>     special_fact = 1\n>     for i in range(1, n+1):\n>         fact_i *= i\n>         special_fact *= fact_i\n>     return special_fact", "coverage": "> def special_factorial(n):\n>     \"\"\"The Brazilian factorial is defined as:\n>     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n>     where n > 0\n>     For example:\n>     >>> special_factorial(4)\n>     288\n>     The function will receive an integer as input and should return the special\n>     factorial of this integer.\n>     \"\"\"\n>     fact_i = 1\n>     special_fact = 1\n>     for i in range(1, n+1):\n>         fact_i *= i\n>         special_fact *= fact_i\n>     return special_fact", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "972", "test": "def test():\n        assert special_factorial(5) == 34560, \"Test 5\"", "coverage_executed": "> def special_factorial(n):\n>     \"\"\"The Brazilian factorial is defined as:\n>     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n>     where n > 0\n>     For example:\n>     >>> special_factorial(4)\n>     288\n>     The function will receive an integer as input and should return the special\n>     factorial of this integer.\n>     \"\"\"\n>     fact_i = 1\n>     special_fact = 1\n>     for i in range(1, n+1):\n>         fact_i *= i\n>         special_fact *= fact_i\n>     return special_fact", "coverage": "> def special_factorial(n):\n>     \"\"\"The Brazilian factorial is defined as:\n>     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n>     where n > 0\n>     For example:\n>     >>> special_factorial(4)\n>     288\n>     The function will receive an integer as input and should return the special\n>     factorial of this integer.\n>     \"\"\"\n>     fact_i = 1\n>     special_fact = 1\n>     for i in range(1, n+1):\n>         fact_i *= i\n>         special_fact *= fact_i\n>     return special_fact", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "973", "test": "def test():\n        assert special_factorial(7) == 125411328000, \"Test 7\"", "coverage_executed": "> def special_factorial(n):\n>     \"\"\"The Brazilian factorial is defined as:\n>     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n>     where n > 0\n>     For example:\n>     >>> special_factorial(4)\n>     288\n>     The function will receive an integer as input and should return the special\n>     factorial of this integer.\n>     \"\"\"\n>     fact_i = 1\n>     special_fact = 1\n>     for i in range(1, n+1):\n>         fact_i *= i\n>         special_fact *= fact_i\n>     return special_fact", "coverage": "> def special_factorial(n):\n>     \"\"\"The Brazilian factorial is defined as:\n>     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n>     where n > 0\n>     For example:\n>     >>> special_factorial(4)\n>     288\n>     The function will receive an integer as input and should return the special\n>     factorial of this integer.\n>     \"\"\"\n>     fact_i = 1\n>     special_fact = 1\n>     for i in range(1, n+1):\n>         fact_i *= i\n>         special_fact *= fact_i\n>     return special_fact", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "974", "test": "def test():\n        assert special_factorial(1) == 1, \"Test 1\"", "coverage_executed": "> def special_factorial(n):\n>     \"\"\"The Brazilian factorial is defined as:\n>     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n>     where n > 0\n>     For example:\n>     >>> special_factorial(4)\n>     288\n>     The function will receive an integer as input and should return the special\n>     factorial of this integer.\n>     \"\"\"\n>     fact_i = 1\n>     special_fact = 1\n>     for i in range(1, n+1):\n>         fact_i *= i\n>         special_fact *= fact_i\n>     return special_fact", "coverage": "> def special_factorial(n):\n>     \"\"\"The Brazilian factorial is defined as:\n>     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n>     where n > 0\n>     For example:\n>     >>> special_factorial(4)\n>     288\n>     The function will receive an integer as input and should return the special\n>     factorial of this integer.\n>     \"\"\"\n>     fact_i = 1\n>     special_fact = 1\n>     for i in range(1, n+1):\n>         fact_i *= i\n>         special_fact *= fact_i\n>     return special_fact", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}]}