{"problem_id": 58, "problem": "starts_one_ends", "method": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))", "tests": [{"test_id": "501", "test": "def test():\n        assert True, \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def starts_one_ends(n):\n>     \"\"\"\n>     Given a positive integer n, return the count of the numbers of n-digit\n>     positive integers that start or end with 1.\n>     \"\"\"\n\n", "coverage": "> def starts_one_ends(n):\n>     \"\"\"\n>     Given a positive integer n, return the count of the numbers of n-digit\n>     positive integers that start or end with 1.\n>     \"\"\"\n!     if n == 1: return 1\n!     return 18 * (10 ** (n - 2))", "coverage_sequence": [">", ">", ">", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "!", "?"]}, {"test_id": "503", "test": "def test():\n        assert starts_one_ends(2) == 18", "coverage_executed": "> def starts_one_ends(n):\n>     \"\"\"\n>     Given a positive integer n, return the count of the numbers of n-digit\n>     positive integers that start or end with 1.\n>     \"\"\"\n>     if n == 1: return 1\n>     return 18 * (10 ** (n - 2))", "coverage": "> def starts_one_ends(n):\n>     \"\"\"\n>     Given a positive integer n, return the count of the numbers of n-digit\n>     positive integers that start or end with 1.\n>     \"\"\"\n>     if n == 1: return 1\n>     return 18 * (10 ** (n - 2))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", ">", "?"]}, {"test_id": "502", "test": "def test():\n        assert starts_one_ends(1) == 1", "coverage_executed": "> def starts_one_ends(n):\n>     \"\"\"\n>     Given a positive integer n, return the count of the numbers of n-digit\n>     positive integers that start or end with 1.\n>     \"\"\"\n>     if n == 1: return 1\n", "coverage": "> def starts_one_ends(n):\n>     \"\"\"\n>     Given a positive integer n, return the count of the numbers of n-digit\n>     positive integers that start or end with 1.\n>     \"\"\"\n>     if n == 1: return 1\n!     return 18 * (10 ** (n - 2))", "coverage_sequence": [">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", ">", "?"]}, {"test_id": "506", "test": "def test():\n        assert starts_one_ends(5) == 18000", "coverage_executed": "> def starts_one_ends(n):\n>     \"\"\"\n>     Given a positive integer n, return the count of the numbers of n-digit\n>     positive integers that start or end with 1.\n>     \"\"\"\n>     if n == 1: return 1\n>     return 18 * (10 ** (n - 2))", "coverage": "> def starts_one_ends(n):\n>     \"\"\"\n>     Given a positive integer n, return the count of the numbers of n-digit\n>     positive integers that start or end with 1.\n>     \"\"\"\n>     if n == 1: return 1\n>     return 18 * (10 ** (n - 2))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", ">", "?"]}, {"test_id": "507", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def starts_one_ends(n):\n>     \"\"\"\n>     Given a positive integer n, return the count of the numbers of n-digit\n>     positive integers that start or end with 1.\n>     \"\"\"\n\n", "coverage": "> def starts_one_ends(n):\n>     \"\"\"\n>     Given a positive integer n, return the count of the numbers of n-digit\n>     positive integers that start or end with 1.\n>     \"\"\"\n!     if n == 1: return 1\n!     return 18 * (10 ** (n - 2))", "coverage_sequence": [">", ">", ">", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "!", "?"]}, {"test_id": "505", "test": "def test():\n        assert starts_one_ends(4) == 1800", "coverage_executed": "> def starts_one_ends(n):\n>     \"\"\"\n>     Given a positive integer n, return the count of the numbers of n-digit\n>     positive integers that start or end with 1.\n>     \"\"\"\n>     if n == 1: return 1\n>     return 18 * (10 ** (n - 2))", "coverage": "> def starts_one_ends(n):\n>     \"\"\"\n>     Given a positive integer n, return the count of the numbers of n-digit\n>     positive integers that start or end with 1.\n>     \"\"\"\n>     if n == 1: return 1\n>     return 18 * (10 ** (n - 2))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", ">", "?"]}, {"test_id": "504", "test": "def test():\n        assert starts_one_ends(3) == 180", "coverage_executed": "> def starts_one_ends(n):\n>     \"\"\"\n>     Given a positive integer n, return the count of the numbers of n-digit\n>     positive integers that start or end with 1.\n>     \"\"\"\n>     if n == 1: return 1\n>     return 18 * (10 ** (n - 2))", "coverage": "> def starts_one_ends(n):\n>     \"\"\"\n>     Given a positive integer n, return the count of the numbers of n-digit\n>     positive integers that start or end with 1.\n>     \"\"\"\n>     if n == 1: return 1\n>     return 18 * (10 ** (n - 2))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", ">", "?"]}]}