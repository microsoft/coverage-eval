{"problem_id": 127, "problem": "sort_numbers", "method": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))", "tests": [{"test_id": "78", "test": "def test():\n        assert sort_numbers('three') == 'three'", "coverage_executed": "> def sort_numbers(numbers: str) -> str:\n>     \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n>     Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n>     Return the string with numbers sorted from smallest to largest\n>     >>> sort_numbers('three one five')\n>     'one three five'\n>     \"\"\"\n>     value_map = {\n>         'zero': 0,\n>         'one': 1,\n>         'two': 2,\n>         'three': 3,\n>         'four': 4,\n>         'five': 5,\n>         'six': 6,\n>         'seven': 7,\n>         'eight': 8,\n>         'nine': 9\n>     }\n>     return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))", "coverage": "> def sort_numbers(numbers: str) -> str:\n>     \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n>     Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n>     Return the string with numbers sorted from smallest to largest\n>     >>> sort_numbers('three one five')\n>     'one three five'\n>     \"\"\"\n>     value_map = {\n>         'zero': 0,\n>         'one': 1,\n>         'two': 2,\n>         'three': 3,\n>         'four': 4,\n>         'five': 5,\n>         'six': 6,\n>         'seven': 7,\n>         'eight': 8,\n>         'nine': 9\n>     }\n>     return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "79", "test": "def test():\n        assert sort_numbers('three five nine') == 'three five nine'", "coverage_executed": "> def sort_numbers(numbers: str) -> str:\n>     \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n>     Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n>     Return the string with numbers sorted from smallest to largest\n>     >>> sort_numbers('three one five')\n>     'one three five'\n>     \"\"\"\n>     value_map = {\n>         'zero': 0,\n>         'one': 1,\n>         'two': 2,\n>         'three': 3,\n>         'four': 4,\n>         'five': 5,\n>         'six': 6,\n>         'seven': 7,\n>         'eight': 8,\n>         'nine': 9\n>     }\n>     return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))", "coverage": "> def sort_numbers(numbers: str) -> str:\n>     \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n>     Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n>     Return the string with numbers sorted from smallest to largest\n>     >>> sort_numbers('three one five')\n>     'one three five'\n>     \"\"\"\n>     value_map = {\n>         'zero': 0,\n>         'one': 1,\n>         'two': 2,\n>         'three': 3,\n>         'four': 4,\n>         'five': 5,\n>         'six': 6,\n>         'seven': 7,\n>         'eight': 8,\n>         'nine': 9\n>     }\n>     return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "81", "test": "def test():\n        assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "coverage_executed": "> def sort_numbers(numbers: str) -> str:\n>     \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n>     Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n>     Return the string with numbers sorted from smallest to largest\n>     >>> sort_numbers('three one five')\n>     'one three five'\n>     \"\"\"\n>     value_map = {\n>         'zero': 0,\n>         'one': 1,\n>         'two': 2,\n>         'three': 3,\n>         'four': 4,\n>         'five': 5,\n>         'six': 6,\n>         'seven': 7,\n>         'eight': 8,\n>         'nine': 9\n>     }\n>     return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))", "coverage": "> def sort_numbers(numbers: str) -> str:\n>     \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n>     Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n>     Return the string with numbers sorted from smallest to largest\n>     >>> sort_numbers('three one five')\n>     'one three five'\n>     \"\"\"\n>     value_map = {\n>         'zero': 0,\n>         'one': 1,\n>         'two': 2,\n>         'three': 3,\n>         'four': 4,\n>         'five': 5,\n>         'six': 6,\n>         'seven': 7,\n>         'eight': 8,\n>         'nine': 9\n>     }\n>     return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "77", "test": "def test():\n        assert sort_numbers('') == ''", "coverage_executed": "> def sort_numbers(numbers: str) -> str:\n>     \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n>     Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n>     Return the string with numbers sorted from smallest to largest\n>     >>> sort_numbers('three one five')\n>     'one three five'\n>     \"\"\"\n>     value_map = {\n>         'zero': 0,\n>         'one': 1,\n>         'two': 2,\n>         'three': 3,\n>         'four': 4,\n>         'five': 5,\n>         'six': 6,\n>         'seven': 7,\n>         'eight': 8,\n>         'nine': 9\n>     }\n>     return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))", "coverage": "> def sort_numbers(numbers: str) -> str:\n>     \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n>     Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n>     Return the string with numbers sorted from smallest to largest\n>     >>> sort_numbers('three one five')\n>     'one three five'\n>     \"\"\"\n>     value_map = {\n>         'zero': 0,\n>         'one': 1,\n>         'two': 2,\n>         'three': 3,\n>         'four': 4,\n>         'five': 5,\n>         'six': 6,\n>         'seven': 7,\n>         'eight': 8,\n>         'nine': 9\n>     }\n>     return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "80", "test": "def test():\n        assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "coverage_executed": "> def sort_numbers(numbers: str) -> str:\n>     \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n>     Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n>     Return the string with numbers sorted from smallest to largest\n>     >>> sort_numbers('three one five')\n>     'one three five'\n>     \"\"\"\n>     value_map = {\n>         'zero': 0,\n>         'one': 1,\n>         'two': 2,\n>         'three': 3,\n>         'four': 4,\n>         'five': 5,\n>         'six': 6,\n>         'seven': 7,\n>         'eight': 8,\n>         'nine': 9\n>     }\n>     return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))", "coverage": "> def sort_numbers(numbers: str) -> str:\n>     \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n>     Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n>     Return the string with numbers sorted from smallest to largest\n>     >>> sort_numbers('three one five')\n>     'one three five'\n>     \"\"\"\n>     value_map = {\n>         'zero': 0,\n>         'one': 1,\n>         'two': 2,\n>         'three': 3,\n>         'four': 4,\n>         'five': 5,\n>         'six': 6,\n>         'seven': 7,\n>         'eight': 8,\n>         'nine': 9\n>     }\n>     return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}