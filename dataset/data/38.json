{"problem_id": 38, "problem": "prod_signs", "method": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])", "tests": [{"test_id": "868", "test": "def test():\n        assert prod_signs([-1, 1, -1, 1]) == 4", "coverage_executed": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n>     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n>     return prod * sum([abs(i) for i in arr])", "coverage": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n>     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n>     return prod * sum([abs(i) for i in arr])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?"]}, {"test_id": "869", "test": "def test():\n        assert prod_signs([-1, 1, 1, 1]) == -4", "coverage_executed": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n>     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n>     return prod * sum([abs(i) for i in arr])", "coverage": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n>     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n>     return prod * sum([abs(i) for i in arr])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?"]}, {"test_id": "865", "test": "def test():\n        assert prod_signs([1, 1, 1, 2, 3, -1, 1]) == -10", "coverage_executed": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n>     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n>     return prod * sum([abs(i) for i in arr])", "coverage": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n>     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n>     return prod * sum([abs(i) for i in arr])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?"]}, {"test_id": "864", "test": "def test():\n        assert prod_signs([0, 1]) == 0", "coverage_executed": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n>     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n>     return prod * sum([abs(i) for i in arr])", "coverage": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n>     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n>     return prod * sum([abs(i) for i in arr])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?"]}, {"test_id": "871", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n\n\n", "coverage": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n!     if not arr: return None\n!     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n!     return prod * sum([abs(i) for i in arr])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "!", "?", "?"]}, {"test_id": "866", "test": "def test():\n        assert prod_signs([]) == None", "coverage_executed": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n\n", "coverage": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n!     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n!     return prod * sum([abs(i) for i in arr])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?"]}, {"test_id": "867", "test": "def test():\n        assert prod_signs([2, 4,1, 2, -1, -1, 9]) == 20", "coverage_executed": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n>     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n>     return prod * sum([abs(i) for i in arr])", "coverage": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n>     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n>     return prod * sum([abs(i) for i in arr])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?"]}, {"test_id": "870", "test": "def test():\n        assert prod_signs([-1, 1, 1, 0]) == 0", "coverage_executed": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n>     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n>     return prod * sum([abs(i) for i in arr])", "coverage": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n>     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n>     return prod * sum([abs(i) for i in arr])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?"]}, {"test_id": "863", "test": "def test():\n        assert prod_signs([1, 2, 2, -4]) == -9", "coverage_executed": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n>     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n>     return prod * sum([abs(i) for i in arr])", "coverage": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n>     if not arr: return None\n>     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n>     return prod * sum([abs(i) for i in arr])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?"]}, {"test_id": "862", "test": "def test():\n        assert True, \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n\n\n", "coverage": "> def prod_signs(arr):\n>     \"\"\"\n>     You are given an array arr of integers and you need to return\n>     sum of magnitudes of integers multiplied by product of all signs\n>     of each number in the array, represented by 1, -1 or 0.\n>     Note: return None for empty arr.\n>     Example:\n>     >>> prod_signs([1, 2, 2, -4]) == -9\n>     >>> prod_signs([0, 1]) == 0\n>     >>> prod_signs([]) == None\n>     \"\"\"\n!     if not arr: return None\n!     prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n!     return prod * sum([abs(i) for i in arr])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "!", "?", "?"]}]}