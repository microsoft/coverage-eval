{"problem_id": 15, "problem": "iscube", "method": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a", "tests": [{"test_id": "452", "test": "def test():\n        assert iscube(-1) == True, \"Third test error: \" + str(iscube(-1))", "coverage_executed": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "453", "test": "def test():\n        assert iscube(64) == True, \"Fourth test error: \" + str(iscube(64))", "coverage_executed": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "451", "test": "def test():\n        assert iscube(2) == False, \"Second test error: \" + str(iscube(2))", "coverage_executed": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "450", "test": "def test():\n        assert iscube(1) == True, \"First test error: \" + str(iscube(1))", "coverage_executed": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "454", "test": "def test():\n        assert iscube(180) == False, \"Fifth test error: \" + str(iscube(180))", "coverage_executed": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "455", "test": "def test():\n        assert iscube(1000) == True, \"Sixth test error: \" + str(iscube(1000))", "coverage_executed": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "457", "test": "def test():\n        assert iscube(1729) == False, \"2nd edge test error: \" + str(iscube(1728))", "coverage_executed": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "456", "test": "def test():\n        assert iscube(0) == True, \"1st edge test error: \" + str(iscube(0))", "coverage_executed": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage": "> def iscube(a):\n>     '''\n>     Write a function that takes an integer a and returns True \n>     if this ingeger is a cube of some integer number.\n>     Note: you may assume the input is always valid.\n>     Examples:\n>     iscube(1) ==> True\n>     iscube(2) ==> False\n>     iscube(-1) ==> True\n>     iscube(64) ==> True\n>     iscube(0) ==> True\n>     iscube(180) ==> False\n>     '''\n>     a = abs(a)\n>     return int(round(a ** (1. / 3))) ** 3 == a", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}