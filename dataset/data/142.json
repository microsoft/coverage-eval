{"problem_id": 142, "problem": "find_closest_elements", "method": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n    return closest_pair", "tests": [{"test_id": "85", "test": "def test():\n        assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)", "coverage_executed": "> def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n>     \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n>     other and return them in order (smaller number, larger number).\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n>     (2.0, 2.2)\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n>     (2.0, 2.0)\n>     \"\"\"\n>     closest_pair = None\n>     distance = None\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 if distance is None:\n>                     distance = abs(elem - elem2)\n>                     closest_pair = tuple(sorted([elem, elem2]))\n>                 else:\n>                     new_distance = abs(elem - elem2)\n>                     if new_distance < distance:\n>                         distance = new_distance\n>                         closest_pair = tuple(sorted([elem, elem2]))\n>     return closest_pair", "coverage": "> def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n>     \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n>     other and return them in order (smaller number, larger number).\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n>     (2.0, 2.2)\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n>     (2.0, 2.0)\n>     \"\"\"\n>     closest_pair = None\n>     distance = None\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 if distance is None:\n>                     distance = abs(elem - elem2)\n>                     closest_pair = tuple(sorted([elem, elem2]))\n>                 else:\n>                     new_distance = abs(elem - elem2)\n>                     if new_distance < distance:\n>                         distance = new_distance\n>                         closest_pair = tuple(sorted([elem, elem2]))\n>     return closest_pair", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "84", "test": "def test():\n        assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)", "coverage_executed": "> def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n>     \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n>     other and return them in order (smaller number, larger number).\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n>     (2.0, 2.2)\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n>     (2.0, 2.0)\n>     \"\"\"\n>     closest_pair = None\n>     distance = None\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 if distance is None:\n>                     distance = abs(elem - elem2)\n>                     closest_pair = tuple(sorted([elem, elem2]))\n>                 else:\n>                     new_distance = abs(elem - elem2)\n>                     if new_distance < distance:\n>                         distance = new_distance\n>                         closest_pair = tuple(sorted([elem, elem2]))\n>     return closest_pair", "coverage": "> def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n>     \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n>     other and return them in order (smaller number, larger number).\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n>     (2.0, 2.2)\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n>     (2.0, 2.0)\n>     \"\"\"\n>     closest_pair = None\n>     distance = None\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 if distance is None:\n>                     distance = abs(elem - elem2)\n>                     closest_pair = tuple(sorted([elem, elem2]))\n>                 else:\n>                     new_distance = abs(elem - elem2)\n>                     if new_distance < distance:\n>                         distance = new_distance\n>                         closest_pair = tuple(sorted([elem, elem2]))\n>     return closest_pair", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "86", "test": "def test():\n        assert find_closest_elements([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)", "coverage_executed": "> def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n>     \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n>     other and return them in order (smaller number, larger number).\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n>     (2.0, 2.2)\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n>     (2.0, 2.0)\n>     \"\"\"\n>     closest_pair = None\n>     distance = None\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 if distance is None:\n>                     distance = abs(elem - elem2)\n>                     closest_pair = tuple(sorted([elem, elem2]))\n>                 else:\n>                     new_distance = abs(elem - elem2)\n>                     if new_distance < distance:\n>                         distance = new_distance\n>                         closest_pair = tuple(sorted([elem, elem2]))\n>     return closest_pair", "coverage": "> def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n>     \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n>     other and return them in order (smaller number, larger number).\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n>     (2.0, 2.2)\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n>     (2.0, 2.0)\n>     \"\"\"\n>     closest_pair = None\n>     distance = None\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 if distance is None:\n>                     distance = abs(elem - elem2)\n>                     closest_pair = tuple(sorted([elem, elem2]))\n>                 else:\n>                     new_distance = abs(elem - elem2)\n>                     if new_distance < distance:\n>                         distance = new_distance\n>                         closest_pair = tuple(sorted([elem, elem2]))\n>     return closest_pair", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "83", "test": "def test():\n        assert find_closest_elements([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)", "coverage_executed": "> def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n>     \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n>     other and return them in order (smaller number, larger number).\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n>     (2.0, 2.2)\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n>     (2.0, 2.0)\n>     \"\"\"\n>     closest_pair = None\n>     distance = None\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 if distance is None:\n>                     distance = abs(elem - elem2)\n>                     closest_pair = tuple(sorted([elem, elem2]))\n>                 else:\n>                     new_distance = abs(elem - elem2)\n>                     if new_distance < distance:\n>                         distance = new_distance\n>                         closest_pair = tuple(sorted([elem, elem2]))\n>     return closest_pair", "coverage": "> def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n>     \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n>     other and return them in order (smaller number, larger number).\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n>     (2.0, 2.2)\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n>     (2.0, 2.0)\n>     \"\"\"\n>     closest_pair = None\n>     distance = None\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 if distance is None:\n>                     distance = abs(elem - elem2)\n>                     closest_pair = tuple(sorted([elem, elem2]))\n>                 else:\n>                     new_distance = abs(elem - elem2)\n>                     if new_distance < distance:\n>                         distance = new_distance\n>                         closest_pair = tuple(sorted([elem, elem2]))\n>     return closest_pair", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "82", "test": "def test():\n        assert find_closest_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)", "coverage_executed": "> def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n>     \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n>     other and return them in order (smaller number, larger number).\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n>     (2.0, 2.2)\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n>     (2.0, 2.0)\n>     \"\"\"\n>     closest_pair = None\n>     distance = None\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 if distance is None:\n>                     distance = abs(elem - elem2)\n>                     closest_pair = tuple(sorted([elem, elem2]))\n>                 else:\n>                     new_distance = abs(elem - elem2)\n>                     if new_distance < distance:\n>                         distance = new_distance\n>                         closest_pair = tuple(sorted([elem, elem2]))\n>     return closest_pair", "coverage": "> def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n>     \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n>     other and return them in order (smaller number, larger number).\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n>     (2.0, 2.2)\n>     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n>     (2.0, 2.0)\n>     \"\"\"\n>     closest_pair = None\n>     distance = None\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 if distance is None:\n>                     distance = abs(elem - elem2)\n>                     closest_pair = tuple(sorted([elem, elem2]))\n>                 else:\n>                     new_distance = abs(elem - elem2)\n>                     if new_distance < distance:\n>                         distance = new_distance\n>                         closest_pair = tuple(sorted([elem, elem2]))\n>     return closest_pair", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "?"]}]}