{"problem_id": 96, "problem": "decimal_to_binary", "method": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"", "tests": [{"test_id": "467", "test": "def test():\n        assert decimal_to_binary(103) == \"db1100111db\"", "coverage_executed": "> def decimal_to_binary(decimal):\n>     \"\"\"You will be given a number in decimal form and your task is to convert it to\n>     binary format. The function should return a string, with each character representing a binary\n>     number. Each character in the string will be '0' or '1'.\n>     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n>     The extra characters are there to help with the format.\n>     Examples:\n>     decimal_to_binary(15)   # returns \"db1111db\"\n>     decimal_to_binary(32)   # returns \"db100000db\"\n>     \"\"\"\n>     return \"db\" + bin(decimal)[2:] + \"db\"", "coverage": "> def decimal_to_binary(decimal):\n>     \"\"\"You will be given a number in decimal form and your task is to convert it to\n>     binary format. The function should return a string, with each character representing a binary\n>     number. Each character in the string will be '0' or '1'.\n>     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n>     The extra characters are there to help with the format.\n>     Examples:\n>     decimal_to_binary(15)   # returns \"db1111db\"\n>     decimal_to_binary(32)   # returns \"db100000db\"\n>     \"\"\"\n>     return \"db\" + bin(decimal)[2:] + \"db\"", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "466", "test": "def test():\n        assert decimal_to_binary(32) == \"db100000db\"", "coverage_executed": "> def decimal_to_binary(decimal):\n>     \"\"\"You will be given a number in decimal form and your task is to convert it to\n>     binary format. The function should return a string, with each character representing a binary\n>     number. Each character in the string will be '0' or '1'.\n>     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n>     The extra characters are there to help with the format.\n>     Examples:\n>     decimal_to_binary(15)   # returns \"db1111db\"\n>     decimal_to_binary(32)   # returns \"db100000db\"\n>     \"\"\"\n>     return \"db\" + bin(decimal)[2:] + \"db\"", "coverage": "> def decimal_to_binary(decimal):\n>     \"\"\"You will be given a number in decimal form and your task is to convert it to\n>     binary format. The function should return a string, with each character representing a binary\n>     number. Each character in the string will be '0' or '1'.\n>     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n>     The extra characters are there to help with the format.\n>     Examples:\n>     decimal_to_binary(15)   # returns \"db1111db\"\n>     decimal_to_binary(32)   # returns \"db100000db\"\n>     \"\"\"\n>     return \"db\" + bin(decimal)[2:] + \"db\"", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "465", "test": "def test():\n        assert decimal_to_binary(0) == \"db0db\"", "coverage_executed": "> def decimal_to_binary(decimal):\n>     \"\"\"You will be given a number in decimal form and your task is to convert it to\n>     binary format. The function should return a string, with each character representing a binary\n>     number. Each character in the string will be '0' or '1'.\n>     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n>     The extra characters are there to help with the format.\n>     Examples:\n>     decimal_to_binary(15)   # returns \"db1111db\"\n>     decimal_to_binary(32)   # returns \"db100000db\"\n>     \"\"\"\n>     return \"db\" + bin(decimal)[2:] + \"db\"", "coverage": "> def decimal_to_binary(decimal):\n>     \"\"\"You will be given a number in decimal form and your task is to convert it to\n>     binary format. The function should return a string, with each character representing a binary\n>     number. Each character in the string will be '0' or '1'.\n>     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n>     The extra characters are there to help with the format.\n>     Examples:\n>     decimal_to_binary(15)   # returns \"db1111db\"\n>     decimal_to_binary(32)   # returns \"db100000db\"\n>     \"\"\"\n>     return \"db\" + bin(decimal)[2:] + \"db\"", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "469", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def decimal_to_binary(decimal):\n>     \"\"\"You will be given a number in decimal form and your task is to convert it to\n>     binary format. The function should return a string, with each character representing a binary\n>     number. Each character in the string will be '0' or '1'.\n>     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n>     The extra characters are there to help with the format.\n>     Examples:\n>     decimal_to_binary(15)   # returns \"db1111db\"\n>     decimal_to_binary(32)   # returns \"db100000db\"\n>     \"\"\"\n", "coverage": "> def decimal_to_binary(decimal):\n>     \"\"\"You will be given a number in decimal form and your task is to convert it to\n>     binary format. The function should return a string, with each character representing a binary\n>     number. Each character in the string will be '0' or '1'.\n>     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n>     The extra characters are there to help with the format.\n>     Examples:\n>     decimal_to_binary(15)   # returns \"db1111db\"\n>     decimal_to_binary(32)   # returns \"db100000db\"\n>     \"\"\"\n!     return \"db\" + bin(decimal)[2:] + \"db\"", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "468", "test": "def test():\n        assert decimal_to_binary(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def decimal_to_binary(decimal):\n>     \"\"\"You will be given a number in decimal form and your task is to convert it to\n>     binary format. The function should return a string, with each character representing a binary\n>     number. Each character in the string will be '0' or '1'.\n>     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n>     The extra characters are there to help with the format.\n>     Examples:\n>     decimal_to_binary(15)   # returns \"db1111db\"\n>     decimal_to_binary(32)   # returns \"db100000db\"\n>     \"\"\"\n>     return \"db\" + bin(decimal)[2:] + \"db\"", "coverage": "> def decimal_to_binary(decimal):\n>     \"\"\"You will be given a number in decimal form and your task is to convert it to\n>     binary format. The function should return a string, with each character representing a binary\n>     number. Each character in the string will be '0' or '1'.\n>     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n>     The extra characters are there to help with the format.\n>     Examples:\n>     decimal_to_binary(15)   # returns \"db1111db\"\n>     decimal_to_binary(32)   # returns \"db100000db\"\n>     \"\"\"\n>     return \"db\" + bin(decimal)[2:] + \"db\"", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}