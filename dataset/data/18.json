{"problem_id": 18, "problem": "sort_array", "method": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "tests": [{"test_id": "753", "test": "def test():\n        assert sort_array([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]", "coverage_executed": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "752", "test": "def test():\n        assert sort_array([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]", "coverage_executed": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "750", "test": "def test():\n        assert sort_array([1,0,2,3,4]) == [0, 1, 2, 4, 3]", "coverage_executed": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "747", "test": "def test():\n        assert True, \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n", "coverage": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n!     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "751", "test": "def test():\n        assert sort_array([]) == []", "coverage_executed": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "755", "test": "def test():\n        assert sort_array([2,4,8,16,32]) == [2, 4, 8, 16, 32]", "coverage_executed": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "754", "test": "def test():\n        assert sort_array([2,4,8,16,32]) == [2, 4, 8, 16, 32]", "coverage_executed": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "756", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n", "coverage": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n!     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "749", "test": "def test():\n        assert sort_array([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]", "coverage_executed": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "748", "test": "def test():\n        assert sort_array([1,5,2,3,4]) == [1, 2, 4, 3, 5]", "coverage_executed": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage": "> def sort_array(arr):\n>     \"\"\"\n>     In this Kata, you have to sort an array of non-negative integers according to\n>     number of ones in their binary representation in ascending order.\n>     For similar number of ones, sort based on decimal value.\n>     It must be implemented like this:\n>     >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n>     \"\"\"\n>     return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}