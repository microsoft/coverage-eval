{"problem_id": 86, "problem": "add", "method": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])", "tests": [{"test_id": "518", "test": "def test():\n        assert add([4, 4, 6, 8]) == 12", "coverage_executed": "> def add(lst):\n>     \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n>     Examples:\n>         add([4, 2, 6, 7]) ==> 2 \n>     \"\"\"\n>     return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])", "coverage": "> def add(lst):\n>     \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n>     Examples:\n>         add([4, 2, 6, 7]) ==> 2 \n>     \"\"\"\n>     return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])", "coverage_sequence": [">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?"]}, {"test_id": "516", "test": "def test():\n        assert add([4, 5, 6, 7, 2, 122]) == 122", "coverage_executed": "> def add(lst):\n>     \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n>     Examples:\n>         add([4, 2, 6, 7]) ==> 2 \n>     \"\"\"\n>     return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])", "coverage": "> def add(lst):\n>     \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n>     Examples:\n>         add([4, 2, 6, 7]) ==> 2 \n>     \"\"\"\n>     return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])", "coverage_sequence": [">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?"]}, {"test_id": "517", "test": "def test():\n        assert add([4, 0, 6, 7]) == 0", "coverage_executed": "> def add(lst):\n>     \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n>     Examples:\n>         add([4, 2, 6, 7]) ==> 2 \n>     \"\"\"\n>     return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])", "coverage": "> def add(lst):\n>     \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n>     Examples:\n>         add([4, 2, 6, 7]) ==> 2 \n>     \"\"\"\n>     return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])", "coverage_sequence": [">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?"]}, {"test_id": "515", "test": "def test():\n        assert add([4, 88]) == 88", "coverage_executed": "> def add(lst):\n>     \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n>     Examples:\n>         add([4, 2, 6, 7]) ==> 2 \n>     \"\"\"\n>     return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])", "coverage": "> def add(lst):\n>     \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n>     Examples:\n>         add([4, 2, 6, 7]) ==> 2 \n>     \"\"\"\n>     return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])", "coverage_sequence": [">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?"]}]}