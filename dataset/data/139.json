{"problem_id": 139, "problem": "unique_digits", "method": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n    Note: Returned list should be sorted in increasing order.\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)", "tests": [{"test_id": "665", "test": "def test():\n        assert unique_digits([135, 103, 31]) == [31, 135]", "coverage_executed": "> def unique_digits(x):\n>     \"\"\"Given a list of positive integers x. return a sorted list of all \n>     elements that hasn't any even digit.\n>     Note: Returned list should be sorted in increasing order.\n>     For example:\n>     >>> unique_digits([15, 33, 1422, 1])\n>     [1, 15, 33]\n>     >>> unique_digits([152, 323, 1422, 10])\n>     []\n>     \"\"\"\n>     odd_digit_elements = []\n>     for i in x:\n>         if all (int(c) % 2 == 1 for c in str(i)):\n>             odd_digit_elements.append(i)\n>     return sorted(odd_digit_elements)", "coverage": "> def unique_digits(x):\n>     \"\"\"Given a list of positive integers x. return a sorted list of all \n>     elements that hasn't any even digit.\n>     Note: Returned list should be sorted in increasing order.\n>     For example:\n>     >>> unique_digits([15, 33, 1422, 1])\n>     [1, 15, 33]\n>     >>> unique_digits([152, 323, 1422, 10])\n>     []\n>     \"\"\"\n>     odd_digit_elements = []\n>     for i in x:\n>         if all (int(c) % 2 == 1 for c in str(i)):\n>             odd_digit_elements.append(i)\n>     return sorted(odd_digit_elements)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "664", "test": "def test():\n        assert unique_digits([12345, 2033, 111, 151]) == [111, 151]", "coverage_executed": "> def unique_digits(x):\n>     \"\"\"Given a list of positive integers x. return a sorted list of all \n>     elements that hasn't any even digit.\n>     Note: Returned list should be sorted in increasing order.\n>     For example:\n>     >>> unique_digits([15, 33, 1422, 1])\n>     [1, 15, 33]\n>     >>> unique_digits([152, 323, 1422, 10])\n>     []\n>     \"\"\"\n>     odd_digit_elements = []\n>     for i in x:\n>         if all (int(c) % 2 == 1 for c in str(i)):\n>             odd_digit_elements.append(i)\n>     return sorted(odd_digit_elements)", "coverage": "> def unique_digits(x):\n>     \"\"\"Given a list of positive integers x. return a sorted list of all \n>     elements that hasn't any even digit.\n>     Note: Returned list should be sorted in increasing order.\n>     For example:\n>     >>> unique_digits([15, 33, 1422, 1])\n>     [1, 15, 33]\n>     >>> unique_digits([152, 323, 1422, 10])\n>     []\n>     \"\"\"\n>     odd_digit_elements = []\n>     for i in x:\n>         if all (int(c) % 2 == 1 for c in str(i)):\n>             odd_digit_elements.append(i)\n>     return sorted(odd_digit_elements)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "663", "test": "def test():\n        assert unique_digits([152, 323, 1422, 10]) == []", "coverage_executed": "> def unique_digits(x):\n>     \"\"\"Given a list of positive integers x. return a sorted list of all \n>     elements that hasn't any even digit.\n>     Note: Returned list should be sorted in increasing order.\n>     For example:\n>     >>> unique_digits([15, 33, 1422, 1])\n>     [1, 15, 33]\n>     >>> unique_digits([152, 323, 1422, 10])\n>     []\n>     \"\"\"\n>     odd_digit_elements = []\n>     for i in x:\n>         if all (int(c) % 2 == 1 for c in str(i)):\n\n>     return sorted(odd_digit_elements)", "coverage": "> def unique_digits(x):\n>     \"\"\"Given a list of positive integers x. return a sorted list of all \n>     elements that hasn't any even digit.\n>     Note: Returned list should be sorted in increasing order.\n>     For example:\n>     >>> unique_digits([15, 33, 1422, 1])\n>     [1, 15, 33]\n>     >>> unique_digits([152, 323, 1422, 10])\n>     []\n>     \"\"\"\n>     odd_digit_elements = []\n>     for i in x:\n>         if all (int(c) % 2 == 1 for c in str(i)):\n!             odd_digit_elements.append(i)\n>     return sorted(odd_digit_elements)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "?"]}, {"test_id": "662", "test": "def test():\n        assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]", "coverage_executed": "> def unique_digits(x):\n>     \"\"\"Given a list of positive integers x. return a sorted list of all \n>     elements that hasn't any even digit.\n>     Note: Returned list should be sorted in increasing order.\n>     For example:\n>     >>> unique_digits([15, 33, 1422, 1])\n>     [1, 15, 33]\n>     >>> unique_digits([152, 323, 1422, 10])\n>     []\n>     \"\"\"\n>     odd_digit_elements = []\n>     for i in x:\n>         if all (int(c) % 2 == 1 for c in str(i)):\n>             odd_digit_elements.append(i)\n>     return sorted(odd_digit_elements)", "coverage": "> def unique_digits(x):\n>     \"\"\"Given a list of positive integers x. return a sorted list of all \n>     elements that hasn't any even digit.\n>     Note: Returned list should be sorted in increasing order.\n>     For example:\n>     >>> unique_digits([15, 33, 1422, 1])\n>     [1, 15, 33]\n>     >>> unique_digits([152, 323, 1422, 10])\n>     []\n>     \"\"\"\n>     odd_digit_elements = []\n>     for i in x:\n>         if all (int(c) % 2 == 1 for c in str(i)):\n>             odd_digit_elements.append(i)\n>     return sorted(odd_digit_elements)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}]}