{"problem_id": 153, "problem": "do_algebra", "method": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)", "tests": [{"test_id": "1160", "test": "def test():\n        assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9", "coverage_executed": "> def do_algebra(operator, operand):\n>     \"\"\"\n>     Given two lists operator, and operand. The first list has basic algebra operations, and \n>     the second list is a list of integers. Use the two given lists to build the algebric \n>     expression and return the evaluation of this expression.\n>     The basic algebra operations:\n>     Addition ( + ) \n>     Subtraction ( - ) \n>     Multiplication ( * ) \n>     Floor division ( // ) \n>     Exponentiation ( ** ) \n>     Example:\n>     operator['+', '*', '-']\n>     array = [2, 3, 4, 5]\n>     result = 2 + 3 * 4 - 5\n>     => result = 9\n>     Note:\n>         The length of operator list is equal to the length of operand list minus one.\n>         Operand is a list of of non-negative integers.\n>         Operator list has at least one operator, and operand list has at least two operands.\n>     \"\"\"\n>     expression = str(operand[0])\n>     for oprt, oprn in zip(operator, operand[1:]):\n>         expression+= oprt + str(oprn)\n>     return eval(expression)", "coverage": "> def do_algebra(operator, operand):\n>     \"\"\"\n>     Given two lists operator, and operand. The first list has basic algebra operations, and \n>     the second list is a list of integers. Use the two given lists to build the algebric \n>     expression and return the evaluation of this expression.\n>     The basic algebra operations:\n>     Addition ( + ) \n>     Subtraction ( - ) \n>     Multiplication ( * ) \n>     Floor division ( // ) \n>     Exponentiation ( ** ) \n>     Example:\n>     operator['+', '*', '-']\n>     array = [2, 3, 4, 5]\n>     result = 2 + 3 * 4 - 5\n>     => result = 9\n>     Note:\n>         The length of operator list is equal to the length of operand list minus one.\n>         Operand is a list of of non-negative integers.\n>         Operator list has at least one operator, and operand list has at least two operands.\n>     \"\"\"\n>     expression = str(operand[0])\n>     for oprt, oprn in zip(operator, operand[1:]):\n>         expression+= oprt + str(oprn)\n>     return eval(expression)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?"]}, {"test_id": "1161", "test": "def test():\n        assert do_algebra(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def do_algebra(operator, operand):\n>     \"\"\"\n>     Given two lists operator, and operand. The first list has basic algebra operations, and \n>     the second list is a list of integers. Use the two given lists to build the algebric \n>     expression and return the evaluation of this expression.\n>     The basic algebra operations:\n>     Addition ( + ) \n>     Subtraction ( - ) \n>     Multiplication ( * ) \n>     Floor division ( // ) \n>     Exponentiation ( ** ) \n>     Example:\n>     operator['+', '*', '-']\n>     array = [2, 3, 4, 5]\n>     result = 2 + 3 * 4 - 5\n>     => result = 9\n>     Note:\n>         The length of operator list is equal to the length of operand list minus one.\n>         Operand is a list of of non-negative integers.\n>         Operator list has at least one operator, and operand list has at least two operands.\n>     \"\"\"\n>     expression = str(operand[0])\n>     for oprt, oprn in zip(operator, operand[1:]):\n>         expression+= oprt + str(oprn)\n>     return eval(expression)", "coverage": "> def do_algebra(operator, operand):\n>     \"\"\"\n>     Given two lists operator, and operand. The first list has basic algebra operations, and \n>     the second list is a list of integers. Use the two given lists to build the algebric \n>     expression and return the evaluation of this expression.\n>     The basic algebra operations:\n>     Addition ( + ) \n>     Subtraction ( - ) \n>     Multiplication ( * ) \n>     Floor division ( // ) \n>     Exponentiation ( ** ) \n>     Example:\n>     operator['+', '*', '-']\n>     array = [2, 3, 4, 5]\n>     result = 2 + 3 * 4 - 5\n>     => result = 9\n>     Note:\n>         The length of operator list is equal to the length of operand list minus one.\n>         Operand is a list of of non-negative integers.\n>         Operator list has at least one operator, and operand list has at least two operands.\n>     \"\"\"\n>     expression = str(operand[0])\n>     for oprt, oprn in zip(operator, operand[1:]):\n>         expression+= oprt + str(oprn)\n>     return eval(expression)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?"]}, {"test_id": "1159", "test": "def test():\n        assert do_algebra(['**', '*', '+'], [2, 3, 4, 5]) == 37", "coverage_executed": "> def do_algebra(operator, operand):\n>     \"\"\"\n>     Given two lists operator, and operand. The first list has basic algebra operations, and \n>     the second list is a list of integers. Use the two given lists to build the algebric \n>     expression and return the evaluation of this expression.\n>     The basic algebra operations:\n>     Addition ( + ) \n>     Subtraction ( - ) \n>     Multiplication ( * ) \n>     Floor division ( // ) \n>     Exponentiation ( ** ) \n>     Example:\n>     operator['+', '*', '-']\n>     array = [2, 3, 4, 5]\n>     result = 2 + 3 * 4 - 5\n>     => result = 9\n>     Note:\n>         The length of operator list is equal to the length of operand list minus one.\n>         Operand is a list of of non-negative integers.\n>         Operator list has at least one operator, and operand list has at least two operands.\n>     \"\"\"\n>     expression = str(operand[0])\n>     for oprt, oprn in zip(operator, operand[1:]):\n>         expression+= oprt + str(oprn)\n>     return eval(expression)", "coverage": "> def do_algebra(operator, operand):\n>     \"\"\"\n>     Given two lists operator, and operand. The first list has basic algebra operations, and \n>     the second list is a list of integers. Use the two given lists to build the algebric \n>     expression and return the evaluation of this expression.\n>     The basic algebra operations:\n>     Addition ( + ) \n>     Subtraction ( - ) \n>     Multiplication ( * ) \n>     Floor division ( // ) \n>     Exponentiation ( ** ) \n>     Example:\n>     operator['+', '*', '-']\n>     array = [2, 3, 4, 5]\n>     result = 2 + 3 * 4 - 5\n>     => result = 9\n>     Note:\n>         The length of operator list is equal to the length of operand list minus one.\n>         Operand is a list of of non-negative integers.\n>         Operator list has at least one operator, and operand list has at least two operands.\n>     \"\"\"\n>     expression = str(operand[0])\n>     for oprt, oprn in zip(operator, operand[1:]):\n>         expression+= oprt + str(oprn)\n>     return eval(expression)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?"]}, {"test_id": "1162", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def do_algebra(operator, operand):\n>     \"\"\"\n>     Given two lists operator, and operand. The first list has basic algebra operations, and \n>     the second list is a list of integers. Use the two given lists to build the algebric \n>     expression and return the evaluation of this expression.\n>     The basic algebra operations:\n>     Addition ( + ) \n>     Subtraction ( - ) \n>     Multiplication ( * ) \n>     Floor division ( // ) \n>     Exponentiation ( ** ) \n>     Example:\n>     operator['+', '*', '-']\n>     array = [2, 3, 4, 5]\n>     result = 2 + 3 * 4 - 5\n>     => result = 9\n>     Note:\n>         The length of operator list is equal to the length of operand list minus one.\n>         Operand is a list of of non-negative integers.\n>         Operator list has at least one operator, and operand list has at least two operands.\n>     \"\"\"\n\n\n\n", "coverage": "> def do_algebra(operator, operand):\n>     \"\"\"\n>     Given two lists operator, and operand. The first list has basic algebra operations, and \n>     the second list is a list of integers. Use the two given lists to build the algebric \n>     expression and return the evaluation of this expression.\n>     The basic algebra operations:\n>     Addition ( + ) \n>     Subtraction ( - ) \n>     Multiplication ( * ) \n>     Floor division ( // ) \n>     Exponentiation ( ** ) \n>     Example:\n>     operator['+', '*', '-']\n>     array = [2, 3, 4, 5]\n>     result = 2 + 3 * 4 - 5\n>     => result = 9\n>     Note:\n>         The length of operator list is equal to the length of operand list minus one.\n>         Operand is a list of of non-negative integers.\n>         Operator list has at least one operator, and operand list has at least two operands.\n>     \"\"\"\n!     expression = str(operand[0])\n!     for oprt, oprn in zip(operator, operand[1:]):\n!         expression+= oprt + str(oprn)\n!     return eval(expression)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "!", "!", "?"]}]}