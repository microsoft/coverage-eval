{"problem_id": 105, "problem": "filter_by_substring", "method": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring in x]", "tests": [{"test_id": "32", "test": "def test():\n        assert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "coverage_executed": "> def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n>     \"\"\" Filter an input list of strings only for ones that contain given substring\n>     >>> filter_by_substring([], 'a')\n>     []\n>     >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n>     ['abc', 'bacd', 'array']\n>     \"\"\"\n>     return [x for x in strings if substring in x]", "coverage": "> def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n>     \"\"\" Filter an input list of strings only for ones that contain given substring\n>     >>> filter_by_substring([], 'a')\n>     []\n>     >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n>     ['abc', 'bacd', 'array']\n>     \"\"\"\n>     return [x for x in strings if substring in x]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "31", "test": "def test():\n        assert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "coverage_executed": "> def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n>     \"\"\" Filter an input list of strings only for ones that contain given substring\n>     >>> filter_by_substring([], 'a')\n>     []\n>     >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n>     ['abc', 'bacd', 'array']\n>     \"\"\"\n>     return [x for x in strings if substring in x]", "coverage": "> def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n>     \"\"\" Filter an input list of strings only for ones that contain given substring\n>     >>> filter_by_substring([], 'a')\n>     []\n>     >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n>     ['abc', 'bacd', 'array']\n>     \"\"\"\n>     return [x for x in strings if substring in x]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "30", "test": "def test():\n        assert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "coverage_executed": "> def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n>     \"\"\" Filter an input list of strings only for ones that contain given substring\n>     >>> filter_by_substring([], 'a')\n>     []\n>     >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n>     ['abc', 'bacd', 'array']\n>     \"\"\"\n>     return [x for x in strings if substring in x]", "coverage": "> def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n>     \"\"\" Filter an input list of strings only for ones that contain given substring\n>     >>> filter_by_substring([], 'a')\n>     []\n>     >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n>     ['abc', 'bacd', 'array']\n>     \"\"\"\n>     return [x for x in strings if substring in x]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "29", "test": "def test():\n        assert filter_by_substring([], 'john') == []", "coverage_executed": "> def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n>     \"\"\" Filter an input list of strings only for ones that contain given substring\n>     >>> filter_by_substring([], 'a')\n>     []\n>     >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n>     ['abc', 'bacd', 'array']\n>     \"\"\"\n>     return [x for x in strings if substring in x]", "coverage": "> def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n>     \"\"\" Filter an input list of strings only for ones that contain given substring\n>     >>> filter_by_substring([], 'a')\n>     []\n>     >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n>     ['abc', 'bacd', 'array']\n>     \"\"\"\n>     return [x for x in strings if substring in x]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}]}