{"problem_id": 154, "problem": "solution", "method": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "tests": [{"test_id": "803", "test": "def test():\n        assert solution([30, 13, 24, 321]) == 0", "coverage_executed": "> def solution(lst):\n>     \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n>     Examples\n>     solution([5, 8, 7, 1]) ==> 12\n>     solution([3, 3, 3, 3, 3]) ==> 9\n>     solution([30, 13, 24, 321]) ==>0\n>     \"\"\"\n>     return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "coverage": "> def solution(lst):\n>     \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n>     Examples\n>     solution([5, 8, 7, 1]) ==> 12\n>     solution([3, 3, 3, 3, 3]) ==> 9\n>     solution([30, 13, 24, 321]) ==>0\n>     \"\"\"\n>     return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "802", "test": "def test():\n        assert solution([3, 3, 3, 3, 3]) == 9", "coverage_executed": "> def solution(lst):\n>     \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n>     Examples\n>     solution([5, 8, 7, 1]) ==> 12\n>     solution([3, 3, 3, 3, 3]) ==> 9\n>     solution([30, 13, 24, 321]) ==>0\n>     \"\"\"\n>     return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "coverage": "> def solution(lst):\n>     \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n>     Examples\n>     solution([5, 8, 7, 1]) ==> 12\n>     solution([3, 3, 3, 3, 3]) ==> 9\n>     solution([30, 13, 24, 321]) ==>0\n>     \"\"\"\n>     return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "801", "test": "def test():\n        assert solution([5, 8, 7, 1])    == 12", "coverage_executed": "> def solution(lst):\n>     \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n>     Examples\n>     solution([5, 8, 7, 1]) ==> 12\n>     solution([3, 3, 3, 3, 3]) ==> 9\n>     solution([30, 13, 24, 321]) ==>0\n>     \"\"\"\n>     return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "coverage": "> def solution(lst):\n>     \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n>     Examples\n>     solution([5, 8, 7, 1]) ==> 12\n>     solution([3, 3, 3, 3, 3]) ==> 9\n>     solution([30, 13, 24, 321]) ==>0\n>     \"\"\"\n>     return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "805", "test": "def test():\n        assert solution([2, 4, 8]) == 0", "coverage_executed": "> def solution(lst):\n>     \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n>     Examples\n>     solution([5, 8, 7, 1]) ==> 12\n>     solution([3, 3, 3, 3, 3]) ==> 9\n>     solution([30, 13, 24, 321]) ==>0\n>     \"\"\"\n>     return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "coverage": "> def solution(lst):\n>     \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n>     Examples\n>     solution([5, 8, 7, 1]) ==> 12\n>     solution([3, 3, 3, 3, 3]) ==> 9\n>     solution([30, 13, 24, 321]) ==>0\n>     \"\"\"\n>     return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "804", "test": "def test():\n        assert solution([5, 9]) == 5", "coverage_executed": "> def solution(lst):\n>     \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n>     Examples\n>     solution([5, 8, 7, 1]) ==> 12\n>     solution([3, 3, 3, 3, 3]) ==> 9\n>     solution([30, 13, 24, 321]) ==>0\n>     \"\"\"\n>     return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "coverage": "> def solution(lst):\n>     \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n>     Examples\n>     solution([5, 8, 7, 1]) ==> 12\n>     solution([3, 3, 3, 3, 3]) ==> 9\n>     solution([30, 13, 24, 321]) ==>0\n>     \"\"\"\n>     return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "806", "test": "def test():\n        assert solution([30, 13, 23, 32]) == 23", "coverage_executed": "> def solution(lst):\n>     \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n>     Examples\n>     solution([5, 8, 7, 1]) ==> 12\n>     solution([3, 3, 3, 3, 3]) ==> 9\n>     solution([30, 13, 24, 321]) ==>0\n>     \"\"\"\n>     return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "coverage": "> def solution(lst):\n>     \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n>     Examples\n>     solution([5, 8, 7, 1]) ==> 12\n>     solution([3, 3, 3, 3, 3]) ==> 9\n>     solution([30, 13, 24, 321]) ==>0\n>     \"\"\"\n>     return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "807", "test": "def test():\n        assert solution([3, 13, 2, 9]) == 3", "coverage_executed": "> def solution(lst):\n>     \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n>     Examples\n>     solution([5, 8, 7, 1]) ==> 12\n>     solution([3, 3, 3, 3, 3]) ==> 9\n>     solution([30, 13, 24, 321]) ==>0\n>     \"\"\"\n>     return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "coverage": "> def solution(lst):\n>     \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n>     Examples\n>     solution([5, 8, 7, 1]) ==> 12\n>     solution([3, 3, 3, 3, 3]) ==> 9\n>     solution([30, 13, 24, 321]) ==>0\n>     \"\"\"\n>     return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}]}