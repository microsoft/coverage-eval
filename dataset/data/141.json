{"problem_id": 141, "problem": "find_zero", "method": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin", "tests": [{"test_id": "139", "test": "def test():\n            assert math.fabs(poly(coeffs, solution)) < 1e-4", "coverage_executed": "> def poly(xs: list, x: float):\n>     \"\"\"\n>     Evaluates polynomial with coefficients xs at point x.\n>     return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n>     \"\"\"\n\n> def find_zero(xs: list):\n>     \"\"\" xs are coefficients of a polynomial.\n>     find_zero find x such that poly(x) = 0.\n>     find_zero returns only only zero point, even if there are many.\n>     Moreover, find_zero only takes list xs having even number of coefficients\n>     and largest non zero coefficient as it guarantees\n>     a solution.\n>     >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n>     -0.5\n>     >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n>     1.0\n>     \"\"\"\n\n\n\n\n\n\n\n\n\n\n", "coverage": "> def poly(xs: list, x: float):\n>     \"\"\"\n>     Evaluates polynomial with coefficients xs at point x.\n>     return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n>     \"\"\"\n!     return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n> def find_zero(xs: list):\n>     \"\"\" xs are coefficients of a polynomial.\n>     find_zero find x such that poly(x) = 0.\n>     find_zero returns only only zero point, even if there are many.\n>     Moreover, find_zero only takes list xs having even number of coefficients\n>     and largest non zero coefficient as it guarantees\n>     a solution.\n>     >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n>     -0.5\n>     >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n>     1.0\n>     \"\"\"\n!     begin, end = -1., 1.\n!     while poly(xs, begin) * poly(xs, end) > 0:\n!         begin *= 2.0\n!         end *= 2.0\n!     while end - begin > 1e-10:\n!         center = (begin + end) / 2.0\n!         if poly(xs, center) * poly(xs, begin) > 0:\n!             begin = center\n!         else:\n!             end = center\n!     return begin", "coverage_sequence": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "!", "!", "!", "!", "!", "!", "!", "!", "!", "?"]}]}