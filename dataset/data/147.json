{"problem_id": 147, "problem": "is_happy", "method": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n      return False\n    for i in range(len(s) - 2):\n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True", "tests": [{"test_id": "470", "test": "def test():\n        assert is_happy(\"a\") == False , \"a\"", "coverage_executed": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n>       return False\n\n\n\n", "coverage": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n>       return False\n!     for i in range(len(s) - 2):\n!       if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n!         return False\n!     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "!", "?"]}, {"test_id": "471", "test": "def test():\n        assert is_happy(\"aa\") == False , \"aa\"", "coverage_executed": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n>       return False\n\n\n\n", "coverage": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n>       return False\n!     for i in range(len(s) - 2):\n!       if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n!         return False\n!     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "!", "?"]}, {"test_id": "473", "test": "def test():\n        assert is_happy(\"aabb\") == False , \"aabb\"", "coverage_executed": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n\n>     for i in range(len(s) - 2):\n>       if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n>         return False\n", "coverage": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n!       return False\n>     for i in range(len(s) - 2):\n>       if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n>         return False\n!     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", "?"]}, {"test_id": "472", "test": "def test():\n        assert is_happy(\"abcd\") == True , \"abcd\"", "coverage_executed": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n\n>     for i in range(len(s) - 2):\n>       if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n\n>     return True", "coverage": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n!       return False\n>     for i in range(len(s) - 2):\n>       if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n!         return False\n>     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", "!", "?"]}, {"test_id": "476", "test": "def test():\n        assert is_happy(\"iopaxpoi\") == True , \"iopaxpoi\"", "coverage_executed": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n\n>     for i in range(len(s) - 2):\n>       if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n\n>     return True", "coverage": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n!       return False\n>     for i in range(len(s) - 2):\n>       if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n!         return False\n>     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", "!", "?"]}, {"test_id": "477", "test": "def test():\n        assert is_happy(\"iopaxioi\") == False , \"iopaxioi\"", "coverage_executed": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n\n>     for i in range(len(s) - 2):\n>       if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n>         return False\n", "coverage": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n!       return False\n>     for i in range(len(s) - 2):\n>       if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n>         return False\n!     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", "?"]}, {"test_id": "475", "test": "def test():\n        assert is_happy(\"xyy\") == False , \"xyy\"", "coverage_executed": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n\n>     for i in range(len(s) - 2):\n>       if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n>         return False\n", "coverage": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n!       return False\n>     for i in range(len(s) - 2):\n>       if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n>         return False\n!     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", "?"]}, {"test_id": "474", "test": "def test():\n        assert is_happy(\"adb\") == True , \"adb\"", "coverage_executed": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n\n>     for i in range(len(s) - 2):\n>       if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n\n>     return True", "coverage": "> def is_happy(s):\n>     \"\"\"You are given a string s.\n>     Your task is to check if the string is happy or not.\n>     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n>     For example:\n>     is_happy(a) => False\n>     is_happy(aa) => False\n>     is_happy(abcd) => True\n>     is_happy(aabb) => False\n>     is_happy(adb) => True\n>     is_happy(xyy) => False\n>     \"\"\"\n>     if len(s) < 3:\n!       return False\n>     for i in range(len(s) - 2):\n>       if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n!         return False\n>     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", "!", "?"]}]}