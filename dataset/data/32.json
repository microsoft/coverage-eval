{"problem_id": 32, "problem": "common", "method": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))", "tests": [{"test_id": "286", "test": "def test():\n        assert common([4, 3, 2, 8], []) == []", "coverage_executed": "> def common(l1: list, l2: list):\n>     \"\"\"Return sorted unique common elements for two lists.\n>     >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n>     [1, 5, 653]\n>     >>> common([5, 3, 2, 8], [3, 2])\n>     [2, 3]\n>     \"\"\"\n>     ret = set()\n>     for e1 in l1:\n>         for e2 in l2:\n\n\n>     return sorted(list(ret))", "coverage": "> def common(l1: list, l2: list):\n>     \"\"\"Return sorted unique common elements for two lists.\n>     >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n>     [1, 5, 653]\n>     >>> common([5, 3, 2, 8], [3, 2])\n>     [2, 3]\n>     \"\"\"\n>     ret = set()\n>     for e1 in l1:\n>         for e2 in l2:\n!             if e1 == e2:\n!                 ret.add(e1)\n>     return sorted(list(ret))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "?"]}, {"test_id": "285", "test": "def test():\n        assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "coverage_executed": "> def common(l1: list, l2: list):\n>     \"\"\"Return sorted unique common elements for two lists.\n>     >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n>     [1, 5, 653]\n>     >>> common([5, 3, 2, 8], [3, 2])\n>     [2, 3]\n>     \"\"\"\n>     ret = set()\n>     for e1 in l1:\n>         for e2 in l2:\n>             if e1 == e2:\n>                 ret.add(e1)\n>     return sorted(list(ret))", "coverage": "> def common(l1: list, l2: list):\n>     \"\"\"Return sorted unique common elements for two lists.\n>     >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n>     [1, 5, 653]\n>     >>> common([5, 3, 2, 8], [3, 2])\n>     [2, 3]\n>     \"\"\"\n>     ret = set()\n>     for e1 in l1:\n>         for e2 in l2:\n>             if e1 == e2:\n>                 ret.add(e1)\n>     return sorted(list(ret))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "284", "test": "def test():\n        assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "coverage_executed": "> def common(l1: list, l2: list):\n>     \"\"\"Return sorted unique common elements for two lists.\n>     >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n>     [1, 5, 653]\n>     >>> common([5, 3, 2, 8], [3, 2])\n>     [2, 3]\n>     \"\"\"\n>     ret = set()\n>     for e1 in l1:\n>         for e2 in l2:\n>             if e1 == e2:\n>                 ret.add(e1)\n>     return sorted(list(ret))", "coverage": "> def common(l1: list, l2: list):\n>     \"\"\"Return sorted unique common elements for two lists.\n>     >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n>     [1, 5, 653]\n>     >>> common([5, 3, 2, 8], [3, 2])\n>     [2, 3]\n>     \"\"\"\n>     ret = set()\n>     for e1 in l1:\n>         for e2 in l2:\n>             if e1 == e2:\n>                 ret.add(e1)\n>     return sorted(list(ret))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "283", "test": "def test():\n        assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "coverage_executed": "> def common(l1: list, l2: list):\n>     \"\"\"Return sorted unique common elements for two lists.\n>     >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n>     [1, 5, 653]\n>     >>> common([5, 3, 2, 8], [3, 2])\n>     [2, 3]\n>     \"\"\"\n>     ret = set()\n>     for e1 in l1:\n>         for e2 in l2:\n>             if e1 == e2:\n>                 ret.add(e1)\n>     return sorted(list(ret))", "coverage": "> def common(l1: list, l2: list):\n>     \"\"\"Return sorted unique common elements for two lists.\n>     >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n>     [1, 5, 653]\n>     >>> common([5, 3, 2, 8], [3, 2])\n>     [2, 3]\n>     \"\"\"\n>     ret = set()\n>     for e1 in l1:\n>         for e2 in l2:\n>             if e1 == e2:\n>                 ret.add(e1)\n>     return sorted(list(ret))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}]}