{"problem_id": 28, "problem": "file_name_check", "method": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'", "tests": [{"test_id": "1005", "test": "def test():\n        assert file_name_check('s.') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n>         return 'No'\n\n\n\n\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n>         return 'No'\n!     if len(lst[0]) == 0:\n!         return 'No'\n!     if not lst[0][0].isalpha():\n!         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", "!", "!", "!", "!", "?", "!", "!", "?"]}, {"test_id": "1004", "test": "def test():\n        assert file_name_check('.txt') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n>         return 'No'\n\n\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n>         return 'No'\n!     if not lst[0][0].isalpha():\n!         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", ">", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", ">", "!", "!", "?", "!", "!", "?"]}, {"test_id": "999", "test": "def test():\n        assert file_name_check('1I563_Yes3.exe') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n\n>     if not lst[0][0].isalpha():\n>         return 'No'\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n!         return 'No'\n>     if not lst[0][0].isalpha():\n>         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", ">", ">", "?", "!", "!", "?"]}, {"test_id": "998", "test": "def test():\n        assert file_name_check('no_one#knows.dll') == 'Yes'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n\n>     if not lst[0][0].isalpha():\n\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n\n>     return 'Yes'", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n!         return 'No'\n>     if not lst[0][0].isalpha():\n!         return 'No'\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n!         return 'No'\n>     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", ">", "!", "?", ">", "!", "?"]}, {"test_id": "1003", "test": "def test():\n        assert file_name_check('_f4indsartal132.') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n>         return 'No'\n\n\n\n\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n>         return 'No'\n!     if len(lst[0]) == 0:\n!         return 'No'\n!     if not lst[0][0].isalpha():\n!         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", "!", "!", "!", "!", "?", "!", "!", "?"]}, {"test_id": "1002", "test": "def test():\n        assert file_name_check('final132') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n>         return 'No'\n\n\n\n\n\n\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n>         return 'No'\n!     if not lst[1] in suf:\n!         return 'No'\n!     if len(lst[0]) == 0:\n!         return 'No'\n!     if not lst[0][0].isalpha():\n!         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "!", "!", "!", "!", "?", "!", "!", "?"]}, {"test_id": "1000", "test": "def test():\n        assert file_name_check('I563_Yes3.txtt') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n>         return 'No'\n\n\n\n\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n>         return 'No'\n!     if len(lst[0]) == 0:\n!         return 'No'\n!     if not lst[0][0].isalpha():\n!         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", "!", "!", "!", "!", "?", "!", "!", "?"]}, {"test_id": "988", "test": "def test():\n        assert file_name_check('/this_is_valid.dll') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n\n>     if not lst[0][0].isalpha():\n>         return 'No'\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n!         return 'No'\n>     if not lst[0][0].isalpha():\n>         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", ">", ">", "?", "!", "!", "?"]}, {"test_id": "989", "test": "def test():\n        assert file_name_check('this_is_valid.wow') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n>         return 'No'\n\n\n\n\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n>         return 'No'\n!     if len(lst[0]) == 0:\n!         return 'No'\n!     if not lst[0][0].isalpha():\n!         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", "!", "!", "!", "!", "?", "!", "!", "?"]}, {"test_id": "1001", "test": "def test():\n        assert file_name_check('final..txt') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n>         return 'No'\n\n\n\n\n\n\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n>         return 'No'\n!     if not lst[1] in suf:\n!         return 'No'\n!     if len(lst[0]) == 0:\n!         return 'No'\n!     if not lst[0][0].isalpha():\n!         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "!", "!", "!", "!", "?", "!", "!", "?"]}, {"test_id": "997", "test": "def test():\n        assert file_name_check('Is3youfault.txt') == 'Yes'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n\n>     if not lst[0][0].isalpha():\n\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n\n>     return 'Yes'", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n!         return 'No'\n>     if not lst[0][0].isalpha():\n!         return 'No'\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n!         return 'No'\n>     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", ">", "!", "?", ">", "!", "?"]}, {"test_id": "980", "test": "def test():\n        assert file_name_check(\"example.txt\") == 'Yes'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n\n>     if not lst[0][0].isalpha():\n\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n\n>     return 'Yes'", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n!         return 'No'\n>     if not lst[0][0].isalpha():\n!         return 'No'\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n!         return 'No'\n>     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", ">", "!", "?", ">", "!", "?"]}, {"test_id": "981", "test": "def test():\n        assert file_name_check(\"1example.dll\") == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n\n>     if not lst[0][0].isalpha():\n>         return 'No'\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n!         return 'No'\n>     if not lst[0][0].isalpha():\n>         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", ">", ">", "?", "!", "!", "?"]}, {"test_id": "996", "test": "def test():\n        assert file_name_check('I563_No.exe') == 'Yes'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n\n>     if not lst[0][0].isalpha():\n\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n\n>     return 'Yes'", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n!         return 'No'\n>     if not lst[0][0].isalpha():\n!         return 'No'\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n!         return 'No'\n>     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", ">", "!", "?", ">", "!", "?"]}, {"test_id": "994", "test": "def test():\n        assert file_name_check('this_is_12valid.6exe4.txt') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n>         return 'No'\n\n\n\n\n\n\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n>         return 'No'\n!     if not lst[1] in suf:\n!         return 'No'\n!     if len(lst[0]) == 0:\n!         return 'No'\n!     if not lst[0][0].isalpha():\n!         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "!", "!", "!", "!", "?", "!", "!", "?"]}, {"test_id": "983", "test": "def test():\n        assert file_name_check('K.dll') == 'Yes'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n\n>     if not lst[0][0].isalpha():\n\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n\n>     return 'Yes'", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n!         return 'No'\n>     if not lst[0][0].isalpha():\n!         return 'No'\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n!         return 'No'\n>     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", ">", "!", "?", ">", "!", "?"]}, {"test_id": "982", "test": "def test():\n        assert file_name_check('s1sdf3.asd') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n>         return 'No'\n\n\n\n\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n>         return 'No'\n!     if len(lst[0]) == 0:\n!         return 'No'\n!     if not lst[0][0].isalpha():\n!         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", "!", "!", "!", "!", "?", "!", "!", "?"]}, {"test_id": "995", "test": "def test():\n        assert file_name_check('all.exe.txt') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n>         return 'No'\n\n\n\n\n\n\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n>         return 'No'\n!     if not lst[1] in suf:\n!         return 'No'\n!     if len(lst[0]) == 0:\n!         return 'No'\n!     if not lst[0][0].isalpha():\n!         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "!", "!", "!", "!", "?", "!", "!", "?"]}, {"test_id": "986", "test": "def test():\n        assert file_name_check('_Y.txt') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n\n>     if not lst[0][0].isalpha():\n>         return 'No'\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n!         return 'No'\n>     if not lst[0][0].isalpha():\n>         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", ">", ">", "?", "!", "!", "?"]}, {"test_id": "991", "test": "def test():\n        assert file_name_check('this_is_valid.txtexe') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n>         return 'No'\n\n\n\n\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n>         return 'No'\n!     if len(lst[0]) == 0:\n!         return 'No'\n!     if not lst[0][0].isalpha():\n!         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", "!", "!", "!", "!", "?", "!", "!", "?"]}, {"test_id": "990", "test": "def test():\n        assert file_name_check('this_is_valid.txt') == 'Yes'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n\n>     if not lst[0][0].isalpha():\n\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n\n>     return 'Yes'", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n!         return 'No'\n>     if not lst[0][0].isalpha():\n!         return 'No'\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n!         return 'No'\n>     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", ">", "!", "?", ">", "!", "?"]}, {"test_id": "987", "test": "def test():\n        assert file_name_check('?aREYA.exe') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n\n>     if not lst[0][0].isalpha():\n>         return 'No'\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n!         return 'No'\n>     if not lst[0][0].isalpha():\n>         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", ">", ">", "?", "!", "!", "?"]}, {"test_id": "985", "test": "def test():\n        assert file_name_check('His12FILE94.exe') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n\n>     if not lst[0][0].isalpha():\n\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n>         return 'No'\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n!         return 'No'\n>     if not lst[0][0].isalpha():\n!         return 'No'\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n>         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", ">", "!", "?", ">", ">", "?"]}, {"test_id": "992", "test": "def test():\n        assert file_name_check('#this2_i4s_5valid.ten') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n>         return 'No'\n\n\n\n\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n>         return 'No'\n!     if len(lst[0]) == 0:\n!         return 'No'\n!     if not lst[0][0].isalpha():\n!         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", "!", "!", "!", "!", "?", "!", "!", "?"]}, {"test_id": "993", "test": "def test():\n        assert file_name_check('@this1_is6_valid.exe') == 'No'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n\n>     if not lst[0][0].isalpha():\n>         return 'No'\n\n\n\n", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n!         return 'No'\n>     if not lst[0][0].isalpha():\n>         return 'No'\n!     t = len([x for x in lst[0] if x.isdigit()])\n!     if t > 3:\n!         return 'No'\n!     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", ">", ">", "?", "!", "!", "?"]}, {"test_id": "984", "test": "def test():\n        assert file_name_check('MY16FILE3.exe') == 'Yes'", "coverage_executed": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n\n>     if not lst[1] in suf:\n\n>     if len(lst[0]) == 0:\n\n>     if not lst[0][0].isalpha():\n\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n\n>     return 'Yes'", "coverage": "> def file_name_check(file_name):\n>     \"\"\"Create a function which takes a string representing a file's name, and returns\n>     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n>     A file's name is considered to be valid if and only if all the following conditions \n>     are met:\n>     - There should not be more than three digits ('0'-'9') in the file's name.\n>     - The file's name contains exactly one dot '.'\n>     - The substring before the dot should not be empty, and it starts with a letter from \n>     the latin alphapet ('a'-'z' and 'A'-'Z').\n>     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n>     Examples:\n>     file_name_check(\"example.txt\") # => 'Yes'\n>     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n>     \"\"\"\n>     suf = ['txt', 'exe', 'dll']\n>     lst = file_name.split(sep='.')\n>     if len(lst) != 2:\n!         return 'No'\n>     if not lst[1] in suf:\n!         return 'No'\n>     if len(lst[0]) == 0:\n!         return 'No'\n>     if not lst[0][0].isalpha():\n!         return 'No'\n>     t = len([x for x in lst[0] if x.isdigit()])\n>     if t > 3:\n!         return 'No'\n>     return 'Yes'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", ">", "!", "?", ">", "!", "?"]}]}