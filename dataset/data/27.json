{"problem_id": 27, "problem": "words_string", "method": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    s_list = []\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n    s_list = \"\".join(s_list)\n    return s_list.split()", "tests": [{"test_id": "639", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n\n\n\n\n\n\n\n\n\n", "coverage": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n!     if not s:\n!         return []\n!     s_list = []\n!     for letter in s:\n!         if letter == ',':\n!             s_list.append(' ')\n!         else:\n!             s_list.append(letter)\n!     s_list = \"\".join(s_list)\n!     return s_list.split()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "!", "!", "?", "!", "!", "!", "!", "!", "?", "?"]}, {"test_id": "638", "test": "def test():\n        assert words_string(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "coverage_executed": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n>     if not s:\n\n>     s_list = []\n>     for letter in s:\n>         if letter == ',':\n>             s_list.append(' ')\n>         else:\n>             s_list.append(letter)\n>     s_list = \"\".join(s_list)\n>     return s_list.split()", "coverage": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n>     if not s:\n!         return []\n>     s_list = []\n>     for letter in s:\n>         if letter == ',':\n>             s_list.append(' ')\n>         else:\n>             s_list.append(letter)\n>     s_list = \"\".join(s_list)\n>     return s_list.split()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", ">", ">", ">", "?", "?"]}, {"test_id": "634", "test": "def test():\n        assert True, \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n\n\n\n\n\n\n\n\n\n", "coverage": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n!     if not s:\n!         return []\n!     s_list = []\n!     for letter in s:\n!         if letter == ',':\n!             s_list.append(' ')\n!         else:\n!             s_list.append(letter)\n!     s_list = \"\".join(s_list)\n!     return s_list.split()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "!", "!", "?", "!", "!", "!", "!", "!", "?", "?"]}, {"test_id": "635", "test": "def test():\n        assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]", "coverage_executed": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n>     if not s:\n\n>     s_list = []\n>     for letter in s:\n>         if letter == ',':\n>             s_list.append(' ')\n>         else:\n>             s_list.append(letter)\n>     s_list = \"\".join(s_list)\n>     return s_list.split()", "coverage": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n>     if not s:\n!         return []\n>     s_list = []\n>     for letter in s:\n>         if letter == ',':\n>             s_list.append(' ')\n>         else:\n>             s_list.append(letter)\n>     s_list = \"\".join(s_list)\n>     return s_list.split()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", ">", ">", ">", "?", "?"]}, {"test_id": "637", "test": "def test():\n        assert words_string(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]", "coverage_executed": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n>     if not s:\n\n>     s_list = []\n>     for letter in s:\n>         if letter == ',':\n>             s_list.append(' ')\n>         else:\n>             s_list.append(letter)\n>     s_list = \"\".join(s_list)\n>     return s_list.split()", "coverage": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n>     if not s:\n!         return []\n>     s_list = []\n>     for letter in s:\n>         if letter == ',':\n>             s_list.append(' ')\n>         else:\n>             s_list.append(letter)\n>     s_list = \"\".join(s_list)\n>     return s_list.split()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", ">", ">", ">", "?", "?"]}, {"test_id": "636", "test": "def test():\n        assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "coverage_executed": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n>     if not s:\n\n>     s_list = []\n>     for letter in s:\n>         if letter == ',':\n>             s_list.append(' ')\n>         else:\n>             s_list.append(letter)\n>     s_list = \"\".join(s_list)\n>     return s_list.split()", "coverage": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n>     if not s:\n!         return []\n>     s_list = []\n>     for letter in s:\n>         if letter == ',':\n>             s_list.append(' ')\n>         else:\n>             s_list.append(letter)\n>     s_list = \"\".join(s_list)\n>     return s_list.split()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", ">", ">", ">", "?", "?"]}, {"test_id": "641", "test": "def test():\n        assert words_string(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]", "coverage_executed": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n>     if not s:\n\n>     s_list = []\n>     for letter in s:\n>         if letter == ',':\n>             s_list.append(' ')\n>         else:\n>             s_list.append(letter)\n>     s_list = \"\".join(s_list)\n>     return s_list.split()", "coverage": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n>     if not s:\n!         return []\n>     s_list = []\n>     for letter in s:\n>         if letter == ',':\n>             s_list.append(' ')\n>         else:\n>             s_list.append(letter)\n>     s_list = \"\".join(s_list)\n>     return s_list.split()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", ">", ">", ">", "?", "?"]}, {"test_id": "640", "test": "def test():\n        assert words_string(\"\") == []", "coverage_executed": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n>     if not s:\n>         return []\n\n\n\n\n\n\n\n", "coverage": "> def words_string(s):\n>     \"\"\"\n>     You will be given a string of words separated by commas or spaces. Your task is\n>     to split the string into words and return an array of the words.\n>     For example:\n>     words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>     \"\"\"\n>     if not s:\n>         return []\n!     s_list = []\n!     for letter in s:\n!         if letter == ',':\n!             s_list.append(' ')\n!         else:\n!             s_list.append(letter)\n!     s_list = \"\".join(s_list)\n!     return s_list.split()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?", "!", "!", "!", "!", "!", "?", "?"]}]}