{"problem_id": 41, "problem": "solve", "method": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(sum(int(i) for i in str(N)))[2:]", "tests": [{"test_id": "510", "test": "def test():\n        assert solve(150) == \"110\", \"Error\"", "coverage_executed": "> def solve(N):\n>     \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n>     Example\n>         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n>         For N = 150, the sum of digits will be 6 the output should be \"110\".\n>         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n>     Variables:\n>         @N integer\n>              Constraints: 0 \u2264 N \u2264 10000.\n>     Output:\n>          a string of binary number\n>     \"\"\"\n>     return bin(sum(int(i) for i in str(N)))[2:]", "coverage": "> def solve(N):\n>     \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n>     Example\n>         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n>         For N = 150, the sum of digits will be 6 the output should be \"110\".\n>         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n>     Variables:\n>         @N integer\n>              Constraints: 0 \u2264 N \u2264 10000.\n>     Output:\n>          a string of binary number\n>     \"\"\"\n>     return bin(sum(int(i) for i in str(N)))[2:]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "511", "test": "def test():\n        assert solve(147) == \"1100\", \"Error\"", "coverage_executed": "> def solve(N):\n>     \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n>     Example\n>         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n>         For N = 150, the sum of digits will be 6 the output should be \"110\".\n>         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n>     Variables:\n>         @N integer\n>              Constraints: 0 \u2264 N \u2264 10000.\n>     Output:\n>          a string of binary number\n>     \"\"\"\n>     return bin(sum(int(i) for i in str(N)))[2:]", "coverage": "> def solve(N):\n>     \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n>     Example\n>         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n>         For N = 150, the sum of digits will be 6 the output should be \"110\".\n>         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n>     Variables:\n>         @N integer\n>              Constraints: 0 \u2264 N \u2264 10000.\n>     Output:\n>          a string of binary number\n>     \"\"\"\n>     return bin(sum(int(i) for i in str(N)))[2:]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "513", "test": "def test():\n        assert solve(333) == \"1001\", \"Error\"", "coverage_executed": "> def solve(N):\n>     \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n>     Example\n>         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n>         For N = 150, the sum of digits will be 6 the output should be \"110\".\n>         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n>     Variables:\n>         @N integer\n>              Constraints: 0 \u2264 N \u2264 10000.\n>     Output:\n>          a string of binary number\n>     \"\"\"\n>     return bin(sum(int(i) for i in str(N)))[2:]", "coverage": "> def solve(N):\n>     \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n>     Example\n>         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n>         For N = 150, the sum of digits will be 6 the output should be \"110\".\n>         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n>     Variables:\n>         @N integer\n>              Constraints: 0 \u2264 N \u2264 10000.\n>     Output:\n>          a string of binary number\n>     \"\"\"\n>     return bin(sum(int(i) for i in str(N)))[2:]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "512", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def solve(N):\n>     \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n>     Example\n>         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n>         For N = 150, the sum of digits will be 6 the output should be \"110\".\n>         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n>     Variables:\n>         @N integer\n>              Constraints: 0 \u2264 N \u2264 10000.\n>     Output:\n>          a string of binary number\n>     \"\"\"\n", "coverage": "> def solve(N):\n>     \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n>     Example\n>         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n>         For N = 150, the sum of digits will be 6 the output should be \"110\".\n>         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n>     Variables:\n>         @N integer\n>              Constraints: 0 \u2264 N \u2264 10000.\n>     Output:\n>          a string of binary number\n>     \"\"\"\n!     return bin(sum(int(i) for i in str(N)))[2:]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "514", "test": "def test():\n        assert solve(963) == \"10010\", \"Error\"", "coverage_executed": "> def solve(N):\n>     \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n>     Example\n>         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n>         For N = 150, the sum of digits will be 6 the output should be \"110\".\n>         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n>     Variables:\n>         @N integer\n>              Constraints: 0 \u2264 N \u2264 10000.\n>     Output:\n>          a string of binary number\n>     \"\"\"\n>     return bin(sum(int(i) for i in str(N)))[2:]", "coverage": "> def solve(N):\n>     \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n>     Example\n>         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n>         For N = 150, the sum of digits will be 6 the output should be \"110\".\n>         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n>     Variables:\n>         @N integer\n>              Constraints: 0 \u2264 N \u2264 10000.\n>     Output:\n>          a string of binary number\n>     \"\"\"\n>     return bin(sum(int(i) for i in str(N)))[2:]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "509", "test": "def test():\n        assert solve(1000) == \"1\", \"Error\"", "coverage_executed": "> def solve(N):\n>     \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n>     Example\n>         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n>         For N = 150, the sum of digits will be 6 the output should be \"110\".\n>         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n>     Variables:\n>         @N integer\n>              Constraints: 0 \u2264 N \u2264 10000.\n>     Output:\n>          a string of binary number\n>     \"\"\"\n>     return bin(sum(int(i) for i in str(N)))[2:]", "coverage": "> def solve(N):\n>     \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n>     Example\n>         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n>         For N = 150, the sum of digits will be 6 the output should be \"110\".\n>         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n>     Variables:\n>         @N integer\n>              Constraints: 0 \u2264 N \u2264 10000.\n>     Output:\n>          a string of binary number\n>     \"\"\"\n>     return bin(sum(int(i) for i in str(N)))[2:]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "508", "test": "def test():\n        assert True, \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def solve(N):\n>     \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n>     Example\n>         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n>         For N = 150, the sum of digits will be 6 the output should be \"110\".\n>         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n>     Variables:\n>         @N integer\n>              Constraints: 0 \u2264 N \u2264 10000.\n>     Output:\n>          a string of binary number\n>     \"\"\"\n", "coverage": "> def solve(N):\n>     \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n>     Example\n>         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n>         For N = 150, the sum of digits will be 6 the output should be \"110\".\n>         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n>     Variables:\n>         @N integer\n>              Constraints: 0 \u2264 N \u2264 10000.\n>     Output:\n>          a string of binary number\n>     \"\"\"\n!     return bin(sum(int(i) for i in str(N)))[2:]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}