{"problem_id": 158, "problem": "max_element", "method": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m", "tests": [{"test_id": "148", "test": "def test():\n        assert max_element([1, 2, 3]) == 3", "coverage_executed": "> def max_element(l: list):\n>     \"\"\"Return maximum element in the list.\n>     >>> max_element([1, 2, 3])\n>     3\n>     >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n>     123\n>     \"\"\"\n>     m = l[0]\n>     for e in l:\n>         if e > m:\n>             m = e\n>     return m", "coverage": "> def max_element(l: list):\n>     \"\"\"Return maximum element in the list.\n>     >>> max_element([1, 2, 3])\n>     3\n>     >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n>     123\n>     \"\"\"\n>     m = l[0]\n>     for e in l:\n>         if e > m:\n>             m = e\n>     return m", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "149", "test": "def test():\n        assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124", "coverage_executed": "> def max_element(l: list):\n>     \"\"\"Return maximum element in the list.\n>     >>> max_element([1, 2, 3])\n>     3\n>     >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n>     123\n>     \"\"\"\n>     m = l[0]\n>     for e in l:\n>         if e > m:\n>             m = e\n>     return m", "coverage": "> def max_element(l: list):\n>     \"\"\"Return maximum element in the list.\n>     >>> max_element([1, 2, 3])\n>     3\n>     >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n>     123\n>     \"\"\"\n>     m = l[0]\n>     for e in l:\n>         if e > m:\n>             m = e\n>     return m", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}]}