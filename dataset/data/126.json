{"problem_id": 126, "problem": "histogram", "method": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                dict1[i]=t\n    return dict1", "tests": [{"test_id": "708", "test": "def test():\n        assert histogram('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"", "coverage_executed": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n>             t=list1.count(i)\n>     if t>0:\n>         for i in list1:\n>             if(list1.count(i)==t):\n>                 dict1[i]=t\n>     return dict1", "coverage": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n>             t=list1.count(i)\n>     if t>0:\n>         for i in list1:\n>             if(list1.count(i)==t):\n>                 dict1[i]=t\n>     return dict1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "709", "test": "def test():\n        assert histogram('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"", "coverage_executed": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n>             t=list1.count(i)\n>     if t>0:\n>         for i in list1:\n>             if(list1.count(i)==t):\n>                 dict1[i]=t\n>     return dict1", "coverage": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n>             t=list1.count(i)\n>     if t>0:\n>         for i in list1:\n>             if(list1.count(i)==t):\n>                 dict1[i]=t\n>     return dict1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "714", "test": "def test():\n        assert histogram('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"", "coverage_executed": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n>             t=list1.count(i)\n>     if t>0:\n>         for i in list1:\n>             if(list1.count(i)==t):\n>                 dict1[i]=t\n>     return dict1", "coverage": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n>             t=list1.count(i)\n>     if t>0:\n>         for i in list1:\n>             if(list1.count(i)==t):\n>                 dict1[i]=t\n>     return dict1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "711", "test": "def test():\n        assert histogram('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"", "coverage_executed": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n>             t=list1.count(i)\n>     if t>0:\n>         for i in list1:\n>             if(list1.count(i)==t):\n>                 dict1[i]=t\n>     return dict1", "coverage": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n>             t=list1.count(i)\n>     if t>0:\n>         for i in list1:\n>             if(list1.count(i)==t):\n>                 dict1[i]=t\n>     return dict1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "710", "test": "def test():\n        assert histogram('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"", "coverage_executed": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n>             t=list1.count(i)\n>     if t>0:\n>         for i in list1:\n>             if(list1.count(i)==t):\n>                 dict1[i]=t\n>     return dict1", "coverage": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n>             t=list1.count(i)\n>     if t>0:\n>         for i in list1:\n>             if(list1.count(i)==t):\n>                 dict1[i]=t\n>     return dict1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "707", "test": "def test():\n        assert histogram('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n>             t=list1.count(i)\n>     if t>0:\n>         for i in list1:\n>             if(list1.count(i)==t):\n>                 dict1[i]=t\n>     return dict1", "coverage": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n>             t=list1.count(i)\n>     if t>0:\n>         for i in list1:\n>             if(list1.count(i)==t):\n>                 dict1[i]=t\n>     return dict1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "712", "test": "def test():\n        assert histogram('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"", "coverage_executed": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n>             t=list1.count(i)\n>     if t>0:\n>         for i in list1:\n>             if(list1.count(i)==t):\n>                 dict1[i]=t\n>     return dict1", "coverage": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n>             t=list1.count(i)\n>     if t>0:\n>         for i in list1:\n>             if(list1.count(i)==t):\n>                 dict1[i]=t\n>     return dict1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "713", "test": "def test():\n        assert histogram('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"", "coverage_executed": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n\n>     if t>0:\n\n\n\n>     return dict1", "coverage": "> def histogram(test):\n>     \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n>     of the letter with the most repetition and containing the corresponding count.\n>     If several letters have the same occurrence, return all of them.\n>     Example:\n>     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n>     histogram('a b b a') == {'a': 2, 'b': 2}\n>     histogram('a b c a b') == {'a': 2, 'b': 2}\n>     histogram('b b b b a') == {'b': 4}\n>     histogram('') == {}\n>     \"\"\"\n>     dict1={}\n>     list1=test.split(\" \")\n>     t=0\n>     for i in list1:\n>         if(list1.count(i)>t) and i!='':\n!             t=list1.count(i)\n>     if t>0:\n!         for i in list1:\n!             if(list1.count(i)==t):\n!                 dict1[i]=t\n>     return dict1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", ">", "!", "!", "!", "?"]}]}