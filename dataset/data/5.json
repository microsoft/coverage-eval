{"problem_id": 5, "problem": "circular_shift", "method": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]", "tests": [{"test_id": "333", "test": "def test():\n        assert circular_shift(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def circular_shift(x, shift):\n>     \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n>     and return the result as a string.\n>     If shift > number of digits, return digits reversed.\n>     >>> circular_shift(12, 1)\n>     \"21\"\n>     >>> circular_shift(12, 2)\n>     \"12\"\n>     \"\"\"\n>     s = str(x)\n>     if shift > len(s):\n>         return s[::-1]\n\n", "coverage": "> def circular_shift(x, shift):\n>     \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n>     and return the result as a string.\n>     If shift > number of digits, return digits reversed.\n>     >>> circular_shift(12, 1)\n>     \"21\"\n>     >>> circular_shift(12, 2)\n>     \"12\"\n>     \"\"\"\n>     s = str(x)\n>     if shift > len(s):\n>         return s[::-1]\n!     else:\n!         return s[len(s) - shift:] + s[:len(s) - shift]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!"]}, {"test_id": "332", "test": "def test():\n        assert circular_shift(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def circular_shift(x, shift):\n>     \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n>     and return the result as a string.\n>     If shift > number of digits, return digits reversed.\n>     >>> circular_shift(12, 1)\n>     \"21\"\n>     >>> circular_shift(12, 2)\n>     \"12\"\n>     \"\"\"\n>     s = str(x)\n>     if shift > len(s):\n\n>     else:\n>         return s[len(s) - shift:] + s[:len(s) - shift]", "coverage": "> def circular_shift(x, shift):\n>     \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n>     and return the result as a string.\n>     If shift > number of digits, return digits reversed.\n>     >>> circular_shift(12, 1)\n>     \"21\"\n>     >>> circular_shift(12, 2)\n>     \"12\"\n>     \"\"\"\n>     s = str(x)\n>     if shift > len(s):\n!         return s[::-1]\n>     else:\n>         return s[len(s) - shift:] + s[:len(s) - shift]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">"]}, {"test_id": "330", "test": "def test():\n        assert circular_shift(12, 2) == \"12\"", "coverage_executed": "> def circular_shift(x, shift):\n>     \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n>     and return the result as a string.\n>     If shift > number of digits, return digits reversed.\n>     >>> circular_shift(12, 1)\n>     \"21\"\n>     >>> circular_shift(12, 2)\n>     \"12\"\n>     \"\"\"\n>     s = str(x)\n>     if shift > len(s):\n\n>     else:\n>         return s[len(s) - shift:] + s[:len(s) - shift]", "coverage": "> def circular_shift(x, shift):\n>     \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n>     and return the result as a string.\n>     If shift > number of digits, return digits reversed.\n>     >>> circular_shift(12, 1)\n>     \"21\"\n>     >>> circular_shift(12, 2)\n>     \"12\"\n>     \"\"\"\n>     s = str(x)\n>     if shift > len(s):\n!         return s[::-1]\n>     else:\n>         return s[len(s) - shift:] + s[:len(s) - shift]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">"]}, {"test_id": "331", "test": "def test():\n        assert circular_shift(97, 8) == \"79\"", "coverage_executed": "> def circular_shift(x, shift):\n>     \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n>     and return the result as a string.\n>     If shift > number of digits, return digits reversed.\n>     >>> circular_shift(12, 1)\n>     \"21\"\n>     >>> circular_shift(12, 2)\n>     \"12\"\n>     \"\"\"\n>     s = str(x)\n>     if shift > len(s):\n>         return s[::-1]\n\n", "coverage": "> def circular_shift(x, shift):\n>     \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n>     and return the result as a string.\n>     If shift > number of digits, return digits reversed.\n>     >>> circular_shift(12, 1)\n>     \"21\"\n>     >>> circular_shift(12, 2)\n>     \"12\"\n>     \"\"\"\n>     s = str(x)\n>     if shift > len(s):\n>         return s[::-1]\n!     else:\n!         return s[len(s) - shift:] + s[:len(s) - shift]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!"]}, {"test_id": "329", "test": "def test():\n        assert circular_shift(100, 2) == \"001\"", "coverage_executed": "> def circular_shift(x, shift):\n>     \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n>     and return the result as a string.\n>     If shift > number of digits, return digits reversed.\n>     >>> circular_shift(12, 1)\n>     \"21\"\n>     >>> circular_shift(12, 2)\n>     \"12\"\n>     \"\"\"\n>     s = str(x)\n>     if shift > len(s):\n\n>     else:\n>         return s[len(s) - shift:] + s[:len(s) - shift]", "coverage": "> def circular_shift(x, shift):\n>     \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n>     and return the result as a string.\n>     If shift > number of digits, return digits reversed.\n>     >>> circular_shift(12, 1)\n>     \"21\"\n>     >>> circular_shift(12, 2)\n>     \"12\"\n>     \"\"\"\n>     s = str(x)\n>     if shift > len(s):\n!         return s[::-1]\n>     else:\n>         return s[len(s) - shift:] + s[:len(s) - shift]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">"]}]}