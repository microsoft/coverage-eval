{"problem_id": 160, "problem": "hex_key", "method": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total", "tests": [{"test_id": "464", "test": "def test():\n        assert hex_key([]) == 0", "coverage_executed": "> def hex_key(num):\n>     \"\"\"You have been tasked to write a function that receives \n>     a hexadecimal number as a string and counts the number of hexadecimal \n>     digits that are primes (prime number, or a prime, is a natural number \n>     greater than 1 that is not a product of two smaller natural numbers).\n>     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n>     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n>     So you have to determine a number of the following digits: 2, 3, 5, 7, \n>     B (=decimal 11), D (=decimal 13).\n>     Note: you may assume the input is always correct or empty string, \n>     and symbols A,B,C,D,E,F are always uppercase.\n>     Examples:\n>     For num = \"AB\" the output should be 1.\n>     For num = \"1077E\" the output should be 2.\n>     For num = \"ABED1A33\" the output should be 4.\n>     For num = \"123456789ABCDEF0\" the output should be 6.\n>     For num = \"2020\" the output should be 2.\n>     \"\"\"\n>     primes = ('2', '3', '5', '7', 'B', 'D')\n>     total = 0\n>     for i in range(0, len(num)):\n\n\n>     return total", "coverage": "> def hex_key(num):\n>     \"\"\"You have been tasked to write a function that receives \n>     a hexadecimal number as a string and counts the number of hexadecimal \n>     digits that are primes (prime number, or a prime, is a natural number \n>     greater than 1 that is not a product of two smaller natural numbers).\n>     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n>     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n>     So you have to determine a number of the following digits: 2, 3, 5, 7, \n>     B (=decimal 11), D (=decimal 13).\n>     Note: you may assume the input is always correct or empty string, \n>     and symbols A,B,C,D,E,F are always uppercase.\n>     Examples:\n>     For num = \"AB\" the output should be 1.\n>     For num = \"1077E\" the output should be 2.\n>     For num = \"ABED1A33\" the output should be 4.\n>     For num = \"123456789ABCDEF0\" the output should be 6.\n>     For num = \"2020\" the output should be 2.\n>     \"\"\"\n>     primes = ('2', '3', '5', '7', 'B', 'D')\n>     total = 0\n>     for i in range(0, len(num)):\n!         if num[i] in primes:\n!             total += 1\n>     return total", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "!", "?"]}, {"test_id": "458", "test": "def test():\n        assert hex_key(\"AB\") == 1, \"First test error: \" + str(hex_key(\"AB\"))", "coverage_executed": "> def hex_key(num):\n>     \"\"\"You have been tasked to write a function that receives \n>     a hexadecimal number as a string and counts the number of hexadecimal \n>     digits that are primes (prime number, or a prime, is a natural number \n>     greater than 1 that is not a product of two smaller natural numbers).\n>     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n>     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n>     So you have to determine a number of the following digits: 2, 3, 5, 7, \n>     B (=decimal 11), D (=decimal 13).\n>     Note: you may assume the input is always correct or empty string, \n>     and symbols A,B,C,D,E,F are always uppercase.\n>     Examples:\n>     For num = \"AB\" the output should be 1.\n>     For num = \"1077E\" the output should be 2.\n>     For num = \"ABED1A33\" the output should be 4.\n>     For num = \"123456789ABCDEF0\" the output should be 6.\n>     For num = \"2020\" the output should be 2.\n>     \"\"\"\n>     primes = ('2', '3', '5', '7', 'B', 'D')\n>     total = 0\n>     for i in range(0, len(num)):\n>         if num[i] in primes:\n>             total += 1\n>     return total", "coverage": "> def hex_key(num):\n>     \"\"\"You have been tasked to write a function that receives \n>     a hexadecimal number as a string and counts the number of hexadecimal \n>     digits that are primes (prime number, or a prime, is a natural number \n>     greater than 1 that is not a product of two smaller natural numbers).\n>     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n>     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n>     So you have to determine a number of the following digits: 2, 3, 5, 7, \n>     B (=decimal 11), D (=decimal 13).\n>     Note: you may assume the input is always correct or empty string, \n>     and symbols A,B,C,D,E,F are always uppercase.\n>     Examples:\n>     For num = \"AB\" the output should be 1.\n>     For num = \"1077E\" the output should be 2.\n>     For num = \"ABED1A33\" the output should be 4.\n>     For num = \"123456789ABCDEF0\" the output should be 6.\n>     For num = \"2020\" the output should be 2.\n>     \"\"\"\n>     primes = ('2', '3', '5', '7', 'B', 'D')\n>     total = 0\n>     for i in range(0, len(num)):\n>         if num[i] in primes:\n>             total += 1\n>     return total", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "460", "test": "def test():\n        assert hex_key(\"ABED1A33\") == 4, \"Third test error: \" + str(hex_key(\"ABED1A33\"))", "coverage_executed": "> def hex_key(num):\n>     \"\"\"You have been tasked to write a function that receives \n>     a hexadecimal number as a string and counts the number of hexadecimal \n>     digits that are primes (prime number, or a prime, is a natural number \n>     greater than 1 that is not a product of two smaller natural numbers).\n>     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n>     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n>     So you have to determine a number of the following digits: 2, 3, 5, 7, \n>     B (=decimal 11), D (=decimal 13).\n>     Note: you may assume the input is always correct or empty string, \n>     and symbols A,B,C,D,E,F are always uppercase.\n>     Examples:\n>     For num = \"AB\" the output should be 1.\n>     For num = \"1077E\" the output should be 2.\n>     For num = \"ABED1A33\" the output should be 4.\n>     For num = \"123456789ABCDEF0\" the output should be 6.\n>     For num = \"2020\" the output should be 2.\n>     \"\"\"\n>     primes = ('2', '3', '5', '7', 'B', 'D')\n>     total = 0\n>     for i in range(0, len(num)):\n>         if num[i] in primes:\n>             total += 1\n>     return total", "coverage": "> def hex_key(num):\n>     \"\"\"You have been tasked to write a function that receives \n>     a hexadecimal number as a string and counts the number of hexadecimal \n>     digits that are primes (prime number, or a prime, is a natural number \n>     greater than 1 that is not a product of two smaller natural numbers).\n>     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n>     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n>     So you have to determine a number of the following digits: 2, 3, 5, 7, \n>     B (=decimal 11), D (=decimal 13).\n>     Note: you may assume the input is always correct or empty string, \n>     and symbols A,B,C,D,E,F are always uppercase.\n>     Examples:\n>     For num = \"AB\" the output should be 1.\n>     For num = \"1077E\" the output should be 2.\n>     For num = \"ABED1A33\" the output should be 4.\n>     For num = \"123456789ABCDEF0\" the output should be 6.\n>     For num = \"2020\" the output should be 2.\n>     \"\"\"\n>     primes = ('2', '3', '5', '7', 'B', 'D')\n>     total = 0\n>     for i in range(0, len(num)):\n>         if num[i] in primes:\n>             total += 1\n>     return total", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "461", "test": "def test():\n        assert hex_key(\"2020\") == 2, \"Fourth test error: \" + str(hex_key(\"2020\"))", "coverage_executed": "> def hex_key(num):\n>     \"\"\"You have been tasked to write a function that receives \n>     a hexadecimal number as a string and counts the number of hexadecimal \n>     digits that are primes (prime number, or a prime, is a natural number \n>     greater than 1 that is not a product of two smaller natural numbers).\n>     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n>     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n>     So you have to determine a number of the following digits: 2, 3, 5, 7, \n>     B (=decimal 11), D (=decimal 13).\n>     Note: you may assume the input is always correct or empty string, \n>     and symbols A,B,C,D,E,F are always uppercase.\n>     Examples:\n>     For num = \"AB\" the output should be 1.\n>     For num = \"1077E\" the output should be 2.\n>     For num = \"ABED1A33\" the output should be 4.\n>     For num = \"123456789ABCDEF0\" the output should be 6.\n>     For num = \"2020\" the output should be 2.\n>     \"\"\"\n>     primes = ('2', '3', '5', '7', 'B', 'D')\n>     total = 0\n>     for i in range(0, len(num)):\n>         if num[i] in primes:\n>             total += 1\n>     return total", "coverage": "> def hex_key(num):\n>     \"\"\"You have been tasked to write a function that receives \n>     a hexadecimal number as a string and counts the number of hexadecimal \n>     digits that are primes (prime number, or a prime, is a natural number \n>     greater than 1 that is not a product of two smaller natural numbers).\n>     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n>     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n>     So you have to determine a number of the following digits: 2, 3, 5, 7, \n>     B (=decimal 11), D (=decimal 13).\n>     Note: you may assume the input is always correct or empty string, \n>     and symbols A,B,C,D,E,F are always uppercase.\n>     Examples:\n>     For num = \"AB\" the output should be 1.\n>     For num = \"1077E\" the output should be 2.\n>     For num = \"ABED1A33\" the output should be 4.\n>     For num = \"123456789ABCDEF0\" the output should be 6.\n>     For num = \"2020\" the output should be 2.\n>     \"\"\"\n>     primes = ('2', '3', '5', '7', 'B', 'D')\n>     total = 0\n>     for i in range(0, len(num)):\n>         if num[i] in primes:\n>             total += 1\n>     return total", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "459", "test": "def test():\n        assert hex_key(\"1077E\") == 2, \"Second test error: \" + str(hex_key(\"1077E\"))", "coverage_executed": "> def hex_key(num):\n>     \"\"\"You have been tasked to write a function that receives \n>     a hexadecimal number as a string and counts the number of hexadecimal \n>     digits that are primes (prime number, or a prime, is a natural number \n>     greater than 1 that is not a product of two smaller natural numbers).\n>     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n>     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n>     So you have to determine a number of the following digits: 2, 3, 5, 7, \n>     B (=decimal 11), D (=decimal 13).\n>     Note: you may assume the input is always correct or empty string, \n>     and symbols A,B,C,D,E,F are always uppercase.\n>     Examples:\n>     For num = \"AB\" the output should be 1.\n>     For num = \"1077E\" the output should be 2.\n>     For num = \"ABED1A33\" the output should be 4.\n>     For num = \"123456789ABCDEF0\" the output should be 6.\n>     For num = \"2020\" the output should be 2.\n>     \"\"\"\n>     primes = ('2', '3', '5', '7', 'B', 'D')\n>     total = 0\n>     for i in range(0, len(num)):\n>         if num[i] in primes:\n>             total += 1\n>     return total", "coverage": "> def hex_key(num):\n>     \"\"\"You have been tasked to write a function that receives \n>     a hexadecimal number as a string and counts the number of hexadecimal \n>     digits that are primes (prime number, or a prime, is a natural number \n>     greater than 1 that is not a product of two smaller natural numbers).\n>     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n>     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n>     So you have to determine a number of the following digits: 2, 3, 5, 7, \n>     B (=decimal 11), D (=decimal 13).\n>     Note: you may assume the input is always correct or empty string, \n>     and symbols A,B,C,D,E,F are always uppercase.\n>     Examples:\n>     For num = \"AB\" the output should be 1.\n>     For num = \"1077E\" the output should be 2.\n>     For num = \"ABED1A33\" the output should be 4.\n>     For num = \"123456789ABCDEF0\" the output should be 6.\n>     For num = \"2020\" the output should be 2.\n>     \"\"\"\n>     primes = ('2', '3', '5', '7', 'B', 'D')\n>     total = 0\n>     for i in range(0, len(num)):\n>         if num[i] in primes:\n>             total += 1\n>     return total", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "463", "test": "def test():\n        assert hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(hex_key(\"112233445566778899AABBCCDDEEFF00\"))", "coverage_executed": "> def hex_key(num):\n>     \"\"\"You have been tasked to write a function that receives \n>     a hexadecimal number as a string and counts the number of hexadecimal \n>     digits that are primes (prime number, or a prime, is a natural number \n>     greater than 1 that is not a product of two smaller natural numbers).\n>     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n>     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n>     So you have to determine a number of the following digits: 2, 3, 5, 7, \n>     B (=decimal 11), D (=decimal 13).\n>     Note: you may assume the input is always correct or empty string, \n>     and symbols A,B,C,D,E,F are always uppercase.\n>     Examples:\n>     For num = \"AB\" the output should be 1.\n>     For num = \"1077E\" the output should be 2.\n>     For num = \"ABED1A33\" the output should be 4.\n>     For num = \"123456789ABCDEF0\" the output should be 6.\n>     For num = \"2020\" the output should be 2.\n>     \"\"\"\n>     primes = ('2', '3', '5', '7', 'B', 'D')\n>     total = 0\n>     for i in range(0, len(num)):\n>         if num[i] in primes:\n>             total += 1\n>     return total", "coverage": "> def hex_key(num):\n>     \"\"\"You have been tasked to write a function that receives \n>     a hexadecimal number as a string and counts the number of hexadecimal \n>     digits that are primes (prime number, or a prime, is a natural number \n>     greater than 1 that is not a product of two smaller natural numbers).\n>     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n>     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n>     So you have to determine a number of the following digits: 2, 3, 5, 7, \n>     B (=decimal 11), D (=decimal 13).\n>     Note: you may assume the input is always correct or empty string, \n>     and symbols A,B,C,D,E,F are always uppercase.\n>     Examples:\n>     For num = \"AB\" the output should be 1.\n>     For num = \"1077E\" the output should be 2.\n>     For num = \"ABED1A33\" the output should be 4.\n>     For num = \"123456789ABCDEF0\" the output should be 6.\n>     For num = \"2020\" the output should be 2.\n>     \"\"\"\n>     primes = ('2', '3', '5', '7', 'B', 'D')\n>     total = 0\n>     for i in range(0, len(num)):\n>         if num[i] in primes:\n>             total += 1\n>     return total", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "462", "test": "def test():\n        assert hex_key(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(hex_key(\"123456789ABCDEF0\"))", "coverage_executed": "> def hex_key(num):\n>     \"\"\"You have been tasked to write a function that receives \n>     a hexadecimal number as a string and counts the number of hexadecimal \n>     digits that are primes (prime number, or a prime, is a natural number \n>     greater than 1 that is not a product of two smaller natural numbers).\n>     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n>     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n>     So you have to determine a number of the following digits: 2, 3, 5, 7, \n>     B (=decimal 11), D (=decimal 13).\n>     Note: you may assume the input is always correct or empty string, \n>     and symbols A,B,C,D,E,F are always uppercase.\n>     Examples:\n>     For num = \"AB\" the output should be 1.\n>     For num = \"1077E\" the output should be 2.\n>     For num = \"ABED1A33\" the output should be 4.\n>     For num = \"123456789ABCDEF0\" the output should be 6.\n>     For num = \"2020\" the output should be 2.\n>     \"\"\"\n>     primes = ('2', '3', '5', '7', 'B', 'D')\n>     total = 0\n>     for i in range(0, len(num)):\n>         if num[i] in primes:\n>             total += 1\n>     return total", "coverage": "> def hex_key(num):\n>     \"\"\"You have been tasked to write a function that receives \n>     a hexadecimal number as a string and counts the number of hexadecimal \n>     digits that are primes (prime number, or a prime, is a natural number \n>     greater than 1 that is not a product of two smaller natural numbers).\n>     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n>     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n>     So you have to determine a number of the following digits: 2, 3, 5, 7, \n>     B (=decimal 11), D (=decimal 13).\n>     Note: you may assume the input is always correct or empty string, \n>     and symbols A,B,C,D,E,F are always uppercase.\n>     Examples:\n>     For num = \"AB\" the output should be 1.\n>     For num = \"1077E\" the output should be 2.\n>     For num = \"ABED1A33\" the output should be 4.\n>     For num = \"123456789ABCDEF0\" the output should be 6.\n>     For num = \"2020\" the output should be 2.\n>     \"\"\"\n>     primes = ('2', '3', '5', '7', 'B', 'D')\n>     total = 0\n>     for i in range(0, len(num)):\n>         if num[i] in primes:\n>             total += 1\n>     return total", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}]}