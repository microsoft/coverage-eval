{"problem_id": 68, "problem": "multiply", "method": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return abs(a % 10) * abs(b % 10)", "tests": [{"test_id": "614", "test": "def test():\n        assert multiply(0, 0) == 0, \"2nd edge test error: \" + str(multiply(0, 0))", "coverage_executed": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "611", "test": "def test():\n        assert multiply(76, 67) == 42, \"Fifth test error: \" + str(multiply(76, 67))", "coverage_executed": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "610", "test": "def test():\n        assert multiply(14,-15) == 20, \"Fourth test error: \" + str(multiply(14,-15))", "coverage_executed": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "607", "test": "def test():\n        assert multiply(148, 412) == 16, \"First test error: \" + str(multiply(148, 412))", "coverage_executed": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "612", "test": "def test():\n        assert multiply(17, 27) == 49, \"Sixth test error: \" + str(multiply(17, 27))", "coverage_executed": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "613", "test": "def test():\n        assert multiply(0, 1) == 0, \"1st edge test error: \" + str(multiply(0, 1))", "coverage_executed": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "608", "test": "def test():\n        assert multiply(19, 28) == 72, \"Second test error: \" + str(multiply(19, 28))", "coverage_executed": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "609", "test": "def test():\n        assert multiply(2020, 1851) == 0, \"Third test error: \" + str(multiply(2020, 1851))", "coverage_executed": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage": "> def multiply(a, b):\n>     \"\"\"Complete the function that takes two integers and returns \n>     the product of their unit digits.\n>     Assume the input is always valid.\n>     Examples:\n>     multiply(148, 412) should return 16.\n>     multiply(19, 28) should return 72.\n>     multiply(2020, 1851) should return 0.\n>     multiply(14,-15) should return 20.\n>     \"\"\"\n>     return abs(a % 10) * abs(b % 10)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}