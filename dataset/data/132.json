{"problem_id": 132, "problem": "encode", "method": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])", "tests": [{"test_id": "576", "test": "def test():\n        assert encode('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def encode(message):\n>     \"\"\"\n>     Write a function that takes a message, and encodes in such a \n>     way that it swaps case of all letters, replaces all vowels in \n>     the message with the letter that appears 2 places ahead of that \n>     vowel in the english alphabet. \n>     Assume only letters. \n>     Examples:\n>     >>> encode('test')\n>     'TGST'\n>     >>> encode('This is a message')\n>     'tHKS KS C MGSSCGG'\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n>     message = message.swapcase()\n>     return ''.join([vowels_replace[i] if i in vowels else i for i in message])", "coverage": "> def encode(message):\n>     \"\"\"\n>     Write a function that takes a message, and encodes in such a \n>     way that it swaps case of all letters, replaces all vowels in \n>     the message with the letter that appears 2 places ahead of that \n>     vowel in the english alphabet. \n>     Assume only letters. \n>     Examples:\n>     >>> encode('test')\n>     'TGST'\n>     >>> encode('This is a message')\n>     'tHKS KS C MGSSCGG'\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n>     message = message.swapcase()\n>     return ''.join([vowels_replace[i] if i in vowels else i for i in message])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "577", "test": "def test():\n        assert encode('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"", "coverage_executed": "> def encode(message):\n>     \"\"\"\n>     Write a function that takes a message, and encodes in such a \n>     way that it swaps case of all letters, replaces all vowels in \n>     the message with the letter that appears 2 places ahead of that \n>     vowel in the english alphabet. \n>     Assume only letters. \n>     Examples:\n>     >>> encode('test')\n>     'TGST'\n>     >>> encode('This is a message')\n>     'tHKS KS C MGSSCGG'\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n>     message = message.swapcase()\n>     return ''.join([vowels_replace[i] if i in vowels else i for i in message])", "coverage": "> def encode(message):\n>     \"\"\"\n>     Write a function that takes a message, and encodes in such a \n>     way that it swaps case of all letters, replaces all vowels in \n>     the message with the letter that appears 2 places ahead of that \n>     vowel in the english alphabet. \n>     Assume only letters. \n>     Examples:\n>     >>> encode('test')\n>     'TGST'\n>     >>> encode('This is a message')\n>     'tHKS KS C MGSSCGG'\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n>     message = message.swapcase()\n>     return ''.join([vowels_replace[i] if i in vowels else i for i in message])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "580", "test": "def test():\n        assert encode(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def encode(message):\n>     \"\"\"\n>     Write a function that takes a message, and encodes in such a \n>     way that it swaps case of all letters, replaces all vowels in \n>     the message with the letter that appears 2 places ahead of that \n>     vowel in the english alphabet. \n>     Assume only letters. \n>     Examples:\n>     >>> encode('test')\n>     'TGST'\n>     >>> encode('This is a message')\n>     'tHKS KS C MGSSCGG'\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n>     message = message.swapcase()\n>     return ''.join([vowels_replace[i] if i in vowels else i for i in message])", "coverage": "> def encode(message):\n>     \"\"\"\n>     Write a function that takes a message, and encodes in such a \n>     way that it swaps case of all letters, replaces all vowels in \n>     the message with the letter that appears 2 places ahead of that \n>     vowel in the english alphabet. \n>     Assume only letters. \n>     Examples:\n>     >>> encode('test')\n>     'TGST'\n>     >>> encode('This is a message')\n>     'tHKS KS C MGSSCGG'\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n>     message = message.swapcase()\n>     return ''.join([vowels_replace[i] if i in vowels else i for i in message])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "578", "test": "def test():\n        assert encode('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"", "coverage_executed": "> def encode(message):\n>     \"\"\"\n>     Write a function that takes a message, and encodes in such a \n>     way that it swaps case of all letters, replaces all vowels in \n>     the message with the letter that appears 2 places ahead of that \n>     vowel in the english alphabet. \n>     Assume only letters. \n>     Examples:\n>     >>> encode('test')\n>     'TGST'\n>     >>> encode('This is a message')\n>     'tHKS KS C MGSSCGG'\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n>     message = message.swapcase()\n>     return ''.join([vowels_replace[i] if i in vowels else i for i in message])", "coverage": "> def encode(message):\n>     \"\"\"\n>     Write a function that takes a message, and encodes in such a \n>     way that it swaps case of all letters, replaces all vowels in \n>     the message with the letter that appears 2 places ahead of that \n>     vowel in the english alphabet. \n>     Assume only letters. \n>     Examples:\n>     >>> encode('test')\n>     'TGST'\n>     >>> encode('This is a message')\n>     'tHKS KS C MGSSCGG'\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n>     message = message.swapcase()\n>     return ''.join([vowels_replace[i] if i in vowels else i for i in message])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "579", "test": "def test():\n        assert encode('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def encode(message):\n>     \"\"\"\n>     Write a function that takes a message, and encodes in such a \n>     way that it swaps case of all letters, replaces all vowels in \n>     the message with the letter that appears 2 places ahead of that \n>     vowel in the english alphabet. \n>     Assume only letters. \n>     Examples:\n>     >>> encode('test')\n>     'TGST'\n>     >>> encode('This is a message')\n>     'tHKS KS C MGSSCGG'\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n>     message = message.swapcase()\n>     return ''.join([vowels_replace[i] if i in vowels else i for i in message])", "coverage": "> def encode(message):\n>     \"\"\"\n>     Write a function that takes a message, and encodes in such a \n>     way that it swaps case of all letters, replaces all vowels in \n>     the message with the letter that appears 2 places ahead of that \n>     vowel in the english alphabet. \n>     Assume only letters. \n>     Examples:\n>     >>> encode('test')\n>     'TGST'\n>     >>> encode('This is a message')\n>     'tHKS KS C MGSSCGG'\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n>     message = message.swapcase()\n>     return ''.join([vowels_replace[i] if i in vowels else i for i in message])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}