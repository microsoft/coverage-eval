{"problem_id": 89, "problem": "smallest_change", "method": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans", "tests": [{"test_id": "418", "test": "def test():\n        assert smallest_change([0, 1]) == 1", "coverage_executed": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n>         if arr[i] != arr[len(arr) - i - 1]:\n>             ans += 1\n>     return ans", "coverage": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n>         if arr[i] != arr[len(arr) - i - 1]:\n>             ans += 1\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "416", "test": "def test():\n        assert smallest_change([3, 1, 1, 3]) == 0", "coverage_executed": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n>         if arr[i] != arr[len(arr) - i - 1]:\n\n>     return ans", "coverage": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n>         if arr[i] != arr[len(arr) - i - 1]:\n!             ans += 1\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "?"]}, {"test_id": "417", "test": "def test():\n        assert smallest_change([1]) == 0", "coverage_executed": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n\n\n>     return ans", "coverage": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n!         if arr[i] != arr[len(arr) - i - 1]:\n!             ans += 1\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "!", "?"]}, {"test_id": "415", "test": "def test():\n        assert smallest_change([1, 2, 3, 2, 1]) == 0", "coverage_executed": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n>         if arr[i] != arr[len(arr) - i - 1]:\n\n>     return ans", "coverage": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n>         if arr[i] != arr[len(arr) - i - 1]:\n!             ans += 1\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "?"]}, {"test_id": "414", "test": "def test():\n        assert smallest_change([1, 4, 4, 2]) == 1", "coverage_executed": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n>         if arr[i] != arr[len(arr) - i - 1]:\n>             ans += 1\n>     return ans", "coverage": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n>         if arr[i] != arr[len(arr) - i - 1]:\n>             ans += 1\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "411", "test": "def test():\n        assert smallest_change([1,2,3,5,4,7,9,6]) == 4", "coverage_executed": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n>         if arr[i] != arr[len(arr) - i - 1]:\n>             ans += 1\n>     return ans", "coverage": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n>         if arr[i] != arr[len(arr) - i - 1]:\n>             ans += 1\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "413", "test": "def test():\n        assert smallest_change([1, 4, 2]) == 1", "coverage_executed": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n>         if arr[i] != arr[len(arr) - i - 1]:\n>             ans += 1\n>     return ans", "coverage": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n>         if arr[i] != arr[len(arr) - i - 1]:\n>             ans += 1\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "412", "test": "def test():\n        assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1", "coverage_executed": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n>         if arr[i] != arr[len(arr) - i - 1]:\n>             ans += 1\n>     return ans", "coverage": "> def smallest_change(arr):\n>     \"\"\"\n>     Given an array arr of integers, find the minimum number of elements that\n>     need to be changed to make the array palindromic. A palindromic array is an array that\n>     is read the same backwards and forwards. In one change, you can change one element to any other element.\n>     For example:\n>     smallest_change([1,2,3,5,4,7,9,6]) == 4\n>     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n>     smallest_change([1, 2, 3, 2, 1]) == 0\n>     \"\"\"\n>     ans = 0\n>     for i in range(len(arr) // 2):\n>         if arr[i] != arr[len(arr) - i - 1]:\n>             ans += 1\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}]}