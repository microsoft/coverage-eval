{"problem_id": 31, "problem": "sum_product", "method": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value", "tests": [{"test_id": "36", "test": "def test():\n        assert sum_product([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)", "coverage_executed": "> def sum_product(numbers: List[int]) -> Tuple[int, int]:\n>     \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n>     Empty sum should be equal to 0 and empty product should be equal to 1.\n>     >>> sum_product([])\n>     (0, 1)\n>     >>> sum_product([1, 2, 3, 4])\n>     (10, 24)\n>     \"\"\"\n>     sum_value = 0\n>     prod_value = 1\n>     for n in numbers:\n>         sum_value += n\n>         prod_value *= n\n>     return sum_value, prod_value", "coverage": "> def sum_product(numbers: List[int]) -> Tuple[int, int]:\n>     \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n>     Empty sum should be equal to 0 and empty product should be equal to 1.\n>     >>> sum_product([])\n>     (0, 1)\n>     >>> sum_product([1, 2, 3, 4])\n>     (10, 24)\n>     \"\"\"\n>     sum_value = 0\n>     prod_value = 1\n>     for n in numbers:\n>         sum_value += n\n>         prod_value *= n\n>     return sum_value, prod_value", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "37", "test": "def test():\n        assert sum_product([10]) == (10, 10)", "coverage_executed": "> def sum_product(numbers: List[int]) -> Tuple[int, int]:\n>     \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n>     Empty sum should be equal to 0 and empty product should be equal to 1.\n>     >>> sum_product([])\n>     (0, 1)\n>     >>> sum_product([1, 2, 3, 4])\n>     (10, 24)\n>     \"\"\"\n>     sum_value = 0\n>     prod_value = 1\n>     for n in numbers:\n>         sum_value += n\n>         prod_value *= n\n>     return sum_value, prod_value", "coverage": "> def sum_product(numbers: List[int]) -> Tuple[int, int]:\n>     \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n>     Empty sum should be equal to 0 and empty product should be equal to 1.\n>     >>> sum_product([])\n>     (0, 1)\n>     >>> sum_product([1, 2, 3, 4])\n>     (10, 24)\n>     \"\"\"\n>     sum_value = 0\n>     prod_value = 1\n>     for n in numbers:\n>         sum_value += n\n>         prod_value *= n\n>     return sum_value, prod_value", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "35", "test": "def test():\n        assert sum_product([100, 0]) == (100, 0)", "coverage_executed": "> def sum_product(numbers: List[int]) -> Tuple[int, int]:\n>     \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n>     Empty sum should be equal to 0 and empty product should be equal to 1.\n>     >>> sum_product([])\n>     (0, 1)\n>     >>> sum_product([1, 2, 3, 4])\n>     (10, 24)\n>     \"\"\"\n>     sum_value = 0\n>     prod_value = 1\n>     for n in numbers:\n>         sum_value += n\n>         prod_value *= n\n>     return sum_value, prod_value", "coverage": "> def sum_product(numbers: List[int]) -> Tuple[int, int]:\n>     \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n>     Empty sum should be equal to 0 and empty product should be equal to 1.\n>     >>> sum_product([])\n>     (0, 1)\n>     >>> sum_product([1, 2, 3, 4])\n>     (10, 24)\n>     \"\"\"\n>     sum_value = 0\n>     prod_value = 1\n>     for n in numbers:\n>         sum_value += n\n>         prod_value *= n\n>     return sum_value, prod_value", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "34", "test": "def test():\n        assert sum_product([1, 1, 1]) == (3, 1)", "coverage_executed": "> def sum_product(numbers: List[int]) -> Tuple[int, int]:\n>     \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n>     Empty sum should be equal to 0 and empty product should be equal to 1.\n>     >>> sum_product([])\n>     (0, 1)\n>     >>> sum_product([1, 2, 3, 4])\n>     (10, 24)\n>     \"\"\"\n>     sum_value = 0\n>     prod_value = 1\n>     for n in numbers:\n>         sum_value += n\n>         prod_value *= n\n>     return sum_value, prod_value", "coverage": "> def sum_product(numbers: List[int]) -> Tuple[int, int]:\n>     \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n>     Empty sum should be equal to 0 and empty product should be equal to 1.\n>     >>> sum_product([])\n>     (0, 1)\n>     >>> sum_product([1, 2, 3, 4])\n>     (10, 24)\n>     \"\"\"\n>     sum_value = 0\n>     prod_value = 1\n>     for n in numbers:\n>         sum_value += n\n>         prod_value *= n\n>     return sum_value, prod_value", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "33", "test": "def test():\n        assert sum_product([]) == (0, 1)", "coverage_executed": "> def sum_product(numbers: List[int]) -> Tuple[int, int]:\n>     \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n>     Empty sum should be equal to 0 and empty product should be equal to 1.\n>     >>> sum_product([])\n>     (0, 1)\n>     >>> sum_product([1, 2, 3, 4])\n>     (10, 24)\n>     \"\"\"\n>     sum_value = 0\n>     prod_value = 1\n>     for n in numbers:\n\n\n>     return sum_value, prod_value", "coverage": "> def sum_product(numbers: List[int]) -> Tuple[int, int]:\n>     \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n>     Empty sum should be equal to 0 and empty product should be equal to 1.\n>     >>> sum_product([])\n>     (0, 1)\n>     >>> sum_product([1, 2, 3, 4])\n>     (10, 24)\n>     \"\"\"\n>     sum_value = 0\n>     prod_value = 1\n>     for n in numbers:\n!         sum_value += n\n!         prod_value *= n\n>     return sum_value, prod_value", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "!", "?"]}]}