{"problem_id": 124, "problem": "will_it_fly", "method": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if sum(q) > w:\n        return False\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True", "tests": [{"test_id": "405", "test": "def test():\n        assert will_it_fly([3, 2, 3], 9) is True", "coverage_executed": "> def will_it_fly(q,w):\n>     '''\n>     Write a function that returns True if the object q will fly, and False otherwise.\n>     The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n>     Example:\n>     will_it_fly([1, 2], 5) \u279e False \n      # 1+2 is less than the maximum possible weight, but it's unbalanced.\n>     will_it_fly([3, 2, 3], 1) \u279e False\n      # it's balanced, but 3+2+3 is more than the maximum possible weight.\n>     will_it_fly([3, 2, 3], 9) \u279e True\n      # 3+2+3 is less than the maximum possible weight, and it's balanced.\n>     will_it_fly([3], 5) \u279e True\n      # 3 is less than the maximum possible weight, and it's balanced.\n>     '''\n>     if sum(q) > w:\n\n>     i, j = 0, len(q)-1\n>     while i<j:\n>         if q[i] != q[j]:\n\n>         i+=1\n>         j-=1\n>     return True", "coverage": "> def will_it_fly(q,w):\n>     '''\n>     Write a function that returns True if the object q will fly, and False otherwise.\n>     The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n>     Example:\n>     will_it_fly([1, 2], 5) \u279e False \n      # 1+2 is less than the maximum possible weight, but it's unbalanced.\n>     will_it_fly([3, 2, 3], 1) \u279e False\n      # it's balanced, but 3+2+3 is more than the maximum possible weight.\n>     will_it_fly([3, 2, 3], 9) \u279e True\n      # 3+2+3 is less than the maximum possible weight, and it's balanced.\n>     will_it_fly([3], 5) \u279e True\n      # 3 is less than the maximum possible weight, and it's balanced.\n>     '''\n>     if sum(q) > w:\n!         return False\n>     i, j = 0, len(q)-1\n>     while i<j:\n>         if q[i] != q[j]:\n!             return False\n>         i+=1\n>         j-=1\n>     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", "!", ">", ">", "?"]}, {"test_id": "407", "test": "def test():\n        assert will_it_fly([3], 5) is True", "coverage_executed": "> def will_it_fly(q,w):\n>     '''\n>     Write a function that returns True if the object q will fly, and False otherwise.\n>     The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n>     Example:\n>     will_it_fly([1, 2], 5) \u279e False \n      # 1+2 is less than the maximum possible weight, but it's unbalanced.\n>     will_it_fly([3, 2, 3], 1) \u279e False\n      # it's balanced, but 3+2+3 is more than the maximum possible weight.\n>     will_it_fly([3, 2, 3], 9) \u279e True\n      # 3+2+3 is less than the maximum possible weight, and it's balanced.\n>     will_it_fly([3], 5) \u279e True\n      # 3 is less than the maximum possible weight, and it's balanced.\n>     '''\n>     if sum(q) > w:\n\n>     i, j = 0, len(q)-1\n>     while i<j:\n\n\n\n\n>     return True", "coverage": "> def will_it_fly(q,w):\n>     '''\n>     Write a function that returns True if the object q will fly, and False otherwise.\n>     The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n>     Example:\n>     will_it_fly([1, 2], 5) \u279e False \n      # 1+2 is less than the maximum possible weight, but it's unbalanced.\n>     will_it_fly([3, 2, 3], 1) \u279e False\n      # it's balanced, but 3+2+3 is more than the maximum possible weight.\n>     will_it_fly([3, 2, 3], 9) \u279e True\n      # 3+2+3 is less than the maximum possible weight, and it's balanced.\n>     will_it_fly([3], 5) \u279e True\n      # 3 is less than the maximum possible weight, and it's balanced.\n>     '''\n>     if sum(q) > w:\n!         return False\n>     i, j = 0, len(q)-1\n>     while i<j:\n!         if q[i] != q[j]:\n!             return False\n!         i+=1\n!         j-=1\n>     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", "!", "!", "!", "!", "?"]}, {"test_id": "410", "test": "def test():\n        assert will_it_fly([5], 5) is True", "coverage_executed": "> def will_it_fly(q,w):\n>     '''\n>     Write a function that returns True if the object q will fly, and False otherwise.\n>     The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n>     Example:\n>     will_it_fly([1, 2], 5) \u279e False \n      # 1+2 is less than the maximum possible weight, but it's unbalanced.\n>     will_it_fly([3, 2, 3], 1) \u279e False\n      # it's balanced, but 3+2+3 is more than the maximum possible weight.\n>     will_it_fly([3, 2, 3], 9) \u279e True\n      # 3+2+3 is less than the maximum possible weight, and it's balanced.\n>     will_it_fly([3], 5) \u279e True\n      # 3 is less than the maximum possible weight, and it's balanced.\n>     '''\n>     if sum(q) > w:\n\n>     i, j = 0, len(q)-1\n>     while i<j:\n\n\n\n\n>     return True", "coverage": "> def will_it_fly(q,w):\n>     '''\n>     Write a function that returns True if the object q will fly, and False otherwise.\n>     The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n>     Example:\n>     will_it_fly([1, 2], 5) \u279e False \n      # 1+2 is less than the maximum possible weight, but it's unbalanced.\n>     will_it_fly([3, 2, 3], 1) \u279e False\n      # it's balanced, but 3+2+3 is more than the maximum possible weight.\n>     will_it_fly([3, 2, 3], 9) \u279e True\n      # 3+2+3 is less than the maximum possible weight, and it's balanced.\n>     will_it_fly([3], 5) \u279e True\n      # 3 is less than the maximum possible weight, and it's balanced.\n>     '''\n>     if sum(q) > w:\n!         return False\n>     i, j = 0, len(q)-1\n>     while i<j:\n!         if q[i] != q[j]:\n!             return False\n!         i+=1\n!         j-=1\n>     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", "!", "!", "!", "!", "?"]}, {"test_id": "406", "test": "def test():\n        assert will_it_fly([1, 2], 5) is False", "coverage_executed": "> def will_it_fly(q,w):\n>     '''\n>     Write a function that returns True if the object q will fly, and False otherwise.\n>     The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n>     Example:\n>     will_it_fly([1, 2], 5) \u279e False \n      # 1+2 is less than the maximum possible weight, but it's unbalanced.\n>     will_it_fly([3, 2, 3], 1) \u279e False\n      # it's balanced, but 3+2+3 is more than the maximum possible weight.\n>     will_it_fly([3, 2, 3], 9) \u279e True\n      # 3+2+3 is less than the maximum possible weight, and it's balanced.\n>     will_it_fly([3], 5) \u279e True\n      # 3 is less than the maximum possible weight, and it's balanced.\n>     '''\n>     if sum(q) > w:\n\n>     i, j = 0, len(q)-1\n>     while i<j:\n>         if q[i] != q[j]:\n>             return False\n\n\n", "coverage": "> def will_it_fly(q,w):\n>     '''\n>     Write a function that returns True if the object q will fly, and False otherwise.\n>     The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n>     Example:\n>     will_it_fly([1, 2], 5) \u279e False \n      # 1+2 is less than the maximum possible weight, but it's unbalanced.\n>     will_it_fly([3, 2, 3], 1) \u279e False\n      # it's balanced, but 3+2+3 is more than the maximum possible weight.\n>     will_it_fly([3, 2, 3], 9) \u279e True\n      # 3+2+3 is less than the maximum possible weight, and it's balanced.\n>     will_it_fly([3], 5) \u279e True\n      # 3 is less than the maximum possible weight, and it's balanced.\n>     '''\n>     if sum(q) > w:\n!         return False\n>     i, j = 0, len(q)-1\n>     while i<j:\n>         if q[i] != q[j]:\n>             return False\n!         i+=1\n!         j-=1\n!     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", ">", "!", "!", "?"]}, {"test_id": "409", "test": "def test():\n        assert will_it_fly([1, 2, 3], 6) is False", "coverage_executed": "> def will_it_fly(q,w):\n>     '''\n>     Write a function that returns True if the object q will fly, and False otherwise.\n>     The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n>     Example:\n>     will_it_fly([1, 2], 5) \u279e False \n      # 1+2 is less than the maximum possible weight, but it's unbalanced.\n>     will_it_fly([3, 2, 3], 1) \u279e False\n      # it's balanced, but 3+2+3 is more than the maximum possible weight.\n>     will_it_fly([3, 2, 3], 9) \u279e True\n      # 3+2+3 is less than the maximum possible weight, and it's balanced.\n>     will_it_fly([3], 5) \u279e True\n      # 3 is less than the maximum possible weight, and it's balanced.\n>     '''\n>     if sum(q) > w:\n\n>     i, j = 0, len(q)-1\n>     while i<j:\n>         if q[i] != q[j]:\n>             return False\n\n\n", "coverage": "> def will_it_fly(q,w):\n>     '''\n>     Write a function that returns True if the object q will fly, and False otherwise.\n>     The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n>     Example:\n>     will_it_fly([1, 2], 5) \u279e False \n      # 1+2 is less than the maximum possible weight, but it's unbalanced.\n>     will_it_fly([3, 2, 3], 1) \u279e False\n      # it's balanced, but 3+2+3 is more than the maximum possible weight.\n>     will_it_fly([3, 2, 3], 9) \u279e True\n      # 3+2+3 is less than the maximum possible weight, and it's balanced.\n>     will_it_fly([3], 5) \u279e True\n      # 3 is less than the maximum possible weight, and it's balanced.\n>     '''\n>     if sum(q) > w:\n!         return False\n>     i, j = 0, len(q)-1\n>     while i<j:\n>         if q[i] != q[j]:\n>             return False\n!         i+=1\n!         j-=1\n!     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", ">", "!", "!", "?"]}, {"test_id": "408", "test": "def test():\n        assert will_it_fly([3, 2, 3], 1) is False", "coverage_executed": "> def will_it_fly(q,w):\n>     '''\n>     Write a function that returns True if the object q will fly, and False otherwise.\n>     The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n>     Example:\n>     will_it_fly([1, 2], 5) \u279e False \n      # 1+2 is less than the maximum possible weight, but it's unbalanced.\n>     will_it_fly([3, 2, 3], 1) \u279e False\n      # it's balanced, but 3+2+3 is more than the maximum possible weight.\n>     will_it_fly([3, 2, 3], 9) \u279e True\n      # 3+2+3 is less than the maximum possible weight, and it's balanced.\n>     will_it_fly([3], 5) \u279e True\n      # 3 is less than the maximum possible weight, and it's balanced.\n>     '''\n>     if sum(q) > w:\n>         return False\n\n\n\n\n\n\n", "coverage": "> def will_it_fly(q,w):\n>     '''\n>     Write a function that returns True if the object q will fly, and False otherwise.\n>     The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n>     Example:\n>     will_it_fly([1, 2], 5) \u279e False \n      # 1+2 is less than the maximum possible weight, but it's unbalanced.\n>     will_it_fly([3, 2, 3], 1) \u279e False\n      # it's balanced, but 3+2+3 is more than the maximum possible weight.\n>     will_it_fly([3, 2, 3], 9) \u279e True\n      # 3+2+3 is less than the maximum possible weight, and it's balanced.\n>     will_it_fly([3], 5) \u279e True\n      # 3 is less than the maximum possible weight, and it's balanced.\n>     '''\n>     if sum(q) > w:\n>         return False\n!     i, j = 0, len(q)-1\n!     while i<j:\n!         if q[i] != q[j]:\n!             return False\n!         i+=1\n!         j-=1\n!     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?", "!", "!", "!", "!", "!", "?"]}]}