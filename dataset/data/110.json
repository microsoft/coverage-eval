{"problem_id": 110, "problem": "remove_duplicates", "method": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]", "tests": [{"test_id": "111", "test": "def test():\n        assert remove_duplicates([]) == []", "coverage_executed": "> def remove_duplicates(numbers: List[int]) -> List[int]:\n>     \"\"\" From a list of integers, remove all elements that occur more than once.\n>     Keep order of elements left the same as in the input.\n>     >>> remove_duplicates([1, 2, 3, 2, 4])\n>     [1, 3, 4]\n>     \"\"\"\n>     import collections\n>     c = collections.Counter(numbers)\n>     return [n for n in numbers if c[n] <= 1]", "coverage": "> def remove_duplicates(numbers: List[int]) -> List[int]:\n>     \"\"\" From a list of integers, remove all elements that occur more than once.\n>     Keep order of elements left the same as in the input.\n>     >>> remove_duplicates([1, 2, 3, 2, 4])\n>     [1, 3, 4]\n>     \"\"\"\n>     import collections\n>     c = collections.Counter(numbers)\n>     return [n for n in numbers if c[n] <= 1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "112", "test": "def test():\n        assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]", "coverage_executed": "> def remove_duplicates(numbers: List[int]) -> List[int]:\n>     \"\"\" From a list of integers, remove all elements that occur more than once.\n>     Keep order of elements left the same as in the input.\n>     >>> remove_duplicates([1, 2, 3, 2, 4])\n>     [1, 3, 4]\n>     \"\"\"\n>     import collections\n>     c = collections.Counter(numbers)\n>     return [n for n in numbers if c[n] <= 1]", "coverage": "> def remove_duplicates(numbers: List[int]) -> List[int]:\n>     \"\"\" From a list of integers, remove all elements that occur more than once.\n>     Keep order of elements left the same as in the input.\n>     >>> remove_duplicates([1, 2, 3, 2, 4])\n>     [1, 3, 4]\n>     \"\"\"\n>     import collections\n>     c = collections.Counter(numbers)\n>     return [n for n in numbers if c[n] <= 1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "113", "test": "def test():\n        assert remove_duplicates([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]", "coverage_executed": "> def remove_duplicates(numbers: List[int]) -> List[int]:\n>     \"\"\" From a list of integers, remove all elements that occur more than once.\n>     Keep order of elements left the same as in the input.\n>     >>> remove_duplicates([1, 2, 3, 2, 4])\n>     [1, 3, 4]\n>     \"\"\"\n>     import collections\n>     c = collections.Counter(numbers)\n>     return [n for n in numbers if c[n] <= 1]", "coverage": "> def remove_duplicates(numbers: List[int]) -> List[int]:\n>     \"\"\" From a list of integers, remove all elements that occur more than once.\n>     Keep order of elements left the same as in the input.\n>     >>> remove_duplicates([1, 2, 3, 2, 4])\n>     [1, 3, 4]\n>     \"\"\"\n>     import collections\n>     c = collections.Counter(numbers)\n>     return [n for n in numbers if c[n] <= 1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}