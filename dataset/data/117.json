{"problem_id": 117, "problem": "largest_prime_factor", "method": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest", "tests": [{"test_id": "291", "test": "def test():\n        assert largest_prime_factor(13195) == 29", "coverage_executed": "> def largest_prime_factor(n: int):\n>     \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>     >>> largest_prime_factor(13195)\n>     29\n>     >>> largest_prime_factor(2048)\n>     2\n>     \"\"\"\n>     def is_prime(k):\n>         if k < 2:\n\n>         for i in range(2, k - 1):\n>             if k % i == 0:\n>                 return False\n>         return True\n>     largest = 1\n>     for j in range(2, n + 1):\n>         if n % j == 0 and is_prime(j):\n>             largest = max(largest, j)\n>     return largest", "coverage": "> def largest_prime_factor(n: int):\n>     \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>     >>> largest_prime_factor(13195)\n>     29\n>     >>> largest_prime_factor(2048)\n>     2\n>     \"\"\"\n>     def is_prime(k):\n>         if k < 2:\n!             return False\n>         for i in range(2, k - 1):\n>             if k % i == 0:\n>                 return False\n>         return True\n>     largest = 1\n>     for j in range(2, n + 1):\n>         if n % j == 0 and is_prime(j):\n>             largest = max(largest, j)\n>     return largest", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", "?", "?", ">", ">", ">", "?"]}, {"test_id": "290", "test": "def test():\n        assert largest_prime_factor(330) == 11", "coverage_executed": "> def largest_prime_factor(n: int):\n>     \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>     >>> largest_prime_factor(13195)\n>     29\n>     >>> largest_prime_factor(2048)\n>     2\n>     \"\"\"\n>     def is_prime(k):\n>         if k < 2:\n\n>         for i in range(2, k - 1):\n>             if k % i == 0:\n>                 return False\n>         return True\n>     largest = 1\n>     for j in range(2, n + 1):\n>         if n % j == 0 and is_prime(j):\n>             largest = max(largest, j)\n>     return largest", "coverage": "> def largest_prime_factor(n: int):\n>     \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>     >>> largest_prime_factor(13195)\n>     29\n>     >>> largest_prime_factor(2048)\n>     2\n>     \"\"\"\n>     def is_prime(k):\n>         if k < 2:\n!             return False\n>         for i in range(2, k - 1):\n>             if k % i == 0:\n>                 return False\n>         return True\n>     largest = 1\n>     for j in range(2, n + 1):\n>         if n % j == 0 and is_prime(j):\n>             largest = max(largest, j)\n>     return largest", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", "?", "?", ">", ">", ">", "?"]}, {"test_id": "287", "test": "def test():\n        assert largest_prime_factor(15) == 5", "coverage_executed": "> def largest_prime_factor(n: int):\n>     \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>     >>> largest_prime_factor(13195)\n>     29\n>     >>> largest_prime_factor(2048)\n>     2\n>     \"\"\"\n>     def is_prime(k):\n>         if k < 2:\n\n>         for i in range(2, k - 1):\n>             if k % i == 0:\n>                 return False\n>         return True\n>     largest = 1\n>     for j in range(2, n + 1):\n>         if n % j == 0 and is_prime(j):\n>             largest = max(largest, j)\n>     return largest", "coverage": "> def largest_prime_factor(n: int):\n>     \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>     >>> largest_prime_factor(13195)\n>     29\n>     >>> largest_prime_factor(2048)\n>     2\n>     \"\"\"\n>     def is_prime(k):\n>         if k < 2:\n!             return False\n>         for i in range(2, k - 1):\n>             if k % i == 0:\n>                 return False\n>         return True\n>     largest = 1\n>     for j in range(2, n + 1):\n>         if n % j == 0 and is_prime(j):\n>             largest = max(largest, j)\n>     return largest", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", "?", "?", ">", ">", ">", "?"]}, {"test_id": "288", "test": "def test():\n        assert largest_prime_factor(27) == 3", "coverage_executed": "> def largest_prime_factor(n: int):\n>     \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>     >>> largest_prime_factor(13195)\n>     29\n>     >>> largest_prime_factor(2048)\n>     2\n>     \"\"\"\n>     def is_prime(k):\n>         if k < 2:\n\n>         for i in range(2, k - 1):\n>             if k % i == 0:\n>                 return False\n>         return True\n>     largest = 1\n>     for j in range(2, n + 1):\n>         if n % j == 0 and is_prime(j):\n>             largest = max(largest, j)\n>     return largest", "coverage": "> def largest_prime_factor(n: int):\n>     \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>     >>> largest_prime_factor(13195)\n>     29\n>     >>> largest_prime_factor(2048)\n>     2\n>     \"\"\"\n>     def is_prime(k):\n>         if k < 2:\n!             return False\n>         for i in range(2, k - 1):\n>             if k % i == 0:\n>                 return False\n>         return True\n>     largest = 1\n>     for j in range(2, n + 1):\n>         if n % j == 0 and is_prime(j):\n>             largest = max(largest, j)\n>     return largest", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", "?", "?", ">", ">", ">", "?"]}, {"test_id": "289", "test": "def test():\n        assert largest_prime_factor(63) == 7", "coverage_executed": "> def largest_prime_factor(n: int):\n>     \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>     >>> largest_prime_factor(13195)\n>     29\n>     >>> largest_prime_factor(2048)\n>     2\n>     \"\"\"\n>     def is_prime(k):\n>         if k < 2:\n\n>         for i in range(2, k - 1):\n>             if k % i == 0:\n>                 return False\n>         return True\n>     largest = 1\n>     for j in range(2, n + 1):\n>         if n % j == 0 and is_prime(j):\n>             largest = max(largest, j)\n>     return largest", "coverage": "> def largest_prime_factor(n: int):\n>     \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>     >>> largest_prime_factor(13195)\n>     29\n>     >>> largest_prime_factor(2048)\n>     2\n>     \"\"\"\n>     def is_prime(k):\n>         if k < 2:\n!             return False\n>         for i in range(2, k - 1):\n>             if k % i == 0:\n>                 return False\n>         return True\n>     largest = 1\n>     for j in range(2, n + 1):\n>         if n % j == 0 and is_prime(j):\n>             largest = max(largest, j)\n>     return largest", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", "?", "?", ">", ">", ">", "?"]}]}