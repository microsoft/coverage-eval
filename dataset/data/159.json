{"problem_id": 159, "problem": "intersperse", "method": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result", "tests": [{"test_id": "25", "test": "def test():\n        assert intersperse([2, 2, 2], 2) == [2, 2, 2, 2, 2]", "coverage_executed": "> def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n>     \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>     >>> intersperse([], 4)\n>     []\n>     >>> intersperse([1, 2, 3], 4)\n>     [1, 4, 2, 4, 3]\n>     \"\"\"\n>     if not numbers:\n\n>     result = []\n>     for n in numbers[:-1]:\n>         result.append(n)\n>         result.append(delimeter)\n>     result.append(numbers[-1])\n>     return result", "coverage": "> def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n>     \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>     >>> intersperse([], 4)\n>     []\n>     >>> intersperse([1, 2, 3], 4)\n>     [1, 4, 2, 4, 3]\n>     \"\"\"\n>     if not numbers:\n!         return []\n>     result = []\n>     for n in numbers[:-1]:\n>         result.append(n)\n>         result.append(delimeter)\n>     result.append(numbers[-1])\n>     return result", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", ">", "?", "?"]}, {"test_id": "24", "test": "def test():\n        assert intersperse([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]", "coverage_executed": "> def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n>     \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>     >>> intersperse([], 4)\n>     []\n>     >>> intersperse([1, 2, 3], 4)\n>     [1, 4, 2, 4, 3]\n>     \"\"\"\n>     if not numbers:\n\n>     result = []\n>     for n in numbers[:-1]:\n>         result.append(n)\n>         result.append(delimeter)\n>     result.append(numbers[-1])\n>     return result", "coverage": "> def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n>     \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>     >>> intersperse([], 4)\n>     []\n>     >>> intersperse([1, 2, 3], 4)\n>     [1, 4, 2, 4, 3]\n>     \"\"\"\n>     if not numbers:\n!         return []\n>     result = []\n>     for n in numbers[:-1]:\n>         result.append(n)\n>         result.append(delimeter)\n>     result.append(numbers[-1])\n>     return result", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", ">", "?", "?"]}, {"test_id": "23", "test": "def test():\n        assert intersperse([], 7) == []", "coverage_executed": "> def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n>     \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>     >>> intersperse([], 4)\n>     []\n>     >>> intersperse([1, 2, 3], 4)\n>     [1, 4, 2, 4, 3]\n>     \"\"\"\n>     if not numbers:\n>         return []\n\n\n\n\n\n", "coverage": "> def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n>     \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>     >>> intersperse([], 4)\n>     []\n>     >>> intersperse([1, 2, 3], 4)\n>     [1, 4, 2, 4, 3]\n>     \"\"\"\n>     if not numbers:\n>         return []\n!     result = []\n!     for n in numbers[:-1]:\n!         result.append(n)\n!         result.append(delimeter)\n!     result.append(numbers[-1])\n!     return result", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", ">", ">", "?", "!", "!", "!", "?", "?"]}]}