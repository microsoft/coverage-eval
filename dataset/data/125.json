{"problem_id": 125, "problem": "right_angle_triangle", "method": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "tests": [{"test_id": "1139", "test": "def test():\n        assert right_angle_triangle(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1138", "test": "def test():\n        assert right_angle_triangle(48, 55, 73) == True", "coverage_executed": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1131", "test": "def test():\n        assert right_angle_triangle(1, 2, 3) == False", "coverage_executed": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1130", "test": "def test():\n        assert right_angle_triangle(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1140", "test": "def test():\n        assert right_angle_triangle(2, 2, 10) == False", "coverage_executed": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1132", "test": "def test():\n        assert right_angle_triangle(10, 6, 8) == True", "coverage_executed": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1133", "test": "def test():\n        assert right_angle_triangle(2, 2, 2) == False", "coverage_executed": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1137", "test": "def test():\n        assert right_angle_triangle(15, 8, 17) == True", "coverage_executed": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1136", "test": "def test():\n        assert right_angle_triangle(5, 12, 13) == True", "coverage_executed": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1134", "test": "def test():\n        assert right_angle_triangle(7, 24, 25) == True", "coverage_executed": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1135", "test": "def test():\n        assert right_angle_triangle(10, 5, 7) == False", "coverage_executed": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage": "> def right_angle_triangle(a, b, c):\n>     '''\n>     Given the lengths of the three sides of a triangle. Return True if the three\n>     sides form a right-angled triangle, False otherwise.\n>     A right-angled triangle is a triangle in which one angle is right angle or \n>     90 degree.\n>     Example:\n>     right_angle_triangle(3, 4, 5) == True\n>     right_angle_triangle(1, 2, 3) == False\n>     '''\n>     return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}