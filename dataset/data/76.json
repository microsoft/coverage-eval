{"problem_id": 76, "problem": "even_odd_count", "method": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)", "tests": [{"test_id": "1109", "test": "def test():\n        assert even_odd_count(346211) == (3, 3)", "coverage_executed": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n>             even_count +=1\n>         else:\n>             odd_count +=1\n>     return (even_count, odd_count)", "coverage": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n>             even_count +=1\n>         else:\n>             odd_count +=1\n>     return (even_count, odd_count)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1108", "test": "def test():\n        assert even_odd_count(3452) == (2, 2)", "coverage_executed": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n>             even_count +=1\n>         else:\n>             odd_count +=1\n>     return (even_count, odd_count)", "coverage": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n>             even_count +=1\n>         else:\n>             odd_count +=1\n>     return (even_count, odd_count)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1107", "test": "def test():\n        assert even_odd_count(-78) == (1, 1)", "coverage_executed": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n>             even_count +=1\n>         else:\n>             odd_count +=1\n>     return (even_count, odd_count)", "coverage": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n>             even_count +=1\n>         else:\n>             odd_count +=1\n>     return (even_count, odd_count)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1110", "test": "def test():\n        assert even_odd_count(-345821) == (3, 3)", "coverage_executed": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n>             even_count +=1\n>         else:\n>             odd_count +=1\n>     return (even_count, odd_count)", "coverage": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n>             even_count +=1\n>         else:\n>             odd_count +=1\n>     return (even_count, odd_count)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1111", "test": "def test():\n        assert even_odd_count(-2) == (1, 0)", "coverage_executed": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n>             even_count +=1\n\n\n>     return (even_count, odd_count)", "coverage": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n>             even_count +=1\n!         else:\n!             odd_count +=1\n>     return (even_count, odd_count)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", "?"]}, {"test_id": "1106", "test": "def test():\n        assert even_odd_count(7) == (0, 1)", "coverage_executed": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n\n>         else:\n>             odd_count +=1\n>     return (even_count, odd_count)", "coverage": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n!             even_count +=1\n>         else:\n>             odd_count +=1\n>     return (even_count, odd_count)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", ">", ">", "?"]}, {"test_id": "1113", "test": "def test():\n        assert even_odd_count(0) == (1, 0)", "coverage_executed": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n>             even_count +=1\n\n\n>     return (even_count, odd_count)", "coverage": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n>             even_count +=1\n!         else:\n!             odd_count +=1\n>     return (even_count, odd_count)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", "?"]}, {"test_id": "1112", "test": "def test():\n        assert even_odd_count(-45347) == (2, 3)", "coverage_executed": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n>             even_count +=1\n>         else:\n>             odd_count +=1\n>     return (even_count, odd_count)", "coverage": "> def even_odd_count(num):\n>     \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n>      Example:\n>         even_odd_count(-12) ==> (1, 1)\n>         even_odd_count(123) ==> (1, 2)\n>     \"\"\"\n>     even_count = 0\n>     odd_count = 0\n>     for i in str(abs(num)):\n>         if int(i)%2==0:\n>             even_count +=1\n>         else:\n>             odd_count +=1\n>     return (even_count, odd_count)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?"]}]}