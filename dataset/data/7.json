{"problem_id": 7, "problem": "correct_bracketing", "method": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0", "tests": [{"test_id": "263", "test": "def test():\n        assert correct_bracketing(\"<>\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n\n>     return depth == 0", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n!             return False\n>     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?"]}, {"test_id": "274", "test": "def test():\n        assert not correct_bracketing(\"<><><<><>><>>><>\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n!     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "272", "test": "def test():\n        assert not correct_bracketing(\"<<>\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n\n>     return depth == 0", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n!             return False\n>     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?"]}, {"test_id": "265", "test": "def test():\n        assert correct_bracketing(\"<><><<><>><>\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n\n>     return depth == 0", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n!             return False\n>     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?"]}, {"test_id": "264", "test": "def test():\n        assert correct_bracketing(\"<<><>>\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n\n>     return depth == 0", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n!             return False\n>     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?"]}, {"test_id": "273", "test": "def test():\n        assert not correct_bracketing(\"<><><<><>><>><<>\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n!     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "271", "test": "def test():\n        assert not correct_bracketing(\">\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n!             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n!     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", ">", ">", ">", ">", "?"]}, {"test_id": "266", "test": "def test():\n        assert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n\n>     return depth == 0", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n!             return False\n>     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?"]}, {"test_id": "267", "test": "def test():\n        assert not correct_bracketing(\"<<<><>>>>\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n!     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "270", "test": "def test():\n        assert not correct_bracketing(\"<<<<\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n\n\n>         if depth < 0:\n\n>     return depth == 0", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n!         else:\n!             depth -= 1\n>         if depth < 0:\n!             return False\n>     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", ">", "!", "?"]}, {"test_id": "268", "test": "def test():\n        assert not correct_bracketing(\"><<>\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n!             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n!     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", ">", ">", ">", ">", "?"]}, {"test_id": "269", "test": "def test():\n        assert not correct_bracketing(\"<\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n\n\n>         if depth < 0:\n\n>     return depth == 0", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"<\" and \">\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"<\")\n>     False\n>     >>> correct_bracketing(\"<>\")\n>     True\n>     >>> correct_bracketing(\"<<><>>\")\n>     True\n>     >>> correct_bracketing(\"><<>\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"<\":\n>             depth += 1\n!         else:\n!             depth -= 1\n>         if depth < 0:\n!             return False\n>     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", ">", "!", "?"]}]}