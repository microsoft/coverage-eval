{"problem_id": 115, "problem": "sum_squares", "method": "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)", "tests": [{"test_id": "1008", "test": "def test():\n        assert sum_squares([]) == 0", "coverage_executed": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n\n\n\n\n\n\n>     return sum(result)", "coverage": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n!         if i %3 == 0:\n!             result.append(lst[i]**2)\n!         elif i % 4 == 0 and i%3 != 0:\n!             result.append(lst[i]**3)\n!         else:\n!             result.append(lst[i])\n>     return sum(result)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "!", "!", "!", "!", "!", "?"]}, {"test_id": "1009", "test": "def test():\n        assert sum_squares([1,1,1,1,1,1,1,1,1]) == 9", "coverage_executed": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n>             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n>             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1014", "test": "def test():\n        assert sum_squares([-1,0,0,0,0,0,0,0,-1]) == 0", "coverage_executed": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n>             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n>             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1015", "test": "def test():\n        assert sum_squares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196", "coverage_executed": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n>             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n>             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1016", "test": "def test():\n        assert sum_squares([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448", "coverage_executed": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n>             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n>             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1012", "test": "def test():\n        assert sum_squares([-1,-5,2,-1,-5]) == -126", "coverage_executed": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n>             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n>             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1013", "test": "def test():\n        assert sum_squares([-56,-99,1,0,-2]) == 3030", "coverage_executed": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n>             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n>             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1011", "test": "def test():\n        assert sum_squares([0]) == 0", "coverage_executed": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n\n\n\n\n>     return sum(result)", "coverage": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n!         elif i % 4 == 0 and i%3 != 0:\n!             result.append(lst[i]**3)\n!         else:\n!             result.append(lst[i])\n>     return sum(result)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", "!", "!", "?"]}, {"test_id": "1006", "test": "def test():\n        assert sum_squares([1,2,3]) == 6", "coverage_executed": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n!             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "!", ">", ">", "?"]}, {"test_id": "1007", "test": "def test():\n        assert sum_squares([1,4,9]) == 14", "coverage_executed": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n!             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "!", ">", ">", "?"]}, {"test_id": "1010", "test": "def test():\n        assert sum_squares([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3", "coverage_executed": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n>             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage": "> def sum_squares(lst):\n>     \"\"\"\"\n>     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n>     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n>     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n>     Examples:\n>     For lst = [1,2,3] the output should be 6\n>     For lst = []  the output should be 0\n>     For lst = [-1,-5,2,-1,-5]  the output should be -126\n>     \"\"\"\n>     result =[]\n>     for i in range(len(lst)):\n>         if i %3 == 0:\n>             result.append(lst[i]**2)\n>         elif i % 4 == 0 and i%3 != 0:\n>             result.append(lst[i]**3)\n>         else:\n>             result.append(lst[i])\n>     return sum(result)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}]}