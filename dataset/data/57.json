{"problem_id": 57, "problem": "decode_cyclic", "method": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    return encode_cyclic(encode_cyclic(s))", "tests": [{"test_id": "161", "test": "def test():\n            assert decode_cyclic(encoded_str) == str", "coverage_executed": "> def encode_cyclic(s: str):\n>     \"\"\"\n>     returns encoded string by cycling groups of three characters.\n>     \"\"\"\n      # split string to groups. Each of length 3.\n\n      # cycle elements in each group. Unless group has fewer elements than 3.\n\n\n> def decode_cyclic(s: str):\n>     \"\"\"\n>     takes as input string encoded with encode_cyclic function. Returns decoded string.\n>     \"\"\"\n", "coverage": "> def encode_cyclic(s: str):\n>     \"\"\"\n>     returns encoded string by cycling groups of three characters.\n>     \"\"\"\n      # split string to groups. Each of length 3.\n!     groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n      # cycle elements in each group. Unless group has fewer elements than 3.\n!     groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n!     return \"\".join(groups)\n> def decode_cyclic(s: str):\n>     \"\"\"\n>     takes as input string encoded with encode_cyclic function. Returns decoded string.\n>     \"\"\"\n!     return encode_cyclic(encode_cyclic(s))", "coverage_sequence": [">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}