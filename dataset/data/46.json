{"problem_id": 46, "problem": "correct_bracketing", "method": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0", "tests": [{"test_id": "308", "test": "def test():\n        assert not correct_bracketing(\"()()(()())()))()\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n!     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "298", "test": "def test():\n        assert correct_bracketing(\"(()())\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n\n>     return depth == 0", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n!             return False\n>     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?"]}, {"test_id": "299", "test": "def test():\n        assert correct_bracketing(\"()()(()())()\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n\n>     return depth == 0", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n!             return False\n>     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?"]}, {"test_id": "305", "test": "def test():\n        assert not correct_bracketing(\")\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n!             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n!     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", ">", ">", ">", ">", "?"]}, {"test_id": "304", "test": "def test():\n        assert not correct_bracketing(\"((((\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n\n\n>         if depth < 0:\n\n>     return depth == 0", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n!         else:\n!             depth -= 1\n>         if depth < 0:\n!             return False\n>     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", ">", "!", "?"]}, {"test_id": "306", "test": "def test():\n        assert not correct_bracketing(\"(()\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n\n>     return depth == 0", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n!             return False\n>     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?"]}, {"test_id": "307", "test": "def test():\n        assert not correct_bracketing(\"()()(()())())(()\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n!     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "303", "test": "def test():\n        assert not correct_bracketing(\"(\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n\n\n>         if depth < 0:\n\n>     return depth == 0", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n!         else:\n!             depth -= 1\n>         if depth < 0:\n!             return False\n>     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", ">", "!", "?"]}, {"test_id": "302", "test": "def test():\n        assert not correct_bracketing(\")(()\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n!             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n!     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", ">", ">", ">", ">", "?"]}, {"test_id": "297", "test": "def test():\n        assert correct_bracketing(\"()\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n\n>     return depth == 0", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n!             return False\n>     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?"]}, {"test_id": "300", "test": "def test():\n        assert correct_bracketing(\"()()((()()())())(()()(()))\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n\n>     return depth == 0", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n!             return False\n>     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?"]}, {"test_id": "301", "test": "def test():\n        assert not correct_bracketing(\"((()())))\")", "coverage_executed": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n", "coverage": "> def correct_bracketing(brackets: str):\n>     \"\"\" brackets is a string of \"(\" and \")\".\n>     return True if every opening bracket has a corresponding closing bracket.\n>     >>> correct_bracketing(\"(\")\n>     False\n>     >>> correct_bracketing(\"()\")\n>     True\n>     >>> correct_bracketing(\"(()())\")\n>     True\n>     >>> correct_bracketing(\")(()\")\n>     False\n>     \"\"\"\n>     depth = 0\n>     for b in brackets:\n>         if b == \"(\":\n>             depth += 1\n>         else:\n>             depth -= 1\n>         if depth < 0:\n>             return False\n!     return depth == 0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}]}