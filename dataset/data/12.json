{"problem_id": 12, "problem": "rescale_to_unit", "method": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]", "tests": [{"test_id": "87", "test": "def test():\n        assert rescale_to_unit([2.0, 49.9]) == [0.0, 1.0]", "coverage_executed": "> def rescale_to_unit(numbers: List[float]) -> List[float]:\n>     \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n>     such that the smallest number will become 0 and the largest will become 1\n>     >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n>     [0.0, 0.25, 0.5, 0.75, 1.0]\n>     \"\"\"\n>     min_number = min(numbers)\n>     max_number = max(numbers)\n>     return [(x - min_number) / (max_number - min_number) for x in numbers]", "coverage": "> def rescale_to_unit(numbers: List[float]) -> List[float]:\n>     \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n>     such that the smallest number will become 0 and the largest will become 1\n>     >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n>     [0.0, 0.25, 0.5, 0.75, 1.0]\n>     \"\"\"\n>     min_number = min(numbers)\n>     max_number = max(numbers)\n>     return [(x - min_number) / (max_number - min_number) for x in numbers]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "90", "test": "def test():\n        assert rescale_to_unit([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]", "coverage_executed": "> def rescale_to_unit(numbers: List[float]) -> List[float]:\n>     \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n>     such that the smallest number will become 0 and the largest will become 1\n>     >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n>     [0.0, 0.25, 0.5, 0.75, 1.0]\n>     \"\"\"\n>     min_number = min(numbers)\n>     max_number = max(numbers)\n>     return [(x - min_number) / (max_number - min_number) for x in numbers]", "coverage": "> def rescale_to_unit(numbers: List[float]) -> List[float]:\n>     \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n>     such that the smallest number will become 0 and the largest will become 1\n>     >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n>     [0.0, 0.25, 0.5, 0.75, 1.0]\n>     \"\"\"\n>     min_number = min(numbers)\n>     max_number = max(numbers)\n>     return [(x - min_number) / (max_number - min_number) for x in numbers]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "91", "test": "def test():\n        assert rescale_to_unit([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]", "coverage_executed": "> def rescale_to_unit(numbers: List[float]) -> List[float]:\n>     \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n>     such that the smallest number will become 0 and the largest will become 1\n>     >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n>     [0.0, 0.25, 0.5, 0.75, 1.0]\n>     \"\"\"\n>     min_number = min(numbers)\n>     max_number = max(numbers)\n>     return [(x - min_number) / (max_number - min_number) for x in numbers]", "coverage": "> def rescale_to_unit(numbers: List[float]) -> List[float]:\n>     \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n>     such that the smallest number will become 0 and the largest will become 1\n>     >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n>     [0.0, 0.25, 0.5, 0.75, 1.0]\n>     \"\"\"\n>     min_number = min(numbers)\n>     max_number = max(numbers)\n>     return [(x - min_number) / (max_number - min_number) for x in numbers]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "89", "test": "def test():\n        assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "coverage_executed": "> def rescale_to_unit(numbers: List[float]) -> List[float]:\n>     \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n>     such that the smallest number will become 0 and the largest will become 1\n>     >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n>     [0.0, 0.25, 0.5, 0.75, 1.0]\n>     \"\"\"\n>     min_number = min(numbers)\n>     max_number = max(numbers)\n>     return [(x - min_number) / (max_number - min_number) for x in numbers]", "coverage": "> def rescale_to_unit(numbers: List[float]) -> List[float]:\n>     \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n>     such that the smallest number will become 0 and the largest will become 1\n>     >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n>     [0.0, 0.25, 0.5, 0.75, 1.0]\n>     \"\"\"\n>     min_number = min(numbers)\n>     max_number = max(numbers)\n>     return [(x - min_number) / (max_number - min_number) for x in numbers]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "88", "test": "def test():\n        assert rescale_to_unit([100.0, 49.9]) == [1.0, 0.0]", "coverage_executed": "> def rescale_to_unit(numbers: List[float]) -> List[float]:\n>     \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n>     such that the smallest number will become 0 and the largest will become 1\n>     >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n>     [0.0, 0.25, 0.5, 0.75, 1.0]\n>     \"\"\"\n>     min_number = min(numbers)\n>     max_number = max(numbers)\n>     return [(x - min_number) / (max_number - min_number) for x in numbers]", "coverage": "> def rescale_to_unit(numbers: List[float]) -> List[float]:\n>     \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n>     such that the smallest number will become 0 and the largest will become 1\n>     >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n>     [0.0, 0.25, 0.5, 0.75, 1.0]\n>     \"\"\"\n>     min_number = min(numbers)\n>     max_number = max(numbers)\n>     return [(x - min_number) / (max_number - min_number) for x in numbers]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}