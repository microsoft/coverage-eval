{"problem_id": 43, "problem": "rolling_max", "method": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n        result.append(running_max)\n    return result", "tests": [{"test_id": "39", "test": "def test():\n        assert rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4]", "coverage_executed": "> def rolling_max(numbers: List[int]) -> List[int]:\n>     \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n>     in the sequence.\n>     >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n>     [1, 2, 3, 3, 3, 4, 4]\n>     \"\"\"\n>     running_max = None\n>     result = []\n>     for n in numbers:\n>         if running_max is None:\n>             running_max = n\n>         else:\n>             running_max = max(running_max, n)\n>         result.append(running_max)\n>     return result", "coverage": "> def rolling_max(numbers: List[int]) -> List[int]:\n>     \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n>     in the sequence.\n>     >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n>     [1, 2, 3, 3, 3, 4, 4]\n>     \"\"\"\n>     running_max = None\n>     result = []\n>     for n in numbers:\n>         if running_max is None:\n>             running_max = n\n>         else:\n>             running_max = max(running_max, n)\n>         result.append(running_max)\n>     return result", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "38", "test": "def test():\n        assert rolling_max([]) == []", "coverage_executed": "> def rolling_max(numbers: List[int]) -> List[int]:\n>     \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n>     in the sequence.\n>     >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n>     [1, 2, 3, 3, 3, 4, 4]\n>     \"\"\"\n>     running_max = None\n>     result = []\n>     for n in numbers:\n\n\n\n\n\n>     return result", "coverage": "> def rolling_max(numbers: List[int]) -> List[int]:\n>     \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n>     in the sequence.\n>     >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n>     [1, 2, 3, 3, 3, 4, 4]\n>     \"\"\"\n>     running_max = None\n>     result = []\n>     for n in numbers:\n!         if running_max is None:\n!             running_max = n\n!         else:\n!             running_max = max(running_max, n)\n!         result.append(running_max)\n>     return result", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "!", "!", "!", "!", "?"]}, {"test_id": "41", "test": "def test():\n        assert rolling_max([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]", "coverage_executed": "> def rolling_max(numbers: List[int]) -> List[int]:\n>     \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n>     in the sequence.\n>     >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n>     [1, 2, 3, 3, 3, 4, 4]\n>     \"\"\"\n>     running_max = None\n>     result = []\n>     for n in numbers:\n>         if running_max is None:\n>             running_max = n\n>         else:\n>             running_max = max(running_max, n)\n>         result.append(running_max)\n>     return result", "coverage": "> def rolling_max(numbers: List[int]) -> List[int]:\n>     \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n>     in the sequence.\n>     >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n>     [1, 2, 3, 3, 3, 4, 4]\n>     \"\"\"\n>     running_max = None\n>     result = []\n>     for n in numbers:\n>         if running_max is None:\n>             running_max = n\n>         else:\n>             running_max = max(running_max, n)\n>         result.append(running_max)\n>     return result", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "40", "test": "def test():\n        assert rolling_max([4, 3, 2, 1]) == [4, 4, 4, 4]", "coverage_executed": "> def rolling_max(numbers: List[int]) -> List[int]:\n>     \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n>     in the sequence.\n>     >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n>     [1, 2, 3, 3, 3, 4, 4]\n>     \"\"\"\n>     running_max = None\n>     result = []\n>     for n in numbers:\n>         if running_max is None:\n>             running_max = n\n>         else:\n>             running_max = max(running_max, n)\n>         result.append(running_max)\n>     return result", "coverage": "> def rolling_max(numbers: List[int]) -> List[int]:\n>     \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n>     in the sequence.\n>     >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n>     [1, 2, 3, 3, 3, 4, 4]\n>     \"\"\"\n>     running_max = None\n>     result = []\n>     for n in numbers:\n>         if running_max is None:\n>             running_max = n\n>         else:\n>             running_max = max(running_max, n)\n>         result.append(running_max)\n>     return result", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "?"]}]}