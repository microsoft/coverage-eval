{"problem_id": 123, "problem": "remove_vowels", "method": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "tests": [{"test_id": "238", "test": "def test():\n        assert remove_vowels('ybcd') == 'ybcd'", "coverage_executed": "> def remove_vowels(text):\n>     \"\"\"\n>     remove_vowels is a function that takes string and returns string without vowels.\n>     >>> remove_vowels('')\n>     ''\n>     >>> remove_vowels(\"abcdef\\nghijklm\")\n>     'bcdf\\nghjklm'\n>     >>> remove_vowels('abcdef')\n>     'bcdf'\n>     >>> remove_vowels('aaaaa')\n>     ''\n>     >>> remove_vowels('aaBAA')\n>     'B'\n>     >>> remove_vowels('zbcd')\n>     'zbcd'\n>     \"\"\"\n>     return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "coverage": "> def remove_vowels(text):\n>     \"\"\"\n>     remove_vowels is a function that takes string and returns string without vowels.\n>     >>> remove_vowels('')\n>     ''\n>     >>> remove_vowels(\"abcdef\\nghijklm\")\n>     'bcdf\\nghjklm'\n>     >>> remove_vowels('abcdef')\n>     'bcdf'\n>     >>> remove_vowels('aaaaa')\n>     ''\n>     >>> remove_vowels('aaBAA')\n>     'B'\n>     >>> remove_vowels('zbcd')\n>     'zbcd'\n>     \"\"\"\n>     return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "232", "test": "def test():\n        assert remove_vowels('') == ''", "coverage_executed": "> def remove_vowels(text):\n>     \"\"\"\n>     remove_vowels is a function that takes string and returns string without vowels.\n>     >>> remove_vowels('')\n>     ''\n>     >>> remove_vowels(\"abcdef\\nghijklm\")\n>     'bcdf\\nghjklm'\n>     >>> remove_vowels('abcdef')\n>     'bcdf'\n>     >>> remove_vowels('aaaaa')\n>     ''\n>     >>> remove_vowels('aaBAA')\n>     'B'\n>     >>> remove_vowels('zbcd')\n>     'zbcd'\n>     \"\"\"\n>     return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "coverage": "> def remove_vowels(text):\n>     \"\"\"\n>     remove_vowels is a function that takes string and returns string without vowels.\n>     >>> remove_vowels('')\n>     ''\n>     >>> remove_vowels(\"abcdef\\nghijklm\")\n>     'bcdf\\nghjklm'\n>     >>> remove_vowels('abcdef')\n>     'bcdf'\n>     >>> remove_vowels('aaaaa')\n>     ''\n>     >>> remove_vowels('aaBAA')\n>     'B'\n>     >>> remove_vowels('zbcd')\n>     'zbcd'\n>     \"\"\"\n>     return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "233", "test": "def test():\n        assert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'", "coverage_executed": "> def remove_vowels(text):\n>     \"\"\"\n>     remove_vowels is a function that takes string and returns string without vowels.\n>     >>> remove_vowels('')\n>     ''\n>     >>> remove_vowels(\"abcdef\\nghijklm\")\n>     'bcdf\\nghjklm'\n>     >>> remove_vowels('abcdef')\n>     'bcdf'\n>     >>> remove_vowels('aaaaa')\n>     ''\n>     >>> remove_vowels('aaBAA')\n>     'B'\n>     >>> remove_vowels('zbcd')\n>     'zbcd'\n>     \"\"\"\n>     return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "coverage": "> def remove_vowels(text):\n>     \"\"\"\n>     remove_vowels is a function that takes string and returns string without vowels.\n>     >>> remove_vowels('')\n>     ''\n>     >>> remove_vowels(\"abcdef\\nghijklm\")\n>     'bcdf\\nghjklm'\n>     >>> remove_vowels('abcdef')\n>     'bcdf'\n>     >>> remove_vowels('aaaaa')\n>     ''\n>     >>> remove_vowels('aaBAA')\n>     'B'\n>     >>> remove_vowels('zbcd')\n>     'zbcd'\n>     \"\"\"\n>     return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "234", "test": "def test():\n        assert remove_vowels('fedcba') == 'fdcb'", "coverage_executed": "> def remove_vowels(text):\n>     \"\"\"\n>     remove_vowels is a function that takes string and returns string without vowels.\n>     >>> remove_vowels('')\n>     ''\n>     >>> remove_vowels(\"abcdef\\nghijklm\")\n>     'bcdf\\nghjklm'\n>     >>> remove_vowels('abcdef')\n>     'bcdf'\n>     >>> remove_vowels('aaaaa')\n>     ''\n>     >>> remove_vowels('aaBAA')\n>     'B'\n>     >>> remove_vowels('zbcd')\n>     'zbcd'\n>     \"\"\"\n>     return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "coverage": "> def remove_vowels(text):\n>     \"\"\"\n>     remove_vowels is a function that takes string and returns string without vowels.\n>     >>> remove_vowels('')\n>     ''\n>     >>> remove_vowels(\"abcdef\\nghijklm\")\n>     'bcdf\\nghjklm'\n>     >>> remove_vowels('abcdef')\n>     'bcdf'\n>     >>> remove_vowels('aaaaa')\n>     ''\n>     >>> remove_vowels('aaBAA')\n>     'B'\n>     >>> remove_vowels('zbcd')\n>     'zbcd'\n>     \"\"\"\n>     return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "235", "test": "def test():\n        assert remove_vowels('eeeee') == ''", "coverage_executed": "> def remove_vowels(text):\n>     \"\"\"\n>     remove_vowels is a function that takes string and returns string without vowels.\n>     >>> remove_vowels('')\n>     ''\n>     >>> remove_vowels(\"abcdef\\nghijklm\")\n>     'bcdf\\nghjklm'\n>     >>> remove_vowels('abcdef')\n>     'bcdf'\n>     >>> remove_vowels('aaaaa')\n>     ''\n>     >>> remove_vowels('aaBAA')\n>     'B'\n>     >>> remove_vowels('zbcd')\n>     'zbcd'\n>     \"\"\"\n>     return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "coverage": "> def remove_vowels(text):\n>     \"\"\"\n>     remove_vowels is a function that takes string and returns string without vowels.\n>     >>> remove_vowels('')\n>     ''\n>     >>> remove_vowels(\"abcdef\\nghijklm\")\n>     'bcdf\\nghjklm'\n>     >>> remove_vowels('abcdef')\n>     'bcdf'\n>     >>> remove_vowels('aaaaa')\n>     ''\n>     >>> remove_vowels('aaBAA')\n>     'B'\n>     >>> remove_vowels('zbcd')\n>     'zbcd'\n>     \"\"\"\n>     return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "237", "test": "def test():\n        assert remove_vowels('EcBOO') == 'cB'", "coverage_executed": "> def remove_vowels(text):\n>     \"\"\"\n>     remove_vowels is a function that takes string and returns string without vowels.\n>     >>> remove_vowels('')\n>     ''\n>     >>> remove_vowels(\"abcdef\\nghijklm\")\n>     'bcdf\\nghjklm'\n>     >>> remove_vowels('abcdef')\n>     'bcdf'\n>     >>> remove_vowels('aaaaa')\n>     ''\n>     >>> remove_vowels('aaBAA')\n>     'B'\n>     >>> remove_vowels('zbcd')\n>     'zbcd'\n>     \"\"\"\n>     return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "coverage": "> def remove_vowels(text):\n>     \"\"\"\n>     remove_vowels is a function that takes string and returns string without vowels.\n>     >>> remove_vowels('')\n>     ''\n>     >>> remove_vowels(\"abcdef\\nghijklm\")\n>     'bcdf\\nghjklm'\n>     >>> remove_vowels('abcdef')\n>     'bcdf'\n>     >>> remove_vowels('aaaaa')\n>     ''\n>     >>> remove_vowels('aaBAA')\n>     'B'\n>     >>> remove_vowels('zbcd')\n>     'zbcd'\n>     \"\"\"\n>     return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "236", "test": "def test():\n        assert remove_vowels('acBAA') == 'cB'", "coverage_executed": "> def remove_vowels(text):\n>     \"\"\"\n>     remove_vowels is a function that takes string and returns string without vowels.\n>     >>> remove_vowels('')\n>     ''\n>     >>> remove_vowels(\"abcdef\\nghijklm\")\n>     'bcdf\\nghjklm'\n>     >>> remove_vowels('abcdef')\n>     'bcdf'\n>     >>> remove_vowels('aaaaa')\n>     ''\n>     >>> remove_vowels('aaBAA')\n>     'B'\n>     >>> remove_vowels('zbcd')\n>     'zbcd'\n>     \"\"\"\n>     return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "coverage": "> def remove_vowels(text):\n>     \"\"\"\n>     remove_vowels is a function that takes string and returns string without vowels.\n>     >>> remove_vowels('')\n>     ''\n>     >>> remove_vowels(\"abcdef\\nghijklm\")\n>     'bcdf\\nghjklm'\n>     >>> remove_vowels('abcdef')\n>     'bcdf'\n>     >>> remove_vowels('aaaaa')\n>     ''\n>     >>> remove_vowels('aaBAA')\n>     'B'\n>     >>> remove_vowels('zbcd')\n>     'zbcd'\n>     \"\"\"\n>     return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}