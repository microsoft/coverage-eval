{"problem_id": 79, "problem": "filter_integers", "method": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]", "tests": [{"test_id": "93", "test": "def test():\n        assert filter_integers([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]", "coverage_executed": "> def filter_integers(values: List[Any]) -> List[int]:\n>     \"\"\" Filter given list of any python values only for integers\n>     >>> filter_integers(['a', 3.14, 5])\n>     [5]\n>     >>> filter_integers([1, 2, 3, 'abc', {}, []])\n>     [1, 2, 3]\n>     \"\"\"\n>     return [x for x in values if isinstance(x, int)]", "coverage": "> def filter_integers(values: List[Any]) -> List[int]:\n>     \"\"\" Filter given list of any python values only for integers\n>     >>> filter_integers(['a', 3.14, 5])\n>     [5]\n>     >>> filter_integers([1, 2, 3, 'abc', {}, []])\n>     [1, 2, 3]\n>     \"\"\"\n>     return [x for x in values if isinstance(x, int)]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "92", "test": "def test():\n        assert filter_integers([]) == []", "coverage_executed": "> def filter_integers(values: List[Any]) -> List[int]:\n>     \"\"\" Filter given list of any python values only for integers\n>     >>> filter_integers(['a', 3.14, 5])\n>     [5]\n>     >>> filter_integers([1, 2, 3, 'abc', {}, []])\n>     [1, 2, 3]\n>     \"\"\"\n>     return [x for x in values if isinstance(x, int)]", "coverage": "> def filter_integers(values: List[Any]) -> List[int]:\n>     \"\"\" Filter given list of any python values only for integers\n>     >>> filter_integers(['a', 3.14, 5])\n>     [5]\n>     >>> filter_integers([1, 2, 3, 'abc', {}, []])\n>     [1, 2, 3]\n>     \"\"\"\n>     return [x for x in values if isinstance(x, int)]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "94", "test": "def test():\n        assert filter_integers([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]", "coverage_executed": "> def filter_integers(values: List[Any]) -> List[int]:\n>     \"\"\" Filter given list of any python values only for integers\n>     >>> filter_integers(['a', 3.14, 5])\n>     [5]\n>     >>> filter_integers([1, 2, 3, 'abc', {}, []])\n>     [1, 2, 3]\n>     \"\"\"\n>     return [x for x in values if isinstance(x, int)]", "coverage": "> def filter_integers(values: List[Any]) -> List[int]:\n>     \"\"\" Filter given list of any python values only for integers\n>     >>> filter_integers(['a', 3.14, 5])\n>     [5]\n>     >>> filter_integers([1, 2, 3, 'abc', {}, []])\n>     [1, 2, 3]\n>     \"\"\"\n>     return [x for x in values if isinstance(x, int)]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}]}