{"problem_id": 91, "problem": "closest_integer", "method": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    from math import floor, ceil\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n    return res", "tests": [{"test_id": "623", "test": "def test():\n        assert closest_integer(\"10\") == 10, \"Test 1\"", "coverage_executed": "> def closest_integer(value):\n>     '''\n>     Create a function that takes a value (string) representing a number\n>     and returns the closest integer to it. If the number is equidistant\n>     from two integers, round it away from zero.\n>     Examples\n>     >>> closest_integer(\"10\")\n>     10\n>     >>> closest_integer(\"15.3\")\n>     15\n>     Note:\n>     Rounding away from zero means that if the given number is equidistant\n>     from two integers, the one you should return is the one that is the\n>     farthest from zero. For example closest_integer(\"14.5\") should\n>     return 15 and closest_integer(\"-14.5\") should return -15.\n>     '''\n>     from math import floor, ceil\n>     if value.count('.') == 1:\n          # remove trailing zeros\n\n\n>     num = float(value)\n>     if value[-2:] == '.5':\n\n\n\n\n>     elif len(value) > 0:\n>         res = int(round(num))\n\n\n>     return res", "coverage": "> def closest_integer(value):\n>     '''\n>     Create a function that takes a value (string) representing a number\n>     and returns the closest integer to it. If the number is equidistant\n>     from two integers, round it away from zero.\n>     Examples\n>     >>> closest_integer(\"10\")\n>     10\n>     >>> closest_integer(\"15.3\")\n>     15\n>     Note:\n>     Rounding away from zero means that if the given number is equidistant\n>     from two integers, the one you should return is the one that is the\n>     farthest from zero. For example closest_integer(\"14.5\") should\n>     return 15 and closest_integer(\"-14.5\") should return -15.\n>     '''\n>     from math import floor, ceil\n>     if value.count('.') == 1:\n          # remove trailing zeros\n!         while (value[-1] == '0'):\n!             value = value[:-1]\n>     num = float(value)\n>     if value[-2:] == '.5':\n!         if num > 0:\n!             res = ceil(num)\n!         else:\n!             res = floor(num)\n>     elif len(value) > 0:\n>         res = int(round(num))\n!     else:\n!         res = 0\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", "!", "!", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "!", "?", ">", "!", "!", "!", "!", ">", ">", "!", "!", "?"]}, {"test_id": "627", "test": "def test():\n        assert closest_integer(\"0\") == 0, \"Test 0\"", "coverage_executed": "> def closest_integer(value):\n>     '''\n>     Create a function that takes a value (string) representing a number\n>     and returns the closest integer to it. If the number is equidistant\n>     from two integers, round it away from zero.\n>     Examples\n>     >>> closest_integer(\"10\")\n>     10\n>     >>> closest_integer(\"15.3\")\n>     15\n>     Note:\n>     Rounding away from zero means that if the given number is equidistant\n>     from two integers, the one you should return is the one that is the\n>     farthest from zero. For example closest_integer(\"14.5\") should\n>     return 15 and closest_integer(\"-14.5\") should return -15.\n>     '''\n>     from math import floor, ceil\n>     if value.count('.') == 1:\n          # remove trailing zeros\n\n\n>     num = float(value)\n>     if value[-2:] == '.5':\n\n\n\n\n>     elif len(value) > 0:\n>         res = int(round(num))\n\n\n>     return res", "coverage": "> def closest_integer(value):\n>     '''\n>     Create a function that takes a value (string) representing a number\n>     and returns the closest integer to it. If the number is equidistant\n>     from two integers, round it away from zero.\n>     Examples\n>     >>> closest_integer(\"10\")\n>     10\n>     >>> closest_integer(\"15.3\")\n>     15\n>     Note:\n>     Rounding away from zero means that if the given number is equidistant\n>     from two integers, the one you should return is the one that is the\n>     farthest from zero. For example closest_integer(\"14.5\") should\n>     return 15 and closest_integer(\"-14.5\") should return -15.\n>     '''\n>     from math import floor, ceil\n>     if value.count('.') == 1:\n          # remove trailing zeros\n!         while (value[-1] == '0'):\n!             value = value[:-1]\n>     num = float(value)\n>     if value[-2:] == '.5':\n!         if num > 0:\n!             res = ceil(num)\n!         else:\n!             res = floor(num)\n>     elif len(value) > 0:\n>         res = int(round(num))\n!     else:\n!         res = 0\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", "!", "!", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "!", "?", ">", "!", "!", "!", "!", ">", ">", "!", "!", "?"]}, {"test_id": "626", "test": "def test():\n        assert closest_integer(\"15.3\") == 15, \"Test 3\"", "coverage_executed": "> def closest_integer(value):\n>     '''\n>     Create a function that takes a value (string) representing a number\n>     and returns the closest integer to it. If the number is equidistant\n>     from two integers, round it away from zero.\n>     Examples\n>     >>> closest_integer(\"10\")\n>     10\n>     >>> closest_integer(\"15.3\")\n>     15\n>     Note:\n>     Rounding away from zero means that if the given number is equidistant\n>     from two integers, the one you should return is the one that is the\n>     farthest from zero. For example closest_integer(\"14.5\") should\n>     return 15 and closest_integer(\"-14.5\") should return -15.\n>     '''\n>     from math import floor, ceil\n>     if value.count('.') == 1:\n          # remove trailing zeros\n>         while (value[-1] == '0'):\n\n>     num = float(value)\n>     if value[-2:] == '.5':\n\n\n\n\n>     elif len(value) > 0:\n>         res = int(round(num))\n\n\n>     return res", "coverage": "> def closest_integer(value):\n>     '''\n>     Create a function that takes a value (string) representing a number\n>     and returns the closest integer to it. If the number is equidistant\n>     from two integers, round it away from zero.\n>     Examples\n>     >>> closest_integer(\"10\")\n>     10\n>     >>> closest_integer(\"15.3\")\n>     15\n>     Note:\n>     Rounding away from zero means that if the given number is equidistant\n>     from two integers, the one you should return is the one that is the\n>     farthest from zero. For example closest_integer(\"14.5\") should\n>     return 15 and closest_integer(\"-14.5\") should return -15.\n>     '''\n>     from math import floor, ceil\n>     if value.count('.') == 1:\n          # remove trailing zeros\n>         while (value[-1] == '0'):\n!             value = value[:-1]\n>     num = float(value)\n>     if value[-2:] == '.5':\n!         if num > 0:\n!             res = ceil(num)\n!         else:\n!             res = floor(num)\n>     elif len(value) > 0:\n>         res = int(round(num))\n!     else:\n!         res = 0\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "?", ">", "!", "!", "!", "!", ">", ">", "!", "!", "?"]}, {"test_id": "624", "test": "def test():\n        assert closest_integer(\"14.5\") == 15, \"Test 2\"", "coverage_executed": "> def closest_integer(value):\n>     '''\n>     Create a function that takes a value (string) representing a number\n>     and returns the closest integer to it. If the number is equidistant\n>     from two integers, round it away from zero.\n>     Examples\n>     >>> closest_integer(\"10\")\n>     10\n>     >>> closest_integer(\"15.3\")\n>     15\n>     Note:\n>     Rounding away from zero means that if the given number is equidistant\n>     from two integers, the one you should return is the one that is the\n>     farthest from zero. For example closest_integer(\"14.5\") should\n>     return 15 and closest_integer(\"-14.5\") should return -15.\n>     '''\n>     from math import floor, ceil\n>     if value.count('.') == 1:\n          # remove trailing zeros\n>         while (value[-1] == '0'):\n\n>     num = float(value)\n>     if value[-2:] == '.5':\n>         if num > 0:\n>             res = ceil(num)\n\n\n\n\n\n\n>     return res", "coverage": "> def closest_integer(value):\n>     '''\n>     Create a function that takes a value (string) representing a number\n>     and returns the closest integer to it. If the number is equidistant\n>     from two integers, round it away from zero.\n>     Examples\n>     >>> closest_integer(\"10\")\n>     10\n>     >>> closest_integer(\"15.3\")\n>     15\n>     Note:\n>     Rounding away from zero means that if the given number is equidistant\n>     from two integers, the one you should return is the one that is the\n>     farthest from zero. For example closest_integer(\"14.5\") should\n>     return 15 and closest_integer(\"-14.5\") should return -15.\n>     '''\n>     from math import floor, ceil\n>     if value.count('.') == 1:\n          # remove trailing zeros\n>         while (value[-1] == '0'):\n!             value = value[:-1]\n>     num = float(value)\n>     if value[-2:] == '.5':\n>         if num > 0:\n>             res = ceil(num)\n!         else:\n!             res = floor(num)\n!     elif len(value) > 0:\n!         res = int(round(num))\n!     else:\n!         res = 0\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "?", ">", ">", ">", "!", "!", "!", "!", "!", "!", "?"]}, {"test_id": "625", "test": "def test():\n        assert closest_integer(\"-15.5\") == -16, \"Test 3\"", "coverage_executed": "> def closest_integer(value):\n>     '''\n>     Create a function that takes a value (string) representing a number\n>     and returns the closest integer to it. If the number is equidistant\n>     from two integers, round it away from zero.\n>     Examples\n>     >>> closest_integer(\"10\")\n>     10\n>     >>> closest_integer(\"15.3\")\n>     15\n>     Note:\n>     Rounding away from zero means that if the given number is equidistant\n>     from two integers, the one you should return is the one that is the\n>     farthest from zero. For example closest_integer(\"14.5\") should\n>     return 15 and closest_integer(\"-14.5\") should return -15.\n>     '''\n>     from math import floor, ceil\n>     if value.count('.') == 1:\n          # remove trailing zeros\n>         while (value[-1] == '0'):\n\n>     num = float(value)\n>     if value[-2:] == '.5':\n>         if num > 0:\n\n>         else:\n>             res = floor(num)\n\n\n\n\n>     return res", "coverage": "> def closest_integer(value):\n>     '''\n>     Create a function that takes a value (string) representing a number\n>     and returns the closest integer to it. If the number is equidistant\n>     from two integers, round it away from zero.\n>     Examples\n>     >>> closest_integer(\"10\")\n>     10\n>     >>> closest_integer(\"15.3\")\n>     15\n>     Note:\n>     Rounding away from zero means that if the given number is equidistant\n>     from two integers, the one you should return is the one that is the\n>     farthest from zero. For example closest_integer(\"14.5\") should\n>     return 15 and closest_integer(\"-14.5\") should return -15.\n>     '''\n>     from math import floor, ceil\n>     if value.count('.') == 1:\n          # remove trailing zeros\n>         while (value[-1] == '0'):\n!             value = value[:-1]\n>     num = float(value)\n>     if value[-2:] == '.5':\n>         if num > 0:\n!             res = ceil(num)\n>         else:\n>             res = floor(num)\n!     elif len(value) > 0:\n!         res = int(round(num))\n!     else:\n!         res = 0\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "?", ">", ">", "!", ">", ">", "!", "!", "!", "!", "?"]}]}