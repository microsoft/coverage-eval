{"problem_id": 84, "problem": "modp", "method": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret", "tests": [{"test_id": "228", "test": "def test():\n        assert modp(100, 101) == 1", "coverage_executed": "> def modp(n: int, p: int):\n>     \"\"\"Return 2^n modulo p (be aware of numerics).\n>     >>> modp(3, 5)\n>     3\n>     >>> modp(1101, 101)\n>     2\n>     >>> modp(0, 101)\n>     1\n>     >>> modp(3, 11)\n>     8\n>     >>> modp(100, 101)\n>     1\n>     \"\"\"\n>     ret = 1\n>     for i in range(n):\n>         ret = (2 * ret) % p\n>     return ret", "coverage": "> def modp(n: int, p: int):\n>     \"\"\"Return 2^n modulo p (be aware of numerics).\n>     >>> modp(3, 5)\n>     3\n>     >>> modp(1101, 101)\n>     2\n>     >>> modp(0, 101)\n>     1\n>     >>> modp(3, 11)\n>     8\n>     >>> modp(100, 101)\n>     1\n>     \"\"\"\n>     ret = 1\n>     for i in range(n):\n>         ret = (2 * ret) % p\n>     return ret", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?"]}, {"test_id": "229", "test": "def test():\n        assert modp(30, 5) == 4", "coverage_executed": "> def modp(n: int, p: int):\n>     \"\"\"Return 2^n modulo p (be aware of numerics).\n>     >>> modp(3, 5)\n>     3\n>     >>> modp(1101, 101)\n>     2\n>     >>> modp(0, 101)\n>     1\n>     >>> modp(3, 11)\n>     8\n>     >>> modp(100, 101)\n>     1\n>     \"\"\"\n>     ret = 1\n>     for i in range(n):\n>         ret = (2 * ret) % p\n>     return ret", "coverage": "> def modp(n: int, p: int):\n>     \"\"\"Return 2^n modulo p (be aware of numerics).\n>     >>> modp(3, 5)\n>     3\n>     >>> modp(1101, 101)\n>     2\n>     >>> modp(0, 101)\n>     1\n>     >>> modp(3, 11)\n>     8\n>     >>> modp(100, 101)\n>     1\n>     \"\"\"\n>     ret = 1\n>     for i in range(n):\n>         ret = (2 * ret) % p\n>     return ret", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?"]}, {"test_id": "226", "test": "def test():\n        assert modp(0, 101) == 1", "coverage_executed": "> def modp(n: int, p: int):\n>     \"\"\"Return 2^n modulo p (be aware of numerics).\n>     >>> modp(3, 5)\n>     3\n>     >>> modp(1101, 101)\n>     2\n>     >>> modp(0, 101)\n>     1\n>     >>> modp(3, 11)\n>     8\n>     >>> modp(100, 101)\n>     1\n>     \"\"\"\n>     ret = 1\n>     for i in range(n):\n\n>     return ret", "coverage": "> def modp(n: int, p: int):\n>     \"\"\"Return 2^n modulo p (be aware of numerics).\n>     >>> modp(3, 5)\n>     3\n>     >>> modp(1101, 101)\n>     2\n>     >>> modp(0, 101)\n>     1\n>     >>> modp(3, 11)\n>     8\n>     >>> modp(100, 101)\n>     1\n>     \"\"\"\n>     ret = 1\n>     for i in range(n):\n!         ret = (2 * ret) % p\n>     return ret", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?"]}, {"test_id": "227", "test": "def test():\n        assert modp(3, 11) == 8", "coverage_executed": "> def modp(n: int, p: int):\n>     \"\"\"Return 2^n modulo p (be aware of numerics).\n>     >>> modp(3, 5)\n>     3\n>     >>> modp(1101, 101)\n>     2\n>     >>> modp(0, 101)\n>     1\n>     >>> modp(3, 11)\n>     8\n>     >>> modp(100, 101)\n>     1\n>     \"\"\"\n>     ret = 1\n>     for i in range(n):\n>         ret = (2 * ret) % p\n>     return ret", "coverage": "> def modp(n: int, p: int):\n>     \"\"\"Return 2^n modulo p (be aware of numerics).\n>     >>> modp(3, 5)\n>     3\n>     >>> modp(1101, 101)\n>     2\n>     >>> modp(0, 101)\n>     1\n>     >>> modp(3, 11)\n>     8\n>     >>> modp(100, 101)\n>     1\n>     \"\"\"\n>     ret = 1\n>     for i in range(n):\n>         ret = (2 * ret) % p\n>     return ret", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?"]}, {"test_id": "230", "test": "def test():\n        assert modp(31, 5) == 3", "coverage_executed": "> def modp(n: int, p: int):\n>     \"\"\"Return 2^n modulo p (be aware of numerics).\n>     >>> modp(3, 5)\n>     3\n>     >>> modp(1101, 101)\n>     2\n>     >>> modp(0, 101)\n>     1\n>     >>> modp(3, 11)\n>     8\n>     >>> modp(100, 101)\n>     1\n>     \"\"\"\n>     ret = 1\n>     for i in range(n):\n>         ret = (2 * ret) % p\n>     return ret", "coverage": "> def modp(n: int, p: int):\n>     \"\"\"Return 2^n modulo p (be aware of numerics).\n>     >>> modp(3, 5)\n>     3\n>     >>> modp(1101, 101)\n>     2\n>     >>> modp(0, 101)\n>     1\n>     >>> modp(3, 11)\n>     8\n>     >>> modp(100, 101)\n>     1\n>     \"\"\"\n>     ret = 1\n>     for i in range(n):\n>         ret = (2 * ret) % p\n>     return ret", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?"]}, {"test_id": "225", "test": "def test():\n        assert modp(1101, 101) == 2", "coverage_executed": "> def modp(n: int, p: int):\n>     \"\"\"Return 2^n modulo p (be aware of numerics).\n>     >>> modp(3, 5)\n>     3\n>     >>> modp(1101, 101)\n>     2\n>     >>> modp(0, 101)\n>     1\n>     >>> modp(3, 11)\n>     8\n>     >>> modp(100, 101)\n>     1\n>     \"\"\"\n>     ret = 1\n>     for i in range(n):\n>         ret = (2 * ret) % p\n>     return ret", "coverage": "> def modp(n: int, p: int):\n>     \"\"\"Return 2^n modulo p (be aware of numerics).\n>     >>> modp(3, 5)\n>     3\n>     >>> modp(1101, 101)\n>     2\n>     >>> modp(0, 101)\n>     1\n>     >>> modp(3, 11)\n>     8\n>     >>> modp(100, 101)\n>     1\n>     \"\"\"\n>     ret = 1\n>     for i in range(n):\n>         ret = (2 * ret) % p\n>     return ret", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?"]}, {"test_id": "224", "test": "def test():\n        assert modp(3, 5) == 3", "coverage_executed": "> def modp(n: int, p: int):\n>     \"\"\"Return 2^n modulo p (be aware of numerics).\n>     >>> modp(3, 5)\n>     3\n>     >>> modp(1101, 101)\n>     2\n>     >>> modp(0, 101)\n>     1\n>     >>> modp(3, 11)\n>     8\n>     >>> modp(100, 101)\n>     1\n>     \"\"\"\n>     ret = 1\n>     for i in range(n):\n>         ret = (2 * ret) % p\n>     return ret", "coverage": "> def modp(n: int, p: int):\n>     \"\"\"Return 2^n modulo p (be aware of numerics).\n>     >>> modp(3, 5)\n>     3\n>     >>> modp(1101, 101)\n>     2\n>     >>> modp(0, 101)\n>     1\n>     >>> modp(3, 11)\n>     8\n>     >>> modp(100, 101)\n>     1\n>     \"\"\"\n>     ret = 1\n>     for i in range(n):\n>         ret = (2 * ret) % p\n>     return ret", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?"]}]}