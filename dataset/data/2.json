{"problem_id": 2, "problem": "is_nested", "method": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2", "tests": [{"test_id": "910", "test": "def test():\n        assert is_nested('[[][]]') == True", "coverage_executed": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "907", "test": "def test():\n        assert is_nested('[[]') == False", "coverage_executed": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "906", "test": "def test():\n        assert is_nested('[][][[]]') == True", "coverage_executed": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "911", "test": "def test():\n        assert is_nested('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n\n\n\n\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n\n\n\n>     return cnt >= 2", "coverage": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n!         if string[i] == '[':\n!             opening_bracket_index.append(i)\n!         else:\n!             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n!         if i < l and idx < closing_bracket_index[i]:\n!             cnt += 1\n!             i += 1\n>     return cnt >= 2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">", ">", ">", ">", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "!", "!", "!", "?", "?", "?", "?", ">", "!", "!", "!", "?"]}, {"test_id": "913", "test": "def test():\n        assert is_nested(']]]]]]]]') == False", "coverage_executed": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n\n\n\n>     return cnt >= 2", "coverage": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n!             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n!         if i < l and idx < closing_bracket_index[i]:\n!             cnt += 1\n!             i += 1\n>     return cnt >= 2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", ">", ">", "?", "?", "?", "?", ">", "!", "!", "!", "?"]}, {"test_id": "904", "test": "def test():\n        assert is_nested('[[[[]]]]') == True", "coverage_executed": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "905", "test": "def test():\n        assert is_nested('[]]]]]]]]]]') == False", "coverage_executed": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "912", "test": "def test():\n        assert is_nested('[[[[[[[[') == False", "coverage_executed": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n\n\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n\n\n>     return cnt >= 2", "coverage": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n!         else:\n!             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n!             cnt += 1\n!             i += 1\n>     return cnt >= 2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", "?", "?", "?", "?", ">", ">", "!", "!", "?"]}, {"test_id": "901", "test": "def test():\n        assert is_nested('[]]]]]]][[[[[]') == False", "coverage_executed": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "900", "test": "def test():\n        assert is_nested('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "902", "test": "def test():\n        assert is_nested('[][]') == False", "coverage_executed": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "903", "test": "def test():\n        assert is_nested(('[]')) == False", "coverage_executed": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "909", "test": "def test():\n        assert is_nested('[[]][[') == True", "coverage_executed": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "908", "test": "def test():\n        assert is_nested('[]]') == False", "coverage_executed": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage": "> def is_nested(string):\n>     '''\n>     Create a function that takes a string as input which contains only square brackets.\n>     The function should return True if and only if there is a valid subsequence of brackets \n>     where at least one bracket in the subsequence is nested.\n>     is_nested('[[]]') \u279e True\n>     is_nested('[]]]]]]][[[[[]') \u279e False\n>     is_nested('[][]') \u279e False\n>     is_nested('[]') \u279e False\n>     is_nested('[[][]]') \u279e True\n>     is_nested('[[]][[') \u279e True\n>     '''\n>     opening_bracket_index = []\n>     closing_bracket_index = []\n>     for i in range(len(string)):\n>         if string[i] == '[':\n>             opening_bracket_index.append(i)\n>         else:\n>             closing_bracket_index.append(i)\n>     closing_bracket_index.reverse()\n>     cnt = 0\n>     i = 0\n>     l = len(closing_bracket_index)\n>     for idx in opening_bracket_index:\n>         if i < l and idx < closing_bracket_index[i]:\n>             cnt += 1\n>             i += 1\n>     return cnt >= 2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}]}