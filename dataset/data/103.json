{"problem_id": 103, "problem": "make_a_pile", "method": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    return [n + 2*i for i in range(n)]", "tests": [{"test_id": "631", "test": "def test():\n        assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]", "coverage_executed": "> def make_a_pile(n):\n>     \"\"\"\n>     Given a positive integer n, you have to make a pile of n levels of stones.\n>     The first level has n stones.\n>     The number of stones in the next level is:\n>         - the next odd number if n is odd.\n>         - the next even number if n is even.\n>     Return the number of stones in each level in a list, where element at index\n>     i represents the number of stones in the level (i+1).\n>     Examples:\n>     >>> make_a_pile(3)\n>     [3, 5, 7]\n>     \"\"\"\n>     return [n + 2*i for i in range(n)]", "coverage": "> def make_a_pile(n):\n>     \"\"\"\n>     Given a positive integer n, you have to make a pile of n levels of stones.\n>     The first level has n stones.\n>     The number of stones in the next level is:\n>         - the next odd number if n is odd.\n>         - the next even number if n is even.\n>     Return the number of stones in each level in a list, where element at index\n>     i represents the number of stones in the level (i+1).\n>     Examples:\n>     >>> make_a_pile(3)\n>     [3, 5, 7]\n>     \"\"\"\n>     return [n + 2*i for i in range(n)]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "630", "test": "def test():\n        assert make_a_pile(5) == [5, 7, 9, 11, 13]", "coverage_executed": "> def make_a_pile(n):\n>     \"\"\"\n>     Given a positive integer n, you have to make a pile of n levels of stones.\n>     The first level has n stones.\n>     The number of stones in the next level is:\n>         - the next odd number if n is odd.\n>         - the next even number if n is even.\n>     Return the number of stones in each level in a list, where element at index\n>     i represents the number of stones in the level (i+1).\n>     Examples:\n>     >>> make_a_pile(3)\n>     [3, 5, 7]\n>     \"\"\"\n>     return [n + 2*i for i in range(n)]", "coverage": "> def make_a_pile(n):\n>     \"\"\"\n>     Given a positive integer n, you have to make a pile of n levels of stones.\n>     The first level has n stones.\n>     The number of stones in the next level is:\n>         - the next odd number if n is odd.\n>         - the next even number if n is even.\n>     Return the number of stones in each level in a list, where element at index\n>     i represents the number of stones in the level (i+1).\n>     Examples:\n>     >>> make_a_pile(3)\n>     [3, 5, 7]\n>     \"\"\"\n>     return [n + 2*i for i in range(n)]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "632", "test": "def test():\n        assert make_a_pile(8) == [8, 10, 12, 14, 16, 18, 20, 22]", "coverage_executed": "> def make_a_pile(n):\n>     \"\"\"\n>     Given a positive integer n, you have to make a pile of n levels of stones.\n>     The first level has n stones.\n>     The number of stones in the next level is:\n>         - the next odd number if n is odd.\n>         - the next even number if n is even.\n>     Return the number of stones in each level in a list, where element at index\n>     i represents the number of stones in the level (i+1).\n>     Examples:\n>     >>> make_a_pile(3)\n>     [3, 5, 7]\n>     \"\"\"\n>     return [n + 2*i for i in range(n)]", "coverage": "> def make_a_pile(n):\n>     \"\"\"\n>     Given a positive integer n, you have to make a pile of n levels of stones.\n>     The first level has n stones.\n>     The number of stones in the next level is:\n>         - the next odd number if n is odd.\n>         - the next even number if n is even.\n>     Return the number of stones in each level in a list, where element at index\n>     i represents the number of stones in the level (i+1).\n>     Examples:\n>     >>> make_a_pile(3)\n>     [3, 5, 7]\n>     \"\"\"\n>     return [n + 2*i for i in range(n)]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "633", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def make_a_pile(n):\n>     \"\"\"\n>     Given a positive integer n, you have to make a pile of n levels of stones.\n>     The first level has n stones.\n>     The number of stones in the next level is:\n>         - the next odd number if n is odd.\n>         - the next even number if n is even.\n>     Return the number of stones in each level in a list, where element at index\n>     i represents the number of stones in the level (i+1).\n>     Examples:\n>     >>> make_a_pile(3)\n>     [3, 5, 7]\n>     \"\"\"\n", "coverage": "> def make_a_pile(n):\n>     \"\"\"\n>     Given a positive integer n, you have to make a pile of n levels of stones.\n>     The first level has n stones.\n>     The number of stones in the next level is:\n>         - the next odd number if n is odd.\n>         - the next even number if n is even.\n>     Return the number of stones in each level in a list, where element at index\n>     i represents the number of stones in the level (i+1).\n>     Examples:\n>     >>> make_a_pile(3)\n>     [3, 5, 7]\n>     \"\"\"\n!     return [n + 2*i for i in range(n)]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "628", "test": "def test():\n        assert make_a_pile(3) == [3, 5, 7], \"Test 3\"", "coverage_executed": "> def make_a_pile(n):\n>     \"\"\"\n>     Given a positive integer n, you have to make a pile of n levels of stones.\n>     The first level has n stones.\n>     The number of stones in the next level is:\n>         - the next odd number if n is odd.\n>         - the next even number if n is even.\n>     Return the number of stones in each level in a list, where element at index\n>     i represents the number of stones in the level (i+1).\n>     Examples:\n>     >>> make_a_pile(3)\n>     [3, 5, 7]\n>     \"\"\"\n>     return [n + 2*i for i in range(n)]", "coverage": "> def make_a_pile(n):\n>     \"\"\"\n>     Given a positive integer n, you have to make a pile of n levels of stones.\n>     The first level has n stones.\n>     The number of stones in the next level is:\n>         - the next odd number if n is odd.\n>         - the next even number if n is even.\n>     Return the number of stones in each level in a list, where element at index\n>     i represents the number of stones in the level (i+1).\n>     Examples:\n>     >>> make_a_pile(3)\n>     [3, 5, 7]\n>     \"\"\"\n>     return [n + 2*i for i in range(n)]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "629", "test": "def test():\n        assert make_a_pile(4) == [4,6,8,10], \"Test 4\"", "coverage_executed": "> def make_a_pile(n):\n>     \"\"\"\n>     Given a positive integer n, you have to make a pile of n levels of stones.\n>     The first level has n stones.\n>     The number of stones in the next level is:\n>         - the next odd number if n is odd.\n>         - the next even number if n is even.\n>     Return the number of stones in each level in a list, where element at index\n>     i represents the number of stones in the level (i+1).\n>     Examples:\n>     >>> make_a_pile(3)\n>     [3, 5, 7]\n>     \"\"\"\n>     return [n + 2*i for i in range(n)]", "coverage": "> def make_a_pile(n):\n>     \"\"\"\n>     Given a positive integer n, you have to make a pile of n levels of stones.\n>     The first level has n stones.\n>     The number of stones in the next level is:\n>         - the next odd number if n is odd.\n>         - the next even number if n is even.\n>     Return the number of stones in each level in a list, where element at index\n>     i represents the number of stones in the level (i+1).\n>     Examples:\n>     >>> make_a_pile(3)\n>     [3, 5, 7]\n>     \"\"\"\n>     return [n + 2*i for i in range(n)]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}