{"problem_id": 62, "problem": "largest_divisor", "method": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i", "tests": [{"test_id": "98", "test": "def test():\n        assert largest_divisor(3) == 1", "coverage_executed": "> def largest_divisor(n: int) -> int:\n>     \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>     >>> largest_divisor(15)\n>     5\n>     \"\"\"\n>     for i in reversed(range(n)):\n>         if n % i == 0:\n>             return i", "coverage": "> def largest_divisor(n: int) -> int:\n>     \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>     >>> largest_divisor(15)\n>     5\n>     \"\"\"\n>     for i in reversed(range(n)):\n>         if n % i == 0:\n>             return i", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", ">", ">", ">"]}, {"test_id": "99", "test": "def test():\n        assert largest_divisor(7) == 1", "coverage_executed": "> def largest_divisor(n: int) -> int:\n>     \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>     >>> largest_divisor(15)\n>     5\n>     \"\"\"\n>     for i in reversed(range(n)):\n>         if n % i == 0:\n>             return i", "coverage": "> def largest_divisor(n: int) -> int:\n>     \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>     >>> largest_divisor(15)\n>     5\n>     \"\"\"\n>     for i in reversed(range(n)):\n>         if n % i == 0:\n>             return i", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", ">", ">", ">"]}, {"test_id": "102", "test": "def test():\n        assert largest_divisor(49) == 7", "coverage_executed": "> def largest_divisor(n: int) -> int:\n>     \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>     >>> largest_divisor(15)\n>     5\n>     \"\"\"\n>     for i in reversed(range(n)):\n>         if n % i == 0:\n>             return i", "coverage": "> def largest_divisor(n: int) -> int:\n>     \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>     >>> largest_divisor(15)\n>     5\n>     \"\"\"\n>     for i in reversed(range(n)):\n>         if n % i == 0:\n>             return i", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", ">", ">", ">"]}, {"test_id": "101", "test": "def test():\n        assert largest_divisor(100) == 50", "coverage_executed": "> def largest_divisor(n: int) -> int:\n>     \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>     >>> largest_divisor(15)\n>     5\n>     \"\"\"\n>     for i in reversed(range(n)):\n>         if n % i == 0:\n>             return i", "coverage": "> def largest_divisor(n: int) -> int:\n>     \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>     >>> largest_divisor(15)\n>     5\n>     \"\"\"\n>     for i in reversed(range(n)):\n>         if n % i == 0:\n>             return i", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", ">", ">", ">"]}, {"test_id": "100", "test": "def test():\n        assert largest_divisor(10) == 5", "coverage_executed": "> def largest_divisor(n: int) -> int:\n>     \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>     >>> largest_divisor(15)\n>     5\n>     \"\"\"\n>     for i in reversed(range(n)):\n>         if n % i == 0:\n>             return i", "coverage": "> def largest_divisor(n: int) -> int:\n>     \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>     >>> largest_divisor(15)\n>     5\n>     \"\"\"\n>     for i in reversed(range(n)):\n>         if n % i == 0:\n>             return i", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", ">", ">", ">"]}]}