{"problem_id": 50, "problem": "longest", "method": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s", "tests": [{"test_id": "52", "test": "def test():\n        assert longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'", "coverage_executed": "> def longest(strings: List[str]) -> Optional[str]:\n>     \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n>     strings of the same length. Return None in case the input list is empty.\n>     >>> longest([])\n>     >>> longest(['a', 'b', 'c'])\n>     'a'\n>     >>> longest(['a', 'bb', 'ccc'])\n>     'ccc'\n>     \"\"\"\n>     if not strings:\n\n>     maxlen = max(len(x) for x in strings)\n>     for s in strings:\n>         if len(s) == maxlen:\n>             return s", "coverage": "> def longest(strings: List[str]) -> Optional[str]:\n>     \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n>     strings of the same length. Return None in case the input list is empty.\n>     >>> longest([])\n>     >>> longest(['a', 'b', 'c'])\n>     'a'\n>     >>> longest(['a', 'bb', 'ccc'])\n>     'ccc'\n>     \"\"\"\n>     if not strings:\n!         return None\n>     maxlen = max(len(x) for x in strings)\n>     for s in strings:\n>         if len(s) == maxlen:\n>             return s", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", ">"]}, {"test_id": "51", "test": "def test():\n        assert longest(['x', 'y', 'z']) == 'x'", "coverage_executed": "> def longest(strings: List[str]) -> Optional[str]:\n>     \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n>     strings of the same length. Return None in case the input list is empty.\n>     >>> longest([])\n>     >>> longest(['a', 'b', 'c'])\n>     'a'\n>     >>> longest(['a', 'bb', 'ccc'])\n>     'ccc'\n>     \"\"\"\n>     if not strings:\n\n>     maxlen = max(len(x) for x in strings)\n>     for s in strings:\n>         if len(s) == maxlen:\n>             return s", "coverage": "> def longest(strings: List[str]) -> Optional[str]:\n>     \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n>     strings of the same length. Return None in case the input list is empty.\n>     >>> longest([])\n>     >>> longest(['a', 'b', 'c'])\n>     'a'\n>     >>> longest(['a', 'bb', 'ccc'])\n>     'ccc'\n>     \"\"\"\n>     if not strings:\n!         return None\n>     maxlen = max(len(x) for x in strings)\n>     for s in strings:\n>         if len(s) == maxlen:\n>             return s", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", ">"]}, {"test_id": "50", "test": "def test():\n        assert longest([]) == None", "coverage_executed": "> def longest(strings: List[str]) -> Optional[str]:\n>     \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n>     strings of the same length. Return None in case the input list is empty.\n>     >>> longest([])\n>     >>> longest(['a', 'b', 'c'])\n>     'a'\n>     >>> longest(['a', 'bb', 'ccc'])\n>     'ccc'\n>     \"\"\"\n>     if not strings:\n>         return None\n\n\n\n", "coverage": "> def longest(strings: List[str]) -> Optional[str]:\n>     \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n>     strings of the same length. Return None in case the input list is empty.\n>     >>> longest([])\n>     >>> longest(['a', 'b', 'c'])\n>     'a'\n>     >>> longest(['a', 'bb', 'ccc'])\n>     'ccc'\n>     \"\"\"\n>     if not strings:\n>         return None\n!     maxlen = max(len(x) for x in strings)\n!     for s in strings:\n!         if len(s) == maxlen:\n!             return s", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?", "!", "!", "!"]}]}