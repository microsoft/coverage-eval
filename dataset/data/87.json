{"problem_id": 87, "problem": "digits", "method": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product", "tests": [{"test_id": "893", "test": "def test():\n        assert digits(5) == 5", "coverage_executed": "> def digits(n):\n>     \"\"\"Given a positive integer n, return the product of the odd digits.\n>     Return 0 if all digits are even.\n>     For example:\n>     digits(1)  == 1\n>     digits(4)  == 0\n>     digits(235) == 15\n>     \"\"\"\n>     product = 1\n>     odd_count = 0\n>     for digit in str(n):\n>         int_digit = int(digit)\n>         if int_digit%2 == 1:\n>             product= product*int_digit\n>             odd_count+=1\n>     if odd_count ==0:\n\n>     else:\n>         return product", "coverage": "> def digits(n):\n>     \"\"\"Given a positive integer n, return the product of the odd digits.\n>     Return 0 if all digits are even.\n>     For example:\n>     digits(1)  == 1\n>     digits(4)  == 0\n>     digits(235) == 15\n>     \"\"\"\n>     product = 1\n>     odd_count = 0\n>     for digit in str(n):\n>         int_digit = int(digit)\n>         if int_digit%2 == 1:\n>             product= product*int_digit\n>             odd_count+=1\n>     if odd_count ==0:\n!         return 0\n>     else:\n>         return product", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", ">", ">"]}, {"test_id": "896", "test": "def test():\n        assert digits(5014) == 5", "coverage_executed": "> def digits(n):\n>     \"\"\"Given a positive integer n, return the product of the odd digits.\n>     Return 0 if all digits are even.\n>     For example:\n>     digits(1)  == 1\n>     digits(4)  == 0\n>     digits(235) == 15\n>     \"\"\"\n>     product = 1\n>     odd_count = 0\n>     for digit in str(n):\n>         int_digit = int(digit)\n>         if int_digit%2 == 1:\n>             product= product*int_digit\n>             odd_count+=1\n>     if odd_count ==0:\n\n>     else:\n>         return product", "coverage": "> def digits(n):\n>     \"\"\"Given a positive integer n, return the product of the odd digits.\n>     Return 0 if all digits are even.\n>     For example:\n>     digits(1)  == 1\n>     digits(4)  == 0\n>     digits(235) == 15\n>     \"\"\"\n>     product = 1\n>     odd_count = 0\n>     for digit in str(n):\n>         int_digit = int(digit)\n>         if int_digit%2 == 1:\n>             product= product*int_digit\n>             odd_count+=1\n>     if odd_count ==0:\n!         return 0\n>     else:\n>         return product", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", ">", ">"]}, {"test_id": "897", "test": "def test():\n        assert digits(98765) == 315", "coverage_executed": "> def digits(n):\n>     \"\"\"Given a positive integer n, return the product of the odd digits.\n>     Return 0 if all digits are even.\n>     For example:\n>     digits(1)  == 1\n>     digits(4)  == 0\n>     digits(235) == 15\n>     \"\"\"\n>     product = 1\n>     odd_count = 0\n>     for digit in str(n):\n>         int_digit = int(digit)\n>         if int_digit%2 == 1:\n>             product= product*int_digit\n>             odd_count+=1\n>     if odd_count ==0:\n\n>     else:\n>         return product", "coverage": "> def digits(n):\n>     \"\"\"Given a positive integer n, return the product of the odd digits.\n>     Return 0 if all digits are even.\n>     For example:\n>     digits(1)  == 1\n>     digits(4)  == 0\n>     digits(235) == 15\n>     \"\"\"\n>     product = 1\n>     odd_count = 0\n>     for digit in str(n):\n>         int_digit = int(digit)\n>         if int_digit%2 == 1:\n>             product= product*int_digit\n>             odd_count+=1\n>     if odd_count ==0:\n!         return 0\n>     else:\n>         return product", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", ">", ">"]}, {"test_id": "895", "test": "def test():\n        assert digits(120) ==1", "coverage_executed": "> def digits(n):\n>     \"\"\"Given a positive integer n, return the product of the odd digits.\n>     Return 0 if all digits are even.\n>     For example:\n>     digits(1)  == 1\n>     digits(4)  == 0\n>     digits(235) == 15\n>     \"\"\"\n>     product = 1\n>     odd_count = 0\n>     for digit in str(n):\n>         int_digit = int(digit)\n>         if int_digit%2 == 1:\n>             product= product*int_digit\n>             odd_count+=1\n>     if odd_count ==0:\n\n>     else:\n>         return product", "coverage": "> def digits(n):\n>     \"\"\"Given a positive integer n, return the product of the odd digits.\n>     Return 0 if all digits are even.\n>     For example:\n>     digits(1)  == 1\n>     digits(4)  == 0\n>     digits(235) == 15\n>     \"\"\"\n>     product = 1\n>     odd_count = 0\n>     for digit in str(n):\n>         int_digit = int(digit)\n>         if int_digit%2 == 1:\n>             product= product*int_digit\n>             odd_count+=1\n>     if odd_count ==0:\n!         return 0\n>     else:\n>         return product", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", ">", ">"]}, {"test_id": "894", "test": "def test():\n        assert digits(54) == 5", "coverage_executed": "> def digits(n):\n>     \"\"\"Given a positive integer n, return the product of the odd digits.\n>     Return 0 if all digits are even.\n>     For example:\n>     digits(1)  == 1\n>     digits(4)  == 0\n>     digits(235) == 15\n>     \"\"\"\n>     product = 1\n>     odd_count = 0\n>     for digit in str(n):\n>         int_digit = int(digit)\n>         if int_digit%2 == 1:\n>             product= product*int_digit\n>             odd_count+=1\n>     if odd_count ==0:\n\n>     else:\n>         return product", "coverage": "> def digits(n):\n>     \"\"\"Given a positive integer n, return the product of the odd digits.\n>     Return 0 if all digits are even.\n>     For example:\n>     digits(1)  == 1\n>     digits(4)  == 0\n>     digits(235) == 15\n>     \"\"\"\n>     product = 1\n>     odd_count = 0\n>     for digit in str(n):\n>         int_digit = int(digit)\n>         if int_digit%2 == 1:\n>             product= product*int_digit\n>             odd_count+=1\n>     if odd_count ==0:\n!         return 0\n>     else:\n>         return product", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", ">", ">"]}, {"test_id": "898", "test": "def test():\n        assert digits(5576543) == 2625", "coverage_executed": "> def digits(n):\n>     \"\"\"Given a positive integer n, return the product of the odd digits.\n>     Return 0 if all digits are even.\n>     For example:\n>     digits(1)  == 1\n>     digits(4)  == 0\n>     digits(235) == 15\n>     \"\"\"\n>     product = 1\n>     odd_count = 0\n>     for digit in str(n):\n>         int_digit = int(digit)\n>         if int_digit%2 == 1:\n>             product= product*int_digit\n>             odd_count+=1\n>     if odd_count ==0:\n\n>     else:\n>         return product", "coverage": "> def digits(n):\n>     \"\"\"Given a positive integer n, return the product of the odd digits.\n>     Return 0 if all digits are even.\n>     For example:\n>     digits(1)  == 1\n>     digits(4)  == 0\n>     digits(235) == 15\n>     \"\"\"\n>     product = 1\n>     odd_count = 0\n>     for digit in str(n):\n>         int_digit = int(digit)\n>         if int_digit%2 == 1:\n>             product= product*int_digit\n>             odd_count+=1\n>     if odd_count ==0:\n!         return 0\n>     else:\n>         return product", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", ">", ">"]}, {"test_id": "899", "test": "def test():\n        assert digits(2468) == 0", "coverage_executed": "> def digits(n):\n>     \"\"\"Given a positive integer n, return the product of the odd digits.\n>     Return 0 if all digits are even.\n>     For example:\n>     digits(1)  == 1\n>     digits(4)  == 0\n>     digits(235) == 15\n>     \"\"\"\n>     product = 1\n>     odd_count = 0\n>     for digit in str(n):\n>         int_digit = int(digit)\n>         if int_digit%2 == 1:\n\n\n>     if odd_count ==0:\n>         return 0\n\n", "coverage": "> def digits(n):\n>     \"\"\"Given a positive integer n, return the product of the odd digits.\n>     Return 0 if all digits are even.\n>     For example:\n>     digits(1)  == 1\n>     digits(4)  == 0\n>     digits(235) == 15\n>     \"\"\"\n>     product = 1\n>     odd_count = 0\n>     for digit in str(n):\n>         int_digit = int(digit)\n>         if int_digit%2 == 1:\n!             product= product*int_digit\n!             odd_count+=1\n>     if odd_count ==0:\n>         return 0\n!     else:\n!         return product", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", ">", ">", "!", "!"]}]}