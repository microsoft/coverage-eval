{"problem_id": 19, "problem": "vowels_count", "method": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels", "tests": [{"test_id": "321", "test": "def test():\n        assert vowels_count(\"abcde\") == 2, \"Test 1\"", "coverage_executed": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     n_vowels = sum(c in vowels for c in s)\n>     if s[-1] == 'y' or s[-1] == 'Y':\n\n>     return n_vowels", "coverage": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     n_vowels = sum(c in vowels for c in s)\n>     if s[-1] == 'y' or s[-1] == 'Y':\n!         n_vowels += 1\n>     return n_vowels", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?"]}, {"test_id": "322", "test": "def test():\n        assert vowels_count(\"Alone\") == 3, \"Test 2\"", "coverage_executed": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     n_vowels = sum(c in vowels for c in s)\n>     if s[-1] == 'y' or s[-1] == 'Y':\n\n>     return n_vowels", "coverage": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     n_vowels = sum(c in vowels for c in s)\n>     if s[-1] == 'y' or s[-1] == 'Y':\n!         n_vowels += 1\n>     return n_vowels", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?"]}, {"test_id": "323", "test": "def test():\n        assert vowels_count(\"key\") == 2, \"Test 3\"", "coverage_executed": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     n_vowels = sum(c in vowels for c in s)\n>     if s[-1] == 'y' or s[-1] == 'Y':\n>         n_vowels += 1\n>     return n_vowels", "coverage": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     n_vowels = sum(c in vowels for c in s)\n>     if s[-1] == 'y' or s[-1] == 'Y':\n>         n_vowels += 1\n>     return n_vowels", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?"]}, {"test_id": "327", "test": "def test():\n        assert vowels_count(\"ACEDY\") == 3, \"Test 7\"", "coverage_executed": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     n_vowels = sum(c in vowels for c in s)\n>     if s[-1] == 'y' or s[-1] == 'Y':\n>         n_vowels += 1\n>     return n_vowels", "coverage": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     n_vowels = sum(c in vowels for c in s)\n>     if s[-1] == 'y' or s[-1] == 'Y':\n>         n_vowels += 1\n>     return n_vowels", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?"]}, {"test_id": "326", "test": "def test():\n        assert vowels_count(\"bYe\") == 1, \"Test 6\"", "coverage_executed": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     n_vowels = sum(c in vowels for c in s)\n>     if s[-1] == 'y' or s[-1] == 'Y':\n\n>     return n_vowels", "coverage": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     n_vowels = sum(c in vowels for c in s)\n>     if s[-1] == 'y' or s[-1] == 'Y':\n!         n_vowels += 1\n>     return n_vowels", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?"]}, {"test_id": "324", "test": "def test():\n        assert vowels_count(\"bye\") == 1, \"Test 4\"", "coverage_executed": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     n_vowels = sum(c in vowels for c in s)\n>     if s[-1] == 'y' or s[-1] == 'Y':\n\n>     return n_vowels", "coverage": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     n_vowels = sum(c in vowels for c in s)\n>     if s[-1] == 'y' or s[-1] == 'Y':\n!         n_vowels += 1\n>     return n_vowels", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?"]}, {"test_id": "325", "test": "def test():\n        assert vowels_count(\"keY\") == 2, \"Test 5\"", "coverage_executed": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     n_vowels = sum(c in vowels for c in s)\n>     if s[-1] == 'y' or s[-1] == 'Y':\n>         n_vowels += 1\n>     return n_vowels", "coverage": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n>     vowels = \"aeiouAEIOU\"\n>     n_vowels = sum(c in vowels for c in s)\n>     if s[-1] == 'y' or s[-1] == 'Y':\n>         n_vowels += 1\n>     return n_vowels", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?"]}, {"test_id": "328", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n\n\n\n\n", "coverage": "> def vowels_count(s):\n>     \"\"\"Write a function vowels_count which takes a string representing\n>     a word as input and returns the number of vowels in the string.\n>     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n>     vowel, but only when it is at the end of the given word.\n>     Example:\n>     >>> vowels_count(\"abcde\")\n>     2\n>     >>> vowels_count(\"ACEDY\")\n>     3\n>     \"\"\"\n!     vowels = \"aeiouAEIOU\"\n!     n_vowels = sum(c in vowels for c in s)\n!     if s[-1] == 'y' or s[-1] == 'Y':\n!         n_vowels += 1\n!     return n_vowels", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "!", "!", "?"]}]}