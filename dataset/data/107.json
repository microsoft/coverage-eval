{"problem_id": 107, "problem": "is_palindrome", "method": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True", "tests": [{"test_id": "217", "test": "def test():\n        assert is_palindrome('') == True", "coverage_executed": "> def is_palindrome(text: str):\n>     \"\"\"\n>     Checks if given string is a palindrome\n>     >>> is_palindrome('')\n>     True\n>     >>> is_palindrome('aba')\n>     True\n>     >>> is_palindrome('aaaaa')\n>     True\n>     >>> is_palindrome('zbcd')\n>     False\n>     \"\"\"\n>     for i in range(len(text)):\n\n\n>     return True", "coverage": "> def is_palindrome(text: str):\n>     \"\"\"\n>     Checks if given string is a palindrome\n>     >>> is_palindrome('')\n>     True\n>     >>> is_palindrome('aba')\n>     True\n>     >>> is_palindrome('aaaaa')\n>     True\n>     >>> is_palindrome('zbcd')\n>     False\n>     \"\"\"\n>     for i in range(len(text)):\n!         if text[i] != text[len(text) - 1 - i]:\n!             return False\n>     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "!", "?"]}, {"test_id": "222", "test": "def test():\n        assert is_palindrome('xywyz') == False", "coverage_executed": "> def is_palindrome(text: str):\n>     \"\"\"\n>     Checks if given string is a palindrome\n>     >>> is_palindrome('')\n>     True\n>     >>> is_palindrome('aba')\n>     True\n>     >>> is_palindrome('aaaaa')\n>     True\n>     >>> is_palindrome('zbcd')\n>     False\n>     \"\"\"\n>     for i in range(len(text)):\n>         if text[i] != text[len(text) - 1 - i]:\n>             return False\n", "coverage": "> def is_palindrome(text: str):\n>     \"\"\"\n>     Checks if given string is a palindrome\n>     >>> is_palindrome('')\n>     True\n>     >>> is_palindrome('aba')\n>     True\n>     >>> is_palindrome('aaaaa')\n>     True\n>     >>> is_palindrome('zbcd')\n>     False\n>     \"\"\"\n>     for i in range(len(text)):\n>         if text[i] != text[len(text) - 1 - i]:\n>             return False\n!     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "223", "test": "def test():\n        assert is_palindrome('xywzx') == False", "coverage_executed": "> def is_palindrome(text: str):\n>     \"\"\"\n>     Checks if given string is a palindrome\n>     >>> is_palindrome('')\n>     True\n>     >>> is_palindrome('aba')\n>     True\n>     >>> is_palindrome('aaaaa')\n>     True\n>     >>> is_palindrome('zbcd')\n>     False\n>     \"\"\"\n>     for i in range(len(text)):\n>         if text[i] != text[len(text) - 1 - i]:\n>             return False\n", "coverage": "> def is_palindrome(text: str):\n>     \"\"\"\n>     Checks if given string is a palindrome\n>     >>> is_palindrome('')\n>     True\n>     >>> is_palindrome('aba')\n>     True\n>     >>> is_palindrome('aaaaa')\n>     True\n>     >>> is_palindrome('zbcd')\n>     False\n>     \"\"\"\n>     for i in range(len(text)):\n>         if text[i] != text[len(text) - 1 - i]:\n>             return False\n!     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "219", "test": "def test():\n        assert is_palindrome('aaaaa') == True", "coverage_executed": "> def is_palindrome(text: str):\n>     \"\"\"\n>     Checks if given string is a palindrome\n>     >>> is_palindrome('')\n>     True\n>     >>> is_palindrome('aba')\n>     True\n>     >>> is_palindrome('aaaaa')\n>     True\n>     >>> is_palindrome('zbcd')\n>     False\n>     \"\"\"\n>     for i in range(len(text)):\n>         if text[i] != text[len(text) - 1 - i]:\n\n>     return True", "coverage": "> def is_palindrome(text: str):\n>     \"\"\"\n>     Checks if given string is a palindrome\n>     >>> is_palindrome('')\n>     True\n>     >>> is_palindrome('aba')\n>     True\n>     >>> is_palindrome('aaaaa')\n>     True\n>     >>> is_palindrome('zbcd')\n>     False\n>     \"\"\"\n>     for i in range(len(text)):\n>         if text[i] != text[len(text) - 1 - i]:\n!             return False\n>     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "?"]}, {"test_id": "221", "test": "def test():\n        assert is_palindrome('xywyx') == True", "coverage_executed": "> def is_palindrome(text: str):\n>     \"\"\"\n>     Checks if given string is a palindrome\n>     >>> is_palindrome('')\n>     True\n>     >>> is_palindrome('aba')\n>     True\n>     >>> is_palindrome('aaaaa')\n>     True\n>     >>> is_palindrome('zbcd')\n>     False\n>     \"\"\"\n>     for i in range(len(text)):\n>         if text[i] != text[len(text) - 1 - i]:\n\n>     return True", "coverage": "> def is_palindrome(text: str):\n>     \"\"\"\n>     Checks if given string is a palindrome\n>     >>> is_palindrome('')\n>     True\n>     >>> is_palindrome('aba')\n>     True\n>     >>> is_palindrome('aaaaa')\n>     True\n>     >>> is_palindrome('zbcd')\n>     False\n>     \"\"\"\n>     for i in range(len(text)):\n>         if text[i] != text[len(text) - 1 - i]:\n!             return False\n>     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "?"]}, {"test_id": "220", "test": "def test():\n        assert is_palindrome('zbcd') == False", "coverage_executed": "> def is_palindrome(text: str):\n>     \"\"\"\n>     Checks if given string is a palindrome\n>     >>> is_palindrome('')\n>     True\n>     >>> is_palindrome('aba')\n>     True\n>     >>> is_palindrome('aaaaa')\n>     True\n>     >>> is_palindrome('zbcd')\n>     False\n>     \"\"\"\n>     for i in range(len(text)):\n>         if text[i] != text[len(text) - 1 - i]:\n>             return False\n", "coverage": "> def is_palindrome(text: str):\n>     \"\"\"\n>     Checks if given string is a palindrome\n>     >>> is_palindrome('')\n>     True\n>     >>> is_palindrome('aba')\n>     True\n>     >>> is_palindrome('aaaaa')\n>     True\n>     >>> is_palindrome('zbcd')\n>     False\n>     \"\"\"\n>     for i in range(len(text)):\n>         if text[i] != text[len(text) - 1 - i]:\n>             return False\n!     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "218", "test": "def test():\n        assert is_palindrome('aba') == True", "coverage_executed": "> def is_palindrome(text: str):\n>     \"\"\"\n>     Checks if given string is a palindrome\n>     >>> is_palindrome('')\n>     True\n>     >>> is_palindrome('aba')\n>     True\n>     >>> is_palindrome('aaaaa')\n>     True\n>     >>> is_palindrome('zbcd')\n>     False\n>     \"\"\"\n>     for i in range(len(text)):\n>         if text[i] != text[len(text) - 1 - i]:\n\n>     return True", "coverage": "> def is_palindrome(text: str):\n>     \"\"\"\n>     Checks if given string is a palindrome\n>     >>> is_palindrome('')\n>     True\n>     >>> is_palindrome('aba')\n>     True\n>     >>> is_palindrome('aaaaa')\n>     True\n>     >>> is_palindrome('zbcd')\n>     False\n>     \"\"\"\n>     for i in range(len(text)):\n>         if text[i] != text[len(text) - 1 - i]:\n!             return False\n>     return True", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "?"]}]}