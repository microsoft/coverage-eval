{"problem_id": 34, "problem": "digitSum", "method": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)", "tests": [{"test_id": "338", "test": "def test():\n        assert digitSum(\"helloE\") == 69, \"Error\"", "coverage_executed": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n>     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n>     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?"]}, {"test_id": "339", "test": "def test():\n        assert digitSum(\"woArBld\") == 131, \"Error\"", "coverage_executed": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n>     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n>     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?"]}, {"test_id": "335", "test": "def test():\n        assert digitSum(\"\") == 0, \"Error\"", "coverage_executed": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n", "coverage": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n!     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?"]}, {"test_id": "334", "test": "def test():\n        assert True, \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n\n", "coverage": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n!     if s == \"\": return 0\n!     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "!", "?"]}, {"test_id": "336", "test": "def test():\n        assert digitSum(\"abAB\") == 131, \"Error\"", "coverage_executed": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n>     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n>     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?"]}, {"test_id": "337", "test": "def test():\n        assert digitSum(\"abcCd\") == 67, \"Error\"", "coverage_executed": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n>     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n>     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?"]}, {"test_id": "343", "test": "def test():\n        assert digitSum(\"You arE Very Smart\") == 327, \"Error\"", "coverage_executed": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n>     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n>     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?"]}, {"test_id": "342", "test": "def test():\n        assert digitSum(\" How are yOu?\") == 151, \"Error\"", "coverage_executed": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n>     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n>     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?"]}, {"test_id": "340", "test": "def test():\n        assert digitSum(\"aAaaaXa\") == 153, \"Error\"", "coverage_executed": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n>     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n>     if s == \"\": return 0\n>     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?"]}, {"test_id": "341", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n\n", "coverage": "> def digitSum(s):\n>     \"\"\"Task\n>     Write a function that takes a string as input and returns the sum of the upper characters only'\n>     ASCII codes.\n>     Examples:\n>         digitSum(\"\") => 0\n>         digitSum(\"abAB\") => 131\n>         digitSum(\"abcCd\") => 67\n>         digitSum(\"helloE\") => 69\n>         digitSum(\"woArBld\") => 131\n>         digitSum(\"aAaaaXa\") => 153\n>     \"\"\"\n!     if s == \"\": return 0\n!     return sum(ord(char) if char.isupper() else 0 for char in s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "!", "?"]}]}