{"problem_id": 99, "problem": "mean_absolute_deviation", "method": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "tests": [{"test_id": "21", "test": "def test():\n        assert abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6", "coverage_executed": "> def mean_absolute_deviation(numbers: List[float]) -> float:\n>     \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n>     around the mean of this dataset.\n>     Mean Absolute Deviation is the average absolute difference between each\n>     element and a centerpoint (mean in this case):\n>     MAD = average | x - x_mean |\n>     >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n>     1.0\n>     \"\"\"\n>     mean = sum(numbers) / len(numbers)\n>     return sum(abs(x - mean) for x in numbers) / len(numbers)", "coverage": "> def mean_absolute_deviation(numbers: List[float]) -> float:\n>     \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n>     around the mean of this dataset.\n>     Mean Absolute Deviation is the average absolute difference between each\n>     element and a centerpoint (mean in this case):\n>     MAD = average | x - x_mean |\n>     >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n>     1.0\n>     \"\"\"\n>     mean = sum(numbers) / len(numbers)\n>     return sum(abs(x - mean) for x in numbers) / len(numbers)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "20", "test": "def test():\n        assert abs(mean_absolute_deviation([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6", "coverage_executed": "> def mean_absolute_deviation(numbers: List[float]) -> float:\n>     \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n>     around the mean of this dataset.\n>     Mean Absolute Deviation is the average absolute difference between each\n>     element and a centerpoint (mean in this case):\n>     MAD = average | x - x_mean |\n>     >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n>     1.0\n>     \"\"\"\n>     mean = sum(numbers) / len(numbers)\n>     return sum(abs(x - mean) for x in numbers) / len(numbers)", "coverage": "> def mean_absolute_deviation(numbers: List[float]) -> float:\n>     \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n>     around the mean of this dataset.\n>     Mean Absolute Deviation is the average absolute difference between each\n>     element and a centerpoint (mean in this case):\n>     MAD = average | x - x_mean |\n>     >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n>     1.0\n>     \"\"\"\n>     mean = sum(numbers) / len(numbers)\n>     return sum(abs(x - mean) for x in numbers) / len(numbers)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "22", "test": "def test():\n        assert abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6", "coverage_executed": "> def mean_absolute_deviation(numbers: List[float]) -> float:\n>     \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n>     around the mean of this dataset.\n>     Mean Absolute Deviation is the average absolute difference between each\n>     element and a centerpoint (mean in this case):\n>     MAD = average | x - x_mean |\n>     >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n>     1.0\n>     \"\"\"\n>     mean = sum(numbers) / len(numbers)\n>     return sum(abs(x - mean) for x in numbers) / len(numbers)", "coverage": "> def mean_absolute_deviation(numbers: List[float]) -> float:\n>     \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n>     around the mean of this dataset.\n>     Mean Absolute Deviation is the average absolute difference between each\n>     element and a centerpoint (mean in this case):\n>     MAD = average | x - x_mean |\n>     >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n>     1.0\n>     \"\"\"\n>     mean = sum(numbers) / len(numbers)\n>     return sum(abs(x - mean) for x in numbers) / len(numbers)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}