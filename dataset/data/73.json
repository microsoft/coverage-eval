{"problem_id": 73, "problem": "get_positive", "method": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [e for e in l if e > 0]", "tests": [{"test_id": "122", "test": "def test():\n        assert get_positive([-1, -2, 4, 5, 6]) == [4, 5, 6]", "coverage_executed": "> def get_positive(l: list):\n>     \"\"\"Return only positive numbers in the list.\n>     >>> get_positive([-1, 2, -4, 5, 6])\n>     [2, 5, 6]\n>     >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n>     [5, 3, 2, 3, 9, 123, 1]\n>     \"\"\"\n>     return [e for e in l if e > 0]", "coverage": "> def get_positive(l: list):\n>     \"\"\"Return only positive numbers in the list.\n>     >>> get_positive([-1, 2, -4, 5, 6])\n>     [2, 5, 6]\n>     >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n>     [5, 3, 2, 3, 9, 123, 1]\n>     \"\"\"\n>     return [e for e in l if e > 0]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "123", "test": "def test():\n        assert get_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]", "coverage_executed": "> def get_positive(l: list):\n>     \"\"\"Return only positive numbers in the list.\n>     >>> get_positive([-1, 2, -4, 5, 6])\n>     [2, 5, 6]\n>     >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n>     [5, 3, 2, 3, 9, 123, 1]\n>     \"\"\"\n>     return [e for e in l if e > 0]", "coverage": "> def get_positive(l: list):\n>     \"\"\"Return only positive numbers in the list.\n>     >>> get_positive([-1, 2, -4, 5, 6])\n>     [2, 5, 6]\n>     >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n>     [5, 3, 2, 3, 9, 123, 1]\n>     \"\"\"\n>     return [e for e in l if e > 0]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "124", "test": "def test():\n        assert get_positive([-1, -2]) == []", "coverage_executed": "> def get_positive(l: list):\n>     \"\"\"Return only positive numbers in the list.\n>     >>> get_positive([-1, 2, -4, 5, 6])\n>     [2, 5, 6]\n>     >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n>     [5, 3, 2, 3, 9, 123, 1]\n>     \"\"\"\n>     return [e for e in l if e > 0]", "coverage": "> def get_positive(l: list):\n>     \"\"\"Return only positive numbers in the list.\n>     >>> get_positive([-1, 2, -4, 5, 6])\n>     [2, 5, 6]\n>     >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n>     [5, 3, 2, 3, 9, 123, 1]\n>     \"\"\"\n>     return [e for e in l if e > 0]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "125", "test": "def test():\n        assert get_positive([]) == []", "coverage_executed": "> def get_positive(l: list):\n>     \"\"\"Return only positive numbers in the list.\n>     >>> get_positive([-1, 2, -4, 5, 6])\n>     [2, 5, 6]\n>     >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n>     [5, 3, 2, 3, 9, 123, 1]\n>     \"\"\"\n>     return [e for e in l if e > 0]", "coverage": "> def get_positive(l: list):\n>     \"\"\"Return only positive numbers in the list.\n>     >>> get_positive([-1, 2, -4, 5, 6])\n>     [2, 5, 6]\n>     >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n>     [5, 3, 2, 3, 9, 123, 1]\n>     \"\"\"\n>     return [e for e in l if e > 0]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?"]}]}