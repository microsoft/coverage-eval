{"problem_id": 135, "problem": "same_chars", "method": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "tests": [{"test_id": "255", "test": "def test():\n        assert same_chars('abcd', 'dddddddabcf') == False", "coverage_executed": "> def same_chars(s0: str, s1: str):\n>     \"\"\"\n>     Check if two words have the same characters.\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n>     True\n>     >>> same_chars('abcd', 'dddddddabc')\n>     True\n>     >>> same_chars('dddddddabc', 'abcd')\n>     True\n>     >>> same_chars('eabcd', 'dddddddabc')\n>     False\n>     >>> same_chars('abcd', 'dddddddabce')\n>     False\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n>     False\n>     \"\"\"\n>     return set(s0) == set(s1)", "coverage": "> def same_chars(s0: str, s1: str):\n>     \"\"\"\n>     Check if two words have the same characters.\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n>     True\n>     >>> same_chars('abcd', 'dddddddabc')\n>     True\n>     >>> same_chars('dddddddabc', 'abcd')\n>     True\n>     >>> same_chars('eabcd', 'dddddddabc')\n>     False\n>     >>> same_chars('abcd', 'dddddddabce')\n>     False\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n>     False\n>     \"\"\"\n>     return set(s0) == set(s1)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "254", "test": "def test():\n        assert same_chars('eabcd', 'dddddddabc') == False", "coverage_executed": "> def same_chars(s0: str, s1: str):\n>     \"\"\"\n>     Check if two words have the same characters.\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n>     True\n>     >>> same_chars('abcd', 'dddddddabc')\n>     True\n>     >>> same_chars('dddddddabc', 'abcd')\n>     True\n>     >>> same_chars('eabcd', 'dddddddabc')\n>     False\n>     >>> same_chars('abcd', 'dddddddabce')\n>     False\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n>     False\n>     \"\"\"\n>     return set(s0) == set(s1)", "coverage": "> def same_chars(s0: str, s1: str):\n>     \"\"\"\n>     Check if two words have the same characters.\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n>     True\n>     >>> same_chars('abcd', 'dddddddabc')\n>     True\n>     >>> same_chars('dddddddabc', 'abcd')\n>     True\n>     >>> same_chars('eabcd', 'dddddddabc')\n>     False\n>     >>> same_chars('abcd', 'dddddddabce')\n>     False\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n>     False\n>     \"\"\"\n>     return set(s0) == set(s1)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "256", "test": "def test():\n        assert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False", "coverage_executed": "> def same_chars(s0: str, s1: str):\n>     \"\"\"\n>     Check if two words have the same characters.\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n>     True\n>     >>> same_chars('abcd', 'dddddddabc')\n>     True\n>     >>> same_chars('dddddddabc', 'abcd')\n>     True\n>     >>> same_chars('eabcd', 'dddddddabc')\n>     False\n>     >>> same_chars('abcd', 'dddddddabce')\n>     False\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n>     False\n>     \"\"\"\n>     return set(s0) == set(s1)", "coverage": "> def same_chars(s0: str, s1: str):\n>     \"\"\"\n>     Check if two words have the same characters.\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n>     True\n>     >>> same_chars('abcd', 'dddddddabc')\n>     True\n>     >>> same_chars('dddddddabc', 'abcd')\n>     True\n>     >>> same_chars('eabcd', 'dddddddabc')\n>     False\n>     >>> same_chars('abcd', 'dddddddabce')\n>     False\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n>     False\n>     \"\"\"\n>     return set(s0) == set(s1)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "257", "test": "def test():\n        assert same_chars('aabb', 'aaccc') == False", "coverage_executed": "> def same_chars(s0: str, s1: str):\n>     \"\"\"\n>     Check if two words have the same characters.\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n>     True\n>     >>> same_chars('abcd', 'dddddddabc')\n>     True\n>     >>> same_chars('dddddddabc', 'abcd')\n>     True\n>     >>> same_chars('eabcd', 'dddddddabc')\n>     False\n>     >>> same_chars('abcd', 'dddddddabce')\n>     False\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n>     False\n>     \"\"\"\n>     return set(s0) == set(s1)", "coverage": "> def same_chars(s0: str, s1: str):\n>     \"\"\"\n>     Check if two words have the same characters.\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n>     True\n>     >>> same_chars('abcd', 'dddddddabc')\n>     True\n>     >>> same_chars('dddddddabc', 'abcd')\n>     True\n>     >>> same_chars('eabcd', 'dddddddabc')\n>     False\n>     >>> same_chars('abcd', 'dddddddabce')\n>     False\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n>     False\n>     \"\"\"\n>     return set(s0) == set(s1)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "253", "test": "def test():\n        assert same_chars('dddddddabc', 'abcd') == True", "coverage_executed": "> def same_chars(s0: str, s1: str):\n>     \"\"\"\n>     Check if two words have the same characters.\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n>     True\n>     >>> same_chars('abcd', 'dddddddabc')\n>     True\n>     >>> same_chars('dddddddabc', 'abcd')\n>     True\n>     >>> same_chars('eabcd', 'dddddddabc')\n>     False\n>     >>> same_chars('abcd', 'dddddddabce')\n>     False\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n>     False\n>     \"\"\"\n>     return set(s0) == set(s1)", "coverage": "> def same_chars(s0: str, s1: str):\n>     \"\"\"\n>     Check if two words have the same characters.\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n>     True\n>     >>> same_chars('abcd', 'dddddddabc')\n>     True\n>     >>> same_chars('dddddddabc', 'abcd')\n>     True\n>     >>> same_chars('eabcd', 'dddddddabc')\n>     False\n>     >>> same_chars('abcd', 'dddddddabce')\n>     False\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n>     False\n>     \"\"\"\n>     return set(s0) == set(s1)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "252", "test": "def test():\n        assert same_chars('abcd', 'dddddddabc') == True", "coverage_executed": "> def same_chars(s0: str, s1: str):\n>     \"\"\"\n>     Check if two words have the same characters.\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n>     True\n>     >>> same_chars('abcd', 'dddddddabc')\n>     True\n>     >>> same_chars('dddddddabc', 'abcd')\n>     True\n>     >>> same_chars('eabcd', 'dddddddabc')\n>     False\n>     >>> same_chars('abcd', 'dddddddabce')\n>     False\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n>     False\n>     \"\"\"\n>     return set(s0) == set(s1)", "coverage": "> def same_chars(s0: str, s1: str):\n>     \"\"\"\n>     Check if two words have the same characters.\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n>     True\n>     >>> same_chars('abcd', 'dddddddabc')\n>     True\n>     >>> same_chars('dddddddabc', 'abcd')\n>     True\n>     >>> same_chars('eabcd', 'dddddddabc')\n>     False\n>     >>> same_chars('abcd', 'dddddddabce')\n>     False\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n>     False\n>     \"\"\"\n>     return set(s0) == set(s1)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "251", "test": "def test():\n        assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True", "coverage_executed": "> def same_chars(s0: str, s1: str):\n>     \"\"\"\n>     Check if two words have the same characters.\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n>     True\n>     >>> same_chars('abcd', 'dddddddabc')\n>     True\n>     >>> same_chars('dddddddabc', 'abcd')\n>     True\n>     >>> same_chars('eabcd', 'dddddddabc')\n>     False\n>     >>> same_chars('abcd', 'dddddddabce')\n>     False\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n>     False\n>     \"\"\"\n>     return set(s0) == set(s1)", "coverage": "> def same_chars(s0: str, s1: str):\n>     \"\"\"\n>     Check if two words have the same characters.\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n>     True\n>     >>> same_chars('abcd', 'dddddddabc')\n>     True\n>     >>> same_chars('dddddddabc', 'abcd')\n>     True\n>     >>> same_chars('eabcd', 'dddddddabc')\n>     False\n>     >>> same_chars('abcd', 'dddddddabce')\n>     False\n>     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n>     False\n>     \"\"\"\n>     return set(s0) == set(s1)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}