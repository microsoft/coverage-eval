{"problem_id": 52, "problem": "match_parens", "method": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'", "tests": [{"test_id": "784", "test": "def test():\n        assert match_parens(['(()(', '()))()']) == 'Yes'", "coverage_executed": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n!                 return False\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?", "?", "?", "?"]}, {"test_id": "785", "test": "def test():\n        assert match_parens(['((((', '((())']) == 'No'", "coverage_executed": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n!                 return False\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?", "?", "?", "?"]}, {"test_id": "787", "test": "def test():\n        assert match_parens([')(', ')(']) == 'No'", "coverage_executed": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n!                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n!         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", ">", ">", ">", ">", "?", "?", "?", "?"]}, {"test_id": "786", "test": "def test():\n        assert match_parens([')(()', '(()(']) == 'No'", "coverage_executed": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?", "?", "?", "?"]}, {"test_id": "782", "test": "def test():\n        assert match_parens(['(())))', '(()())((']) == 'Yes'", "coverage_executed": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?", "?", "?", "?"]}, {"test_id": "783", "test": "def test():\n        assert match_parens(['()', '())']) == 'No'", "coverage_executed": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n!         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?", "?", "?", "?"]}, {"test_id": "781", "test": "def test():\n        assert match_parens([')())', '(()()(']) == 'Yes'", "coverage_executed": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?", "?", "?", "?"]}, {"test_id": "780", "test": "def test():\n        assert match_parens(['(()(())', '())())']) == 'No'", "coverage_executed": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n!         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?", "?", "?", "?"]}, {"test_id": "789", "test": "def test():\n        assert match_parens([')', '(']) == 'Yes'", "coverage_executed": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?", "?", "?", "?"]}, {"test_id": "788", "test": "def test():\n        assert match_parens(['(', ')']) == 'Yes'", "coverage_executed": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n!                 return False\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?", "?", "?", "?"]}, {"test_id": "778", "test": "def test():\n        assert match_parens(['()(', ')']) == 'Yes'", "coverage_executed": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n>                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n!                 return False\n>         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?", "?", "?", "?"]}, {"test_id": "779", "test": "def test():\n        assert match_parens([')', ')']) == 'No'", "coverage_executed": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage": "> def match_parens(lst):\n>     '''\n>     You are given a list of two strings, both strings consist of open\n>     parentheses '(' or close parentheses ')' only.\n>     Your job is to check if it is possible to concatenate the two strings in\n>     some order, that the resulting string will be good.\n>     A string S is considered to be good if and only if all parentheses in S\n>     are balanced. For example: the string '(())()' is good, while the string\n>     '())' is not.\n>     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n>     Examples:\n>     match_parens(['()(', ')']) == 'Yes'\n>     match_parens([')', ')']) == 'No'\n>     '''\n>     def check(s):\n>         val = 0\n>         for i in s:\n>             if i == '(':\n!                 val = val + 1\n>             else:\n>                 val = val - 1\n>             if val < 0:\n>                 return False\n!         return True if val == 0 else False\n>     S1 = lst[0] + lst[1]\n>     S2 = lst[1] + lst[0]\n>     return 'Yes' if check(S1) or check(S2) else 'No'", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", ">", ">", ">", ">", "?", "?", "?", "?"]}]}