{"problem_id": 49, "problem": "median", "method": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "tests": [{"test_id": "212", "test": "def test():\n        assert median([3, 1, 2, 4, 5]) == 3", "coverage_executed": "> def median(l: list):\n>     \"\"\"Return median of elements in the list l.\n>     >>> median([3, 1, 2, 4, 5])\n>     3\n>     >>> median([-10, 4, 6, 1000, 10, 20])\n>     15.0\n>     \"\"\"\n>     l = sorted(l)\n>     if len(l) % 2 == 1:\n>         return l[len(l) // 2]\n\n", "coverage": "> def median(l: list):\n>     \"\"\"Return median of elements in the list l.\n>     >>> median([3, 1, 2, 4, 5])\n>     3\n>     >>> median([-10, 4, 6, 1000, 10, 20])\n>     15.0\n>     \"\"\"\n>     l = sorted(l)\n>     if len(l) % 2 == 1:\n>         return l[len(l) // 2]\n!     else:\n!         return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!"]}, {"test_id": "213", "test": "def test():\n        assert median([-10, 4, 6, 1000, 10, 20]) == 8.0", "coverage_executed": "> def median(l: list):\n>     \"\"\"Return median of elements in the list l.\n>     >>> median([3, 1, 2, 4, 5])\n>     3\n>     >>> median([-10, 4, 6, 1000, 10, 20])\n>     15.0\n>     \"\"\"\n>     l = sorted(l)\n>     if len(l) % 2 == 1:\n\n>     else:\n>         return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "coverage": "> def median(l: list):\n>     \"\"\"Return median of elements in the list l.\n>     >>> median([3, 1, 2, 4, 5])\n>     3\n>     >>> median([-10, 4, 6, 1000, 10, 20])\n>     15.0\n>     \"\"\"\n>     l = sorted(l)\n>     if len(l) % 2 == 1:\n!         return l[len(l) // 2]\n>     else:\n>         return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">"]}, {"test_id": "214", "test": "def test():\n        assert median([5]) == 5", "coverage_executed": "> def median(l: list):\n>     \"\"\"Return median of elements in the list l.\n>     >>> median([3, 1, 2, 4, 5])\n>     3\n>     >>> median([-10, 4, 6, 1000, 10, 20])\n>     15.0\n>     \"\"\"\n>     l = sorted(l)\n>     if len(l) % 2 == 1:\n>         return l[len(l) // 2]\n\n", "coverage": "> def median(l: list):\n>     \"\"\"Return median of elements in the list l.\n>     >>> median([3, 1, 2, 4, 5])\n>     3\n>     >>> median([-10, 4, 6, 1000, 10, 20])\n>     15.0\n>     \"\"\"\n>     l = sorted(l)\n>     if len(l) % 2 == 1:\n>         return l[len(l) // 2]\n!     else:\n!         return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!"]}, {"test_id": "215", "test": "def test():\n        assert median([6, 5]) == 5.5", "coverage_executed": "> def median(l: list):\n>     \"\"\"Return median of elements in the list l.\n>     >>> median([3, 1, 2, 4, 5])\n>     3\n>     >>> median([-10, 4, 6, 1000, 10, 20])\n>     15.0\n>     \"\"\"\n>     l = sorted(l)\n>     if len(l) % 2 == 1:\n\n>     else:\n>         return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "coverage": "> def median(l: list):\n>     \"\"\"Return median of elements in the list l.\n>     >>> median([3, 1, 2, 4, 5])\n>     3\n>     >>> median([-10, 4, 6, 1000, 10, 20])\n>     15.0\n>     \"\"\"\n>     l = sorted(l)\n>     if len(l) % 2 == 1:\n!         return l[len(l) // 2]\n>     else:\n>         return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">"]}, {"test_id": "216", "test": "def test():\n        assert median([8, 1, 3, 9, 9, 2, 7]) == 7", "coverage_executed": "> def median(l: list):\n>     \"\"\"Return median of elements in the list l.\n>     >>> median([3, 1, 2, 4, 5])\n>     3\n>     >>> median([-10, 4, 6, 1000, 10, 20])\n>     15.0\n>     \"\"\"\n>     l = sorted(l)\n>     if len(l) % 2 == 1:\n>         return l[len(l) // 2]\n\n", "coverage": "> def median(l: list):\n>     \"\"\"Return median of elements in the list l.\n>     >>> median([3, 1, 2, 4, 5])\n>     3\n>     >>> median([-10, 4, 6, 1000, 10, 20])\n>     15.0\n>     \"\"\"\n>     l = sorted(l)\n>     if len(l) % 2 == 1:\n>         return l[len(l) // 2]\n!     else:\n!         return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!"]}]}