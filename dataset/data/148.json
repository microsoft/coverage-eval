{"problem_id": 148, "problem": "check_dict_case", "method": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\"", "tests": [{"test_id": "595", "test": "def test():\n        assert check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))", "coverage_executed": "> def check_dict_case(dict):\n>     \"\"\"\n>     Given a dictionary, return True if all keys are strings in lower \n>     case or all keys are strings in upper case, else return False.\n>     The function should return False is the given dictionary is empty.\n>     Examples:\n>     check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n>     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n>     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n>     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n>     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n>     \"\"\"\n>     if len(dict.keys()) == 0:\n\n>     else:\n>         state = \"start\"\n>         for key in dict.keys():\n>             if isinstance(key, str) == False:\n\n\n>             if state == \"start\":\n>                 if key.isupper():\n\n>                 elif key.islower():\n>                     state = \"lower\"\n\n\n>             elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n\n\n>             else:\n>                 break\n>         return state == \"upper\" or state == \"lower\"", "coverage": "> def check_dict_case(dict):\n>     \"\"\"\n>     Given a dictionary, return True if all keys are strings in lower \n>     case or all keys are strings in upper case, else return False.\n>     The function should return False is the given dictionary is empty.\n>     Examples:\n>     check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n>     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n>     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n>     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n>     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n>     \"\"\"\n>     if len(dict.keys()) == 0:\n!         return False\n>     else:\n>         state = \"start\"\n>         for key in dict.keys():\n>             if isinstance(key, str) == False:\n!                 state = \"mixed\"\n!                 break\n>             if state == \"start\":\n>                 if key.isupper():\n!                     state = \"upper\"\n>                 elif key.islower():\n>                     state = \"lower\"\n!                 else:\n!                     break\n>             elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n!                     state = \"mixed\"\n!                     break\n>             else:\n>                 break\n>         return state == \"upper\" or state == \"lower\"", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">", ">", "!", ">", ">", "!", "!", ">", "!", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", ">", "!", "!", ">", ">", "!", ">", ">", "!", "!", ">", "!", "!", ">", ">", ">"]}, {"test_id": "594", "test": "def test():\n        assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))", "coverage_executed": "> def check_dict_case(dict):\n>     \"\"\"\n>     Given a dictionary, return True if all keys are strings in lower \n>     case or all keys are strings in upper case, else return False.\n>     The function should return False is the given dictionary is empty.\n>     Examples:\n>     check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n>     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n>     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n>     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n>     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n>     \"\"\"\n>     if len(dict.keys()) == 0:\n\n>     else:\n>         state = \"start\"\n>         for key in dict.keys():\n>             if isinstance(key, str) == False:\n\n\n>             if state == \"start\":\n>                 if key.isupper():\n>                     state = \"upper\"\n\n\n\n\n>             elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n\n\n>             else:\n>                 break\n>         return state == \"upper\" or state == \"lower\"", "coverage": "> def check_dict_case(dict):\n>     \"\"\"\n>     Given a dictionary, return True if all keys are strings in lower \n>     case or all keys are strings in upper case, else return False.\n>     The function should return False is the given dictionary is empty.\n>     Examples:\n>     check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n>     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n>     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n>     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n>     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n>     \"\"\"\n>     if len(dict.keys()) == 0:\n!         return False\n>     else:\n>         state = \"start\"\n>         for key in dict.keys():\n>             if isinstance(key, str) == False:\n!                 state = \"mixed\"\n!                 break\n>             if state == \"start\":\n>                 if key.isupper():\n>                     state = \"upper\"\n!                 elif key.islower():\n!                     state = \"lower\"\n!                 else:\n!                     break\n>             elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n!                     state = \"mixed\"\n!                     break\n>             else:\n>                 break\n>         return state == \"upper\" or state == \"lower\"", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", "!", "!", ">", "!", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", "!", "!", ">", "!", "!", ">", ">", ">"]}, {"test_id": "596", "test": "def test():\n        assert check_dict_case({}) == False, \"1st edge test error: \" + str(check_dict_case({}))", "coverage_executed": "> def check_dict_case(dict):\n>     \"\"\"\n>     Given a dictionary, return True if all keys are strings in lower \n>     case or all keys are strings in upper case, else return False.\n>     The function should return False is the given dictionary is empty.\n>     Examples:\n>     check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n>     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n>     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n>     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n>     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n>     \"\"\"\n>     if len(dict.keys()) == 0:\n>         return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "coverage": "> def check_dict_case(dict):\n>     \"\"\"\n>     Given a dictionary, return True if all keys are strings in lower \n>     case or all keys are strings in upper case, else return False.\n>     The function should return False is the given dictionary is empty.\n>     Examples:\n>     check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n>     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n>     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n>     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n>     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n>     \"\"\"\n>     if len(dict.keys()) == 0:\n>         return False\n!     else:\n!         state = \"start\"\n!         for key in dict.keys():\n!             if isinstance(key, str) == False:\n!                 state = \"mixed\"\n!                 break\n!             if state == \"start\":\n!                 if key.isupper():\n!                     state = \"upper\"\n!                 elif key.islower():\n!                     state = \"lower\"\n!                 else:\n!                     break\n!             elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n!                     state = \"mixed\"\n!                     break\n!             else:\n!                 break\n!         return state == \"upper\" or state == \"lower\"", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"]}, {"test_id": "593", "test": "def test():\n        assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))", "coverage_executed": "> def check_dict_case(dict):\n>     \"\"\"\n>     Given a dictionary, return True if all keys are strings in lower \n>     case or all keys are strings in upper case, else return False.\n>     The function should return False is the given dictionary is empty.\n>     Examples:\n>     check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n>     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n>     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n>     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n>     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n>     \"\"\"\n>     if len(dict.keys()) == 0:\n\n>     else:\n>         state = \"start\"\n>         for key in dict.keys():\n>             if isinstance(key, str) == False:\n\n\n>             if state == \"start\":\n>                 if key.isupper():\n\n>                 elif key.islower():\n\n>                 else:\n>                     break\n\n\n\n\n\n>         return state == \"upper\" or state == \"lower\"", "coverage": "> def check_dict_case(dict):\n>     \"\"\"\n>     Given a dictionary, return True if all keys are strings in lower \n>     case or all keys are strings in upper case, else return False.\n>     The function should return False is the given dictionary is empty.\n>     Examples:\n>     check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n>     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n>     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n>     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n>     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n>     \"\"\"\n>     if len(dict.keys()) == 0:\n!         return False\n>     else:\n>         state = \"start\"\n>         for key in dict.keys():\n>             if isinstance(key, str) == False:\n!                 state = \"mixed\"\n!                 break\n>             if state == \"start\":\n>                 if key.isupper():\n!                     state = \"upper\"\n>                 elif key.islower():\n!                     state = \"lower\"\n>                 else:\n>                     break\n!             elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n!                     state = \"mixed\"\n!                     break\n!             else:\n!                 break\n>         return state == \"upper\" or state == \"lower\"", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">", ">", "!", ">", "!", ">", ">", "!", "!", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", ">", "!", "!", ">", ">", "!", ">", "!", ">", ">", "!", "!", "!", "!", "!", ">"]}, {"test_id": "592", "test": "def test():\n        assert check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))", "coverage_executed": "> def check_dict_case(dict):\n>     \"\"\"\n>     Given a dictionary, return True if all keys are strings in lower \n>     case or all keys are strings in upper case, else return False.\n>     The function should return False is the given dictionary is empty.\n>     Examples:\n>     check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n>     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n>     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n>     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n>     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n>     \"\"\"\n>     if len(dict.keys()) == 0:\n\n>     else:\n>         state = \"start\"\n>         for key in dict.keys():\n>             if isinstance(key, str) == False:\n>                 state = \"mixed\"\n>                 break\n>             if state == \"start\":\n>                 if key.isupper():\n\n>                 elif key.islower():\n>                     state = \"lower\"\n\n\n\n\n\n\n\n>         return state == \"upper\" or state == \"lower\"", "coverage": "> def check_dict_case(dict):\n>     \"\"\"\n>     Given a dictionary, return True if all keys are strings in lower \n>     case or all keys are strings in upper case, else return False.\n>     The function should return False is the given dictionary is empty.\n>     Examples:\n>     check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n>     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n>     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n>     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n>     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n>     \"\"\"\n>     if len(dict.keys()) == 0:\n!         return False\n>     else:\n>         state = \"start\"\n>         for key in dict.keys():\n>             if isinstance(key, str) == False:\n>                 state = \"mixed\"\n>                 break\n>             if state == \"start\":\n>                 if key.isupper():\n!                     state = \"upper\"\n>                 elif key.islower():\n>                     state = \"lower\"\n!                 else:\n!                     break\n!             elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n!                     state = \"mixed\"\n!                     break\n!             else:\n!                 break\n>         return state == \"upper\" or state == \"lower\"", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">"]}, {"test_id": "590", "test": "def test():\n        assert check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}))", "coverage_executed": "> def check_dict_case(dict):\n>     \"\"\"\n>     Given a dictionary, return True if all keys are strings in lower \n>     case or all keys are strings in upper case, else return False.\n>     The function should return False is the given dictionary is empty.\n>     Examples:\n>     check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n>     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n>     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n>     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n>     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n>     \"\"\"\n>     if len(dict.keys()) == 0:\n\n>     else:\n>         state = \"start\"\n>         for key in dict.keys():\n>             if isinstance(key, str) == False:\n\n\n>             if state == \"start\":\n>                 if key.isupper():\n\n>                 elif key.islower():\n>                     state = \"lower\"\n\n\n>             elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n\n\n>             else:\n>                 break\n>         return state == \"upper\" or state == \"lower\"", "coverage": "> def check_dict_case(dict):\n>     \"\"\"\n>     Given a dictionary, return True if all keys are strings in lower \n>     case or all keys are strings in upper case, else return False.\n>     The function should return False is the given dictionary is empty.\n>     Examples:\n>     check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n>     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n>     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n>     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n>     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n>     \"\"\"\n>     if len(dict.keys()) == 0:\n!         return False\n>     else:\n>         state = \"start\"\n>         for key in dict.keys():\n>             if isinstance(key, str) == False:\n!                 state = \"mixed\"\n!                 break\n>             if state == \"start\":\n>                 if key.isupper():\n!                     state = \"upper\"\n>                 elif key.islower():\n>                     state = \"lower\"\n!                 else:\n!                     break\n>             elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n!                     state = \"mixed\"\n!                     break\n>             else:\n>                 break\n>         return state == \"upper\" or state == \"lower\"", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">", ">", "!", ">", ">", "!", "!", ">", "!", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", ">", "!", "!", ">", ">", "!", ">", ">", "!", "!", ">", "!", "!", ">", ">", ">"]}, {"test_id": "591", "test": "def test():\n        assert check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))", "coverage_executed": "> def check_dict_case(dict):\n>     \"\"\"\n>     Given a dictionary, return True if all keys are strings in lower \n>     case or all keys are strings in upper case, else return False.\n>     The function should return False is the given dictionary is empty.\n>     Examples:\n>     check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n>     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n>     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n>     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n>     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n>     \"\"\"\n>     if len(dict.keys()) == 0:\n\n>     else:\n>         state = \"start\"\n>         for key in dict.keys():\n>             if isinstance(key, str) == False:\n\n\n>             if state == \"start\":\n>                 if key.isupper():\n\n>                 elif key.islower():\n>                     state = \"lower\"\n\n\n>             elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n>                     state = \"mixed\"\n>                     break\n\n\n>         return state == \"upper\" or state == \"lower\"", "coverage": "> def check_dict_case(dict):\n>     \"\"\"\n>     Given a dictionary, return True if all keys are strings in lower \n>     case or all keys are strings in upper case, else return False.\n>     The function should return False is the given dictionary is empty.\n>     Examples:\n>     check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n>     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n>     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n>     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n>     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n>     \"\"\"\n>     if len(dict.keys()) == 0:\n!         return False\n>     else:\n>         state = \"start\"\n>         for key in dict.keys():\n>             if isinstance(key, str) == False:\n!                 state = \"mixed\"\n!                 break\n>             if state == \"start\":\n>                 if key.isupper():\n!                     state = \"upper\"\n>                 elif key.islower():\n>                     state = \"lower\"\n!                 else:\n!                     break\n>             elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n>                     state = \"mixed\"\n>                     break\n!             else:\n!                 break\n>         return state == \"upper\" or state == \"lower\"", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">", ">", "!", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", ">", "!", "!", ">", ">", "!", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}]}