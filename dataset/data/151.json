{"problem_id": 151, "problem": "truncate_number", "method": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1.0", "tests": [{"test_id": "12", "test": "def test():\n        assert abs(truncate_number(1.33) - 0.33) < 1e-6", "coverage_executed": "> def truncate_number(number: float) -> float:\n>     \"\"\" Given a positive floating point number, it can be decomposed into\n>     and integer part (largest integer smaller than given number) and decimals\n>     (leftover part always smaller than 1).\n>     Return the decimal part of the number.\n>     >>> truncate_number(3.5)\n>     0.5\n>     \"\"\"\n>     return number % 1.0", "coverage": "> def truncate_number(number: float) -> float:\n>     \"\"\" Given a positive floating point number, it can be decomposed into\n>     and integer part (largest integer smaller than given number) and decimals\n>     (leftover part always smaller than 1).\n>     Return the decimal part of the number.\n>     >>> truncate_number(3.5)\n>     0.5\n>     \"\"\"\n>     return number % 1.0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "13", "test": "def test():\n        assert abs(truncate_number(123.456) - 0.456) < 1e-6", "coverage_executed": "> def truncate_number(number: float) -> float:\n>     \"\"\" Given a positive floating point number, it can be decomposed into\n>     and integer part (largest integer smaller than given number) and decimals\n>     (leftover part always smaller than 1).\n>     Return the decimal part of the number.\n>     >>> truncate_number(3.5)\n>     0.5\n>     \"\"\"\n>     return number % 1.0", "coverage": "> def truncate_number(number: float) -> float:\n>     \"\"\" Given a positive floating point number, it can be decomposed into\n>     and integer part (largest integer smaller than given number) and decimals\n>     (leftover part always smaller than 1).\n>     Return the decimal part of the number.\n>     >>> truncate_number(3.5)\n>     0.5\n>     \"\"\"\n>     return number % 1.0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "11", "test": "def test():\n        assert truncate_number(3.5) == 0.5", "coverage_executed": "> def truncate_number(number: float) -> float:\n>     \"\"\" Given a positive floating point number, it can be decomposed into\n>     and integer part (largest integer smaller than given number) and decimals\n>     (leftover part always smaller than 1).\n>     Return the decimal part of the number.\n>     >>> truncate_number(3.5)\n>     0.5\n>     \"\"\"\n>     return number % 1.0", "coverage": "> def truncate_number(number: float) -> float:\n>     \"\"\" Given a positive floating point number, it can be decomposed into\n>     and integer part (largest integer smaller than given number) and decimals\n>     (leftover part always smaller than 1).\n>     Return the decimal part of the number.\n>     >>> truncate_number(3.5)\n>     0.5\n>     \"\"\"\n>     return number % 1.0", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}