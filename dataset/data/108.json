{"problem_id": 108, "problem": "is_multiply_prime", "method": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False", "tests": [{"test_id": "438", "test": "def test():\n        assert is_multiply_prime(11 * 9 * 9) == False", "coverage_executed": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n>     return False", "coverage": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "439", "test": "def test():\n        assert is_multiply_prime(11 * 13 * 7) == True", "coverage_executed": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n", "coverage": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "433", "test": "def test():\n        assert is_multiply_prime(10) == False", "coverage_executed": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n>     return False", "coverage": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "432", "test": "def test():\n        assert is_multiply_prime(8) == True", "coverage_executed": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n\n\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n", "coverage": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n!             if n%j == 0:\n!                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "!", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "430", "test": "def test():\n        assert is_multiply_prime(5) == False", "coverage_executed": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n>     return False", "coverage": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "431", "test": "def test():\n        assert is_multiply_prime(30) == True", "coverage_executed": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n", "coverage": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "435", "test": "def test():\n        assert is_multiply_prime(3 * 5 * 7) == True", "coverage_executed": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n", "coverage": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "434", "test": "def test():\n        assert is_multiply_prime(125) == True", "coverage_executed": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n", "coverage": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "436", "test": "def test():\n        assert is_multiply_prime(3 * 6 * 7) == False", "coverage_executed": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n>     return False", "coverage": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "437", "test": "def test():\n        assert is_multiply_prime(9 * 9 * 9) == False", "coverage_executed": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n>     return False", "coverage": "> def is_multiply_prime(a):\n>     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n>     and false otherwise.\n>     Knowing that (a) is less then 100. \n>     Example:\n>     is_multiply_prime(30) == True\n>     30 = 2 * 3 * 5\n>     \"\"\"\n>     def is_prime(n):\n>         for j in range(2,n):\n>             if n%j == 0:\n>                 return False\n>         return True\n>     for i in range(2,101):\n>         if not is_prime(i): continue\n>         for j in range(2,101):\n>             if not is_prime(j): continue\n>             for k in range(2,101):\n>                 if not is_prime(k): continue\n>                 if i*j*k == a: return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}]}