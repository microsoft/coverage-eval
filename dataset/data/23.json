{"problem_id": 23, "problem": "next_smallest", "method": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]", "tests": [{"test_id": "552", "test": "def test():\n        assert next_smallest([5, 1, 4, 3, 2]) == 2", "coverage_executed": "> def next_smallest(lst):\n>     \"\"\"\n>     You are given a list of integers.\n>     Write a function next_smallest() that returns the 2nd smallest element of the list.\n>     Return None if there is no such element.\n>     next_smallest([1, 2, 3, 4, 5]) == 2\n>     next_smallest([5, 1, 4, 3, 2]) == 2\n>     next_smallest([]) == None\n>     next_smallest([1, 1]) == None\n>     \"\"\"\n>     lst = sorted(set(lst))\n>     return None if len(lst) < 2 else lst[1]", "coverage": "> def next_smallest(lst):\n>     \"\"\"\n>     You are given a list of integers.\n>     Write a function next_smallest() that returns the 2nd smallest element of the list.\n>     Return None if there is no such element.\n>     next_smallest([1, 2, 3, 4, 5]) == 2\n>     next_smallest([5, 1, 4, 3, 2]) == 2\n>     next_smallest([]) == None\n>     next_smallest([1, 1]) == None\n>     \"\"\"\n>     lst = sorted(set(lst))\n>     return None if len(lst) < 2 else lst[1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "553", "test": "def test():\n        assert next_smallest([]) == None", "coverage_executed": "> def next_smallest(lst):\n>     \"\"\"\n>     You are given a list of integers.\n>     Write a function next_smallest() that returns the 2nd smallest element of the list.\n>     Return None if there is no such element.\n>     next_smallest([1, 2, 3, 4, 5]) == 2\n>     next_smallest([5, 1, 4, 3, 2]) == 2\n>     next_smallest([]) == None\n>     next_smallest([1, 1]) == None\n>     \"\"\"\n>     lst = sorted(set(lst))\n>     return None if len(lst) < 2 else lst[1]", "coverage": "> def next_smallest(lst):\n>     \"\"\"\n>     You are given a list of integers.\n>     Write a function next_smallest() that returns the 2nd smallest element of the list.\n>     Return None if there is no such element.\n>     next_smallest([1, 2, 3, 4, 5]) == 2\n>     next_smallest([5, 1, 4, 3, 2]) == 2\n>     next_smallest([]) == None\n>     next_smallest([1, 1]) == None\n>     \"\"\"\n>     lst = sorted(set(lst))\n>     return None if len(lst) < 2 else lst[1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "551", "test": "def test():\n        assert next_smallest([1, 2, 3, 4, 5]) == 2", "coverage_executed": "> def next_smallest(lst):\n>     \"\"\"\n>     You are given a list of integers.\n>     Write a function next_smallest() that returns the 2nd smallest element of the list.\n>     Return None if there is no such element.\n>     next_smallest([1, 2, 3, 4, 5]) == 2\n>     next_smallest([5, 1, 4, 3, 2]) == 2\n>     next_smallest([]) == None\n>     next_smallest([1, 1]) == None\n>     \"\"\"\n>     lst = sorted(set(lst))\n>     return None if len(lst) < 2 else lst[1]", "coverage": "> def next_smallest(lst):\n>     \"\"\"\n>     You are given a list of integers.\n>     Write a function next_smallest() that returns the 2nd smallest element of the list.\n>     Return None if there is no such element.\n>     next_smallest([1, 2, 3, 4, 5]) == 2\n>     next_smallest([5, 1, 4, 3, 2]) == 2\n>     next_smallest([]) == None\n>     next_smallest([1, 1]) == None\n>     \"\"\"\n>     lst = sorted(set(lst))\n>     return None if len(lst) < 2 else lst[1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "554", "test": "def test():\n        assert next_smallest([1, 1]) == None", "coverage_executed": "> def next_smallest(lst):\n>     \"\"\"\n>     You are given a list of integers.\n>     Write a function next_smallest() that returns the 2nd smallest element of the list.\n>     Return None if there is no such element.\n>     next_smallest([1, 2, 3, 4, 5]) == 2\n>     next_smallest([5, 1, 4, 3, 2]) == 2\n>     next_smallest([]) == None\n>     next_smallest([1, 1]) == None\n>     \"\"\"\n>     lst = sorted(set(lst))\n>     return None if len(lst) < 2 else lst[1]", "coverage": "> def next_smallest(lst):\n>     \"\"\"\n>     You are given a list of integers.\n>     Write a function next_smallest() that returns the 2nd smallest element of the list.\n>     Return None if there is no such element.\n>     next_smallest([1, 2, 3, 4, 5]) == 2\n>     next_smallest([5, 1, 4, 3, 2]) == 2\n>     next_smallest([]) == None\n>     next_smallest([1, 1]) == None\n>     \"\"\"\n>     lst = sorted(set(lst))\n>     return None if len(lst) < 2 else lst[1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "555", "test": "def test():\n        assert next_smallest([1,1,1,1,0]) == 1", "coverage_executed": "> def next_smallest(lst):\n>     \"\"\"\n>     You are given a list of integers.\n>     Write a function next_smallest() that returns the 2nd smallest element of the list.\n>     Return None if there is no such element.\n>     next_smallest([1, 2, 3, 4, 5]) == 2\n>     next_smallest([5, 1, 4, 3, 2]) == 2\n>     next_smallest([]) == None\n>     next_smallest([1, 1]) == None\n>     \"\"\"\n>     lst = sorted(set(lst))\n>     return None if len(lst) < 2 else lst[1]", "coverage": "> def next_smallest(lst):\n>     \"\"\"\n>     You are given a list of integers.\n>     Write a function next_smallest() that returns the 2nd smallest element of the list.\n>     Return None if there is no such element.\n>     next_smallest([1, 2, 3, 4, 5]) == 2\n>     next_smallest([5, 1, 4, 3, 2]) == 2\n>     next_smallest([]) == None\n>     next_smallest([1, 1]) == None\n>     \"\"\"\n>     lst = sorted(set(lst))\n>     return None if len(lst) < 2 else lst[1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "557", "test": "def test():\n        assert next_smallest([-35, 34, 12, -45]) == -35", "coverage_executed": "> def next_smallest(lst):\n>     \"\"\"\n>     You are given a list of integers.\n>     Write a function next_smallest() that returns the 2nd smallest element of the list.\n>     Return None if there is no such element.\n>     next_smallest([1, 2, 3, 4, 5]) == 2\n>     next_smallest([5, 1, 4, 3, 2]) == 2\n>     next_smallest([]) == None\n>     next_smallest([1, 1]) == None\n>     \"\"\"\n>     lst = sorted(set(lst))\n>     return None if len(lst) < 2 else lst[1]", "coverage": "> def next_smallest(lst):\n>     \"\"\"\n>     You are given a list of integers.\n>     Write a function next_smallest() that returns the 2nd smallest element of the list.\n>     Return None if there is no such element.\n>     next_smallest([1, 2, 3, 4, 5]) == 2\n>     next_smallest([5, 1, 4, 3, 2]) == 2\n>     next_smallest([]) == None\n>     next_smallest([1, 1]) == None\n>     \"\"\"\n>     lst = sorted(set(lst))\n>     return None if len(lst) < 2 else lst[1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "556", "test": "def test():\n        assert next_smallest([1, 0**0]) == None", "coverage_executed": "> def next_smallest(lst):\n>     \"\"\"\n>     You are given a list of integers.\n>     Write a function next_smallest() that returns the 2nd smallest element of the list.\n>     Return None if there is no such element.\n>     next_smallest([1, 2, 3, 4, 5]) == 2\n>     next_smallest([5, 1, 4, 3, 2]) == 2\n>     next_smallest([]) == None\n>     next_smallest([1, 1]) == None\n>     \"\"\"\n>     lst = sorted(set(lst))\n>     return None if len(lst) < 2 else lst[1]", "coverage": "> def next_smallest(lst):\n>     \"\"\"\n>     You are given a list of integers.\n>     Write a function next_smallest() that returns the 2nd smallest element of the list.\n>     Return None if there is no such element.\n>     next_smallest([1, 2, 3, 4, 5]) == 2\n>     next_smallest([5, 1, 4, 3, 2]) == 2\n>     next_smallest([]) == None\n>     next_smallest([1, 1]) == None\n>     \"\"\"\n>     lst = sorted(set(lst))\n>     return None if len(lst) < 2 else lst[1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}