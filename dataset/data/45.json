{"problem_id": 45, "problem": "total_match", "method": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n    if the two lists have the same number of chars, return the first list.\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2", "tests": [{"test_id": "427", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n\n\n\n\n\n\n\n\n\n", "coverage": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n!     l1 = 0\n!     for st in lst1:\n!         l1 += len(st)\n!     l2 = 0\n!     for st in lst2:\n!         l2 += len(st)\n!     if l1 <= l2:\n!         return lst1\n!     else:\n!         return lst2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "!", "!", "?", "!", "!", "!", "!", "!", "!"]}, {"test_id": "426", "test": "def test():\n        assert total_match(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']", "coverage_executed": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n>         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n>         l2 += len(st)\n>     if l1 <= l2:\n>         return lst1\n\n", "coverage": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n>         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n>         l2 += len(st)\n>     if l1 <= l2:\n>         return lst1\n!     else:\n!         return lst2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?", ">", ">", ">", ">", "!", "!"]}, {"test_id": "424", "test": "def test():\n        assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']", "coverage_executed": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n>         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n>         l2 += len(st)\n>     if l1 <= l2:\n\n>     else:\n>         return lst2", "coverage": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n>         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n>         l2 += len(st)\n>     if l1 <= l2:\n!         return lst1\n>     else:\n>         return lst2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?", ">", ">", ">", "!", ">", ">"]}, {"test_id": "425", "test": "def test():\n        assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']", "coverage_executed": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n>         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n>         l2 += len(st)\n>     if l1 <= l2:\n\n>     else:\n>         return lst2", "coverage": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n>         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n>         l2 += len(st)\n>     if l1 <= l2:\n!         return lst1\n>     else:\n>         return lst2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?", ">", ">", ">", "!", ">", ">"]}, {"test_id": "421", "test": "def test():\n        assert total_match(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']", "coverage_executed": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n>         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n>         l2 += len(st)\n>     if l1 <= l2:\n\n>     else:\n>         return lst2", "coverage": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n>         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n>         l2 += len(st)\n>     if l1 <= l2:\n!         return lst1\n>     else:\n>         return lst2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?", ">", ">", ">", "!", ">", ">"]}, {"test_id": "419", "test": "def test():\n        assert True, \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n\n\n\n\n\n\n\n\n\n", "coverage": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n!     l1 = 0\n!     for st in lst1:\n!         l1 += len(st)\n!     l2 = 0\n!     for st in lst2:\n!         l2 += len(st)\n!     if l1 <= l2:\n!         return lst1\n!     else:\n!         return lst2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "!", "!", "?", "!", "!", "!", "!", "!", "!"]}, {"test_id": "420", "test": "def test():\n        assert total_match([], []) == []", "coverage_executed": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n\n>     l2 = 0\n>     for st in lst2:\n\n>     if l1 <= l2:\n>         return lst1\n\n", "coverage": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n!         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n!         l2 += len(st)\n>     if l1 <= l2:\n>         return lst1\n!     else:\n!         return lst2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", "!", ">", ">", "!", "!"]}, {"test_id": "422", "test": "def test():\n        assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']", "coverage_executed": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n>         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n>         l2 += len(st)\n>     if l1 <= l2:\n>         return lst1\n\n", "coverage": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n>         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n>         l2 += len(st)\n>     if l1 <= l2:\n>         return lst1\n!     else:\n!         return lst2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?", ">", ">", ">", ">", "!", "!"]}, {"test_id": "423", "test": "def test():\n        assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']", "coverage_executed": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n>         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n>         l2 += len(st)\n>     if l1 <= l2:\n>         return lst1\n\n", "coverage": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n>         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n>         l2 += len(st)\n>     if l1 <= l2:\n>         return lst1\n!     else:\n!         return lst2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?", ">", ">", ">", ">", "!", "!"]}, {"test_id": "429", "test": "def test():\n        assert total_match(['this'], []) == []", "coverage_executed": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n>         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n\n>     if l1 <= l2:\n\n>     else:\n>         return lst2", "coverage": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n>         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n!         l2 += len(st)\n>     if l1 <= l2:\n!         return lst1\n>     else:\n>         return lst2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?", ">", "!", ">", "!", ">", ">"]}, {"test_id": "428", "test": "def test():\n        assert total_match([], ['this']) == []", "coverage_executed": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n\n>     l2 = 0\n>     for st in lst2:\n>         l2 += len(st)\n>     if l1 <= l2:\n>         return lst1\n\n", "coverage": "> def total_match(lst1, lst2):\n>     '''\n>     Write a function that accepts two lists of strings and returns the list that has \n>     total number of chars in the all strings of the list less than the other list.\n>     if the two lists have the same number of chars, return the first list.\n>     Examples\n>     total_match([], []) \u279e []\n>     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n>     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n>     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n>     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n>     '''\n>     l1 = 0\n>     for st in lst1:\n!         l1 += len(st)\n>     l2 = 0\n>     for st in lst2:\n>         l2 += len(st)\n>     if l1 <= l2:\n>         return lst1\n!     else:\n!         return lst2", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", ">", ">", "!", "!"]}]}