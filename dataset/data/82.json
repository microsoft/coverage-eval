{"problem_id": 82, "problem": "triples_sum_to_zero", "method": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "tests": [{"test_id": "172", "test": "def test():\n        assert triples_sum_to_zero([1, 3, 5, 0]) == False", "coverage_executed": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n\n>     return False", "coverage": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n!                     return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "!", "?"]}, {"test_id": "173", "test": "def test():\n        assert triples_sum_to_zero([1, 3, 5, -1]) == False", "coverage_executed": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n\n>     return False", "coverage": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n!                     return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "!", "?"]}, {"test_id": "177", "test": "def test():\n        assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True", "coverage_executed": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n>                     return True\n", "coverage": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n>                     return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?"]}, {"test_id": "180", "test": "def test():\n        assert triples_sum_to_zero([100, 3, 5, -100]) == False", "coverage_executed": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n\n>     return False", "coverage": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n!                     return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "!", "?"]}, {"test_id": "176", "test": "def test():\n        assert triples_sum_to_zero([1, 2, 5, 7]) == False", "coverage_executed": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n\n>     return False", "coverage": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n!                     return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "!", "?"]}, {"test_id": "174", "test": "def test():\n        assert triples_sum_to_zero([1, 3, -2, 1]) == True", "coverage_executed": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n>                     return True\n", "coverage": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n>                     return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?"]}, {"test_id": "175", "test": "def test():\n        assert triples_sum_to_zero([1, 2, 3, 7]) == False", "coverage_executed": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n\n>     return False", "coverage": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n!                     return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "!", "?"]}, {"test_id": "179", "test": "def test():\n        assert triples_sum_to_zero([1, 3, 5, -100]) == False", "coverage_executed": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n\n>     return False", "coverage": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n>             for k in range(j + 1, len(l)):\n>                 if l[i] + l[j] + l[k] == 0:\n!                     return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "!", "?"]}, {"test_id": "178", "test": "def test():\n        assert triples_sum_to_zero([1]) == False", "coverage_executed": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n\n\n\n>     return False", "coverage": "> def triples_sum_to_zero(l: list):\n>     \"\"\"\n>     triples_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are three distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> triples_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> triples_sum_to_zero([1, 3, -2, 1])\n>     True\n>     >>> triples_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n>     True\n>     >>> triples_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i in range(len(l)):\n>         for j in range(i + 1, len(l)):\n!             for k in range(j + 1, len(l)):\n!                 if l[i] + l[j] + l[k] == 0:\n!                     return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "!", "?"]}]}