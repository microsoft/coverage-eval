{"problem_id": 109, "problem": "prime_fib", "method": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]", "tests": [{"test_id": "169", "test": "def test():\n        assert prime_fib(8) == 28657", "coverage_executed": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n>                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n>                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", ">", ">", ">", ">", ">", ">"]}, {"test_id": "168", "test": "def test():\n        assert prime_fib(7) == 1597", "coverage_executed": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n>                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n>                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", ">", ">", ">", ">", ">", ">"]}, {"test_id": "162", "test": "def test():\n        assert prime_fib(1) == 2", "coverage_executed": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n\n\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n!             if p % k == 0:\n!                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", "?", "?", ">", ">", ">", ">", ">", ">"]}, {"test_id": "163", "test": "def test():\n        assert prime_fib(2) == 3", "coverage_executed": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n\n\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n!             if p % k == 0:\n!                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", "?", "?", ">", ">", ">", ">", ">", ">"]}, {"test_id": "164", "test": "def test():\n        assert prime_fib(3) == 5", "coverage_executed": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n!                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "!", "?", "?", ">", ">", ">", ">", ">", ">"]}, {"test_id": "165", "test": "def test():\n        assert prime_fib(4) == 13", "coverage_executed": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n>                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n>                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", ">", ">", ">", ">", ">", ">"]}, {"test_id": "170", "test": "def test():\n        assert prime_fib(9) == 514229", "coverage_executed": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n>                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n>                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", ">", ">", ">", ">", ">", ">"]}, {"test_id": "167", "test": "def test():\n        assert prime_fib(6) == 233", "coverage_executed": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n>                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n>                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", ">", ">", ">", ">", ">", ">"]}, {"test_id": "166", "test": "def test():\n        assert prime_fib(5) == 89", "coverage_executed": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n>                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n>                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", ">", ">", ">", ">", ">", ">"]}, {"test_id": "171", "test": "def test():\n        assert prime_fib(10) == 433494437", "coverage_executed": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n>                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage": "> def prime_fib(n: int):\n>     \"\"\"\n>     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>     >>> prime_fib(1)\n>     2\n>     >>> prime_fib(2)\n>     3\n>     >>> prime_fib(3)\n>     5\n>     >>> prime_fib(4)\n>     13\n>     >>> prime_fib(5)\n>     89\n>     \"\"\"\n>     import math\n>     def is_prime(p):\n>         if p < 2:\n>             return False\n>         for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n>             if p % k == 0:\n>                 return False\n>         return True\n>     f = [0, 1]\n>     while True:\n>         f.append(f[-1] + f[-2])\n>         if is_prime(f[-1]):\n>             n -= 1\n>         if n == 0:\n>             return f[-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "?", "?", ">", ">", ">", ">", ">", ">"]}]}