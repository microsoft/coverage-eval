{"problem_id": 114, "problem": "encrypt", "method": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out", "tests": [{"test_id": "549", "test": "def test():\n        assert encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"", "coverage_executed": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n\n\n>     return out", "coverage": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n!         else:\n!             out += c\n>     return out", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", "?"]}, {"test_id": "548", "test": "def test():\n        assert encrypt('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"", "coverage_executed": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n\n\n>     return out", "coverage": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n!         else:\n!             out += c\n>     return out", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", "?"]}, {"test_id": "543", "test": "def test():\n        assert encrypt('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n\n\n>     return out", "coverage": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n!         else:\n!             out += c\n>     return out", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", "?"]}, {"test_id": "544", "test": "def test():\n        assert encrypt('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n\n\n>     return out", "coverage": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n!         else:\n!             out += c\n>     return out", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", "?"]}, {"test_id": "545", "test": "def test():\n        assert encrypt('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n\n\n>     return out", "coverage": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n!         else:\n!             out += c\n>     return out", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", "?"]}, {"test_id": "550", "test": "def test():\n        assert encrypt('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n\n\n>     return out", "coverage": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n!         else:\n!             out += c\n>     return out", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", "?"]}, {"test_id": "547", "test": "def test():\n        assert encrypt('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n\n\n>     return out", "coverage": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n!         else:\n!             out += c\n>     return out", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", "?"]}, {"test_id": "546", "test": "def test():\n        assert encrypt('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n\n\n>     return out", "coverage": "> def encrypt(s):\n>     \"\"\"Create a function encrypt that takes a string as an argument and\n>     returns a string encrypted with the alphabet being rotated. \n>     The alphabet should be rotated in a manner such that the letters \n>     shift down by two multiplied to two places.\n>     For example:\n>     encrypt('hi') returns 'lm'\n>     encrypt('asdfghjkl') returns 'ewhjklnop'\n>     encrypt('gf') returns 'kj'\n>     encrypt('et') returns 'ix'\n>     \"\"\"\n>     d = 'abcdefghijklmnopqrstuvwxyz'\n>     out = ''\n>     for c in s:\n>         if c in d:\n>             out += d[(d.index(c)+2*2) % 26]\n!         else:\n!             out += c\n>     return out", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "!", "?"]}]}