{"problem_id": 140, "problem": "make_palindrome", "method": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    beginning_of_suffix = 0\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n    return string + string[:beginning_of_suffix][::-1]", "tests": [{"test_id": "43", "test": "def test():\n        assert make_palindrome('x') == 'x'", "coverage_executed": "> def is_palindrome(string: str) -> bool:\n>     \"\"\" Test if given string is a palindrome \"\"\"\n>     return string == string[::-1]\n> def make_palindrome(string: str) -> str:\n>     \"\"\" Find the shortest palindrome that begins with a supplied string.\n>     Algorithm idea is simple:\n>     - Find the longest postfix of supplied string that is a palindrome.\n>     - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>     >>> make_palindrome('')\n>     ''\n>     >>> make_palindrome('cat')\n>     'catac'\n>     >>> make_palindrome('cata')\n>     'catac'\n>     \"\"\"\n>     if not string:\n\n>     beginning_of_suffix = 0\n>     while not is_palindrome(string[beginning_of_suffix:]):\n\n>     return string + string[:beginning_of_suffix][::-1]", "coverage": "> def is_palindrome(string: str) -> bool:\n>     \"\"\" Test if given string is a palindrome \"\"\"\n>     return string == string[::-1]\n> def make_palindrome(string: str) -> str:\n>     \"\"\" Find the shortest palindrome that begins with a supplied string.\n>     Algorithm idea is simple:\n>     - Find the longest postfix of supplied string that is a palindrome.\n>     - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>     >>> make_palindrome('')\n>     ''\n>     >>> make_palindrome('cat')\n>     'catac'\n>     >>> make_palindrome('cata')\n>     'catac'\n>     \"\"\"\n>     if not string:\n!         return ''\n>     beginning_of_suffix = 0\n>     while not is_palindrome(string[beginning_of_suffix:]):\n!         beginning_of_suffix += 1\n>     return string + string[:beginning_of_suffix][::-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", "!", "?"]}, {"test_id": "42", "test": "def test():\n        assert make_palindrome('') == ''", "coverage_executed": "> def is_palindrome(string: str) -> bool:\n>     \"\"\" Test if given string is a palindrome \"\"\"\n\n> def make_palindrome(string: str) -> str:\n>     \"\"\" Find the shortest palindrome that begins with a supplied string.\n>     Algorithm idea is simple:\n>     - Find the longest postfix of supplied string that is a palindrome.\n>     - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>     >>> make_palindrome('')\n>     ''\n>     >>> make_palindrome('cat')\n>     'catac'\n>     >>> make_palindrome('cata')\n>     'catac'\n>     \"\"\"\n>     if not string:\n>         return ''\n\n\n\n", "coverage": "> def is_palindrome(string: str) -> bool:\n>     \"\"\" Test if given string is a palindrome \"\"\"\n!     return string == string[::-1]\n> def make_palindrome(string: str) -> str:\n>     \"\"\" Find the shortest palindrome that begins with a supplied string.\n>     Algorithm idea is simple:\n>     - Find the longest postfix of supplied string that is a palindrome.\n>     - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>     >>> make_palindrome('')\n>     ''\n>     >>> make_palindrome('cat')\n>     'catac'\n>     >>> make_palindrome('cata')\n>     'catac'\n>     \"\"\"\n>     if not string:\n>         return ''\n!     beginning_of_suffix = 0\n!     while not is_palindrome(string[beginning_of_suffix:]):\n!         beginning_of_suffix += 1\n!     return string + string[:beginning_of_suffix][::-1]", "coverage_sequence": [">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?", "!", "!", "?"]}, {"test_id": "45", "test": "def test():\n        assert make_palindrome('xyx') == 'xyx'", "coverage_executed": "> def is_palindrome(string: str) -> bool:\n>     \"\"\" Test if given string is a palindrome \"\"\"\n>     return string == string[::-1]\n> def make_palindrome(string: str) -> str:\n>     \"\"\" Find the shortest palindrome that begins with a supplied string.\n>     Algorithm idea is simple:\n>     - Find the longest postfix of supplied string that is a palindrome.\n>     - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>     >>> make_palindrome('')\n>     ''\n>     >>> make_palindrome('cat')\n>     'catac'\n>     >>> make_palindrome('cata')\n>     'catac'\n>     \"\"\"\n>     if not string:\n\n>     beginning_of_suffix = 0\n>     while not is_palindrome(string[beginning_of_suffix:]):\n\n>     return string + string[:beginning_of_suffix][::-1]", "coverage": "> def is_palindrome(string: str) -> bool:\n>     \"\"\" Test if given string is a palindrome \"\"\"\n>     return string == string[::-1]\n> def make_palindrome(string: str) -> str:\n>     \"\"\" Find the shortest palindrome that begins with a supplied string.\n>     Algorithm idea is simple:\n>     - Find the longest postfix of supplied string that is a palindrome.\n>     - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>     >>> make_palindrome('')\n>     ''\n>     >>> make_palindrome('cat')\n>     'catac'\n>     >>> make_palindrome('cata')\n>     'catac'\n>     \"\"\"\n>     if not string:\n!         return ''\n>     beginning_of_suffix = 0\n>     while not is_palindrome(string[beginning_of_suffix:]):\n!         beginning_of_suffix += 1\n>     return string + string[:beginning_of_suffix][::-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", "!", "?"]}, {"test_id": "44", "test": "def test():\n        assert make_palindrome('xyz') == 'xyzyx'", "coverage_executed": "> def is_palindrome(string: str) -> bool:\n>     \"\"\" Test if given string is a palindrome \"\"\"\n>     return string == string[::-1]\n> def make_palindrome(string: str) -> str:\n>     \"\"\" Find the shortest palindrome that begins with a supplied string.\n>     Algorithm idea is simple:\n>     - Find the longest postfix of supplied string that is a palindrome.\n>     - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>     >>> make_palindrome('')\n>     ''\n>     >>> make_palindrome('cat')\n>     'catac'\n>     >>> make_palindrome('cata')\n>     'catac'\n>     \"\"\"\n>     if not string:\n\n>     beginning_of_suffix = 0\n>     while not is_palindrome(string[beginning_of_suffix:]):\n>         beginning_of_suffix += 1\n>     return string + string[:beginning_of_suffix][::-1]", "coverage": "> def is_palindrome(string: str) -> bool:\n>     \"\"\" Test if given string is a palindrome \"\"\"\n>     return string == string[::-1]\n> def make_palindrome(string: str) -> str:\n>     \"\"\" Find the shortest palindrome that begins with a supplied string.\n>     Algorithm idea is simple:\n>     - Find the longest postfix of supplied string that is a palindrome.\n>     - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>     >>> make_palindrome('')\n>     ''\n>     >>> make_palindrome('cat')\n>     'catac'\n>     >>> make_palindrome('cata')\n>     'catac'\n>     \"\"\"\n>     if not string:\n!         return ''\n>     beginning_of_suffix = 0\n>     while not is_palindrome(string[beginning_of_suffix:]):\n>         beginning_of_suffix += 1\n>     return string + string[:beginning_of_suffix][::-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", "?"]}, {"test_id": "46", "test": "def test():\n        assert make_palindrome('jerry') == 'jerryrrej'", "coverage_executed": "> def is_palindrome(string: str) -> bool:\n>     \"\"\" Test if given string is a palindrome \"\"\"\n>     return string == string[::-1]\n> def make_palindrome(string: str) -> str:\n>     \"\"\" Find the shortest palindrome that begins with a supplied string.\n>     Algorithm idea is simple:\n>     - Find the longest postfix of supplied string that is a palindrome.\n>     - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>     >>> make_palindrome('')\n>     ''\n>     >>> make_palindrome('cat')\n>     'catac'\n>     >>> make_palindrome('cata')\n>     'catac'\n>     \"\"\"\n>     if not string:\n\n>     beginning_of_suffix = 0\n>     while not is_palindrome(string[beginning_of_suffix:]):\n>         beginning_of_suffix += 1\n>     return string + string[:beginning_of_suffix][::-1]", "coverage": "> def is_palindrome(string: str) -> bool:\n>     \"\"\" Test if given string is a palindrome \"\"\"\n>     return string == string[::-1]\n> def make_palindrome(string: str) -> str:\n>     \"\"\" Find the shortest palindrome that begins with a supplied string.\n>     Algorithm idea is simple:\n>     - Find the longest postfix of supplied string that is a palindrome.\n>     - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>     >>> make_palindrome('')\n>     ''\n>     >>> make_palindrome('cat')\n>     'catac'\n>     >>> make_palindrome('cata')\n>     'catac'\n>     \"\"\"\n>     if not string:\n!         return ''\n>     beginning_of_suffix = 0\n>     while not is_palindrome(string[beginning_of_suffix:]):\n>         beginning_of_suffix += 1\n>     return string + string[:beginning_of_suffix][::-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", "?"]}]}