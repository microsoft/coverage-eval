{"problem_id": 152, "problem": "decode_shift", "method": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "tests": [{"test_id": "231", "test": "def test():\n            assert decode_shift(copy.deepcopy(encoded_str)) == str", "coverage_executed": "> def encode_shift(s: str):\n>     \"\"\"\n>     returns encoded string by shifting every character by 5 in the alphabet.\n>     \"\"\"\n\n> def decode_shift(s: str):\n>     \"\"\"\n>     takes as input string encoded with encode_shift function. Returns decoded string.\n>     \"\"\"\n", "coverage": "> def encode_shift(s: str):\n>     \"\"\"\n>     returns encoded string by shifting every character by 5 in the alphabet.\n>     \"\"\"\n!     return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n> def decode_shift(s: str):\n>     \"\"\"\n>     takes as input string encoded with encode_shift function. Returns decoded string.\n>     \"\"\"\n!     return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "coverage_sequence": [">", ">", ">", ">", "!", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}