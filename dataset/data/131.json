{"problem_id": 131, "problem": "find_max", "method": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "tests": [{"test_id": "1149", "test": "def test():\n        assert (find_max([\"b\"]) == \"b\"), 't9'", "coverage_executed": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1148", "test": "def test():\n        assert (find_max([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'", "coverage_executed": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1141", "test": "def test():\n        assert (find_max([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"", "coverage_executed": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1142", "test": "def test():\n        assert (find_max([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'", "coverage_executed": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1143", "test": "def test():\n        assert (find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'", "coverage_executed": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1150", "test": "def test():\n        assert (find_max([\"play\", \"play\", \"play\"]) == \"play\"), 't10'", "coverage_executed": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1147", "test": "def test():\n        assert (find_max([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'", "coverage_executed": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1146", "test": "def test():\n        assert (find_max([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'", "coverage_executed": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1144", "test": "def test():\n        assert (find_max([\"abc\", \"cba\"]) == \"abc\"), 't4'", "coverage_executed": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "1145", "test": "def test():\n        assert (find_max([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'", "coverage_executed": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage": "> def find_max(words):\n>     \"\"\"Write a function that accepts a list of strings.\n>     The list contains different words. Return the word with maximum number\n>     of unique characters. If multiple strings have maximum number of unique\n>     characters, return the one which comes first in lexicographical order.\n>     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n>     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n>     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n>     \"\"\"\n>     return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}