{"problem_id": 51, "problem": "strange_sort_list", "method": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res", "tests": [{"test_id": "392", "test": "def test():\n        assert strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]", "coverage_executed": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "393", "test": "def test():\n        assert strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]", "coverage_executed": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "386", "test": "def test():\n        assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "coverage_executed": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "391", "test": "def test():\n        assert strange_sort_list([]) == []", "coverage_executed": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n\n\n\n>     return res", "coverage": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n!         res.append(min(lst) if switch else max(lst))\n!         lst.remove(res[-1])\n!         switch = not switch\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "!", "!", "?"]}, {"test_id": "390", "test": "def test():\n        assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "coverage_executed": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "387", "test": "def test():\n        assert strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]", "coverage_executed": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "394", "test": "def test():\n        assert strange_sort_list([111111]) == [111111]", "coverage_executed": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "388", "test": "def test():\n        assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]", "coverage_executed": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "389", "test": "def test():\n        assert strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]", "coverage_executed": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage": "> def strange_sort_list(lst):\n>     '''\n>     Given list of integers, return list in strange order.\n>     Strange sorting, is when you start with the minimum value,\n>     then maximum of the remaining integers, then minimum and so on.\n>     Examples:\n>     strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n>     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n>     strange_sort_list([]) == []\n>     '''\n>     res, switch = [], True\n>     while lst:\n>         res.append(min(lst) if switch else max(lst))\n>         lst.remove(res[-1])\n>         switch = not switch\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}]}