{"problem_id": 39, "problem": "split_words", "method": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "tests": [{"test_id": "835", "test": "def test():\n        assert split_words(\"Hello world,!\") == [\"Hello\",\"world,!\"]", "coverage_executed": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n>         return txt.split()\n\n\n\n", "coverage": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n>         return txt.split()\n!     elif \",\" in txt:\n!         return txt.replace(',',' ').split()\n!     else:\n!         return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "!", "!"]}, {"test_id": "834", "test": "def test():\n        assert split_words(\"Hello,world!\") == [\"Hello\",\"world!\"]", "coverage_executed": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n\n>     elif \",\" in txt:\n>         return txt.replace(',',' ').split()\n\n", "coverage": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n!         return txt.split()\n>     elif \",\" in txt:\n>         return txt.replace(',',' ').split()\n!     else:\n!         return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", "!", "!"]}, {"test_id": "836", "test": "def test():\n        assert split_words(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]", "coverage_executed": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n>         return txt.split()\n\n\n\n", "coverage": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n>         return txt.split()\n!     elif \",\" in txt:\n!         return txt.replace(',',' ').split()\n!     else:\n!         return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "!", "!"]}, {"test_id": "837", "test": "def test():\n        assert split_words(\"abcdef\") == 3", "coverage_executed": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n\n>     elif \",\" in txt:\n\n>     else:\n>         return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "coverage": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n!         return txt.split()\n>     elif \",\" in txt:\n!         return txt.replace(',',' ').split()\n>     else:\n>         return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", ">"]}, {"test_id": "833", "test": "def test():\n        assert split_words(\"Hello world!\") == [\"Hello\",\"world!\"]", "coverage_executed": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n>         return txt.split()\n\n\n\n", "coverage": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n>         return txt.split()\n!     elif \",\" in txt:\n!         return txt.replace(',',' ').split()\n!     else:\n!         return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "!", "!"]}, {"test_id": "840", "test": "def test():\n        assert split_words(\"\") == 0", "coverage_executed": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n\n>     elif \",\" in txt:\n\n>     else:\n>         return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "coverage": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n!         return txt.split()\n>     elif \",\" in txt:\n!         return txt.replace(',',' ').split()\n>     else:\n>         return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", ">"]}, {"test_id": "838", "test": "def test():\n        assert split_words(\"aaabb\") == 2", "coverage_executed": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n\n>     elif \",\" in txt:\n\n>     else:\n>         return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "coverage": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n!         return txt.split()\n>     elif \",\" in txt:\n!         return txt.replace(',',' ').split()\n>     else:\n>         return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", ">"]}, {"test_id": "839", "test": "def test():\n        assert split_words(\"aaaBb\") == 1", "coverage_executed": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n\n>     elif \",\" in txt:\n\n>     else:\n>         return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "coverage": "> def split_words(txt):\n>     '''\n>     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n>     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n>     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n>     Examples\n>     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n>     split_words(\"abcdef\") == 3 \n>     '''\n>     if \" \" in txt:\n!         return txt.split()\n>     elif \",\" in txt:\n!         return txt.replace(',',' ').split()\n>     else:\n>         return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", ">"]}]}