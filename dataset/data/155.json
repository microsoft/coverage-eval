{"problem_id": 155, "problem": "how_many_times", "method": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n    return times", "tests": [{"test_id": "73", "test": "def test():\n        assert how_many_times('', 'x') == 0", "coverage_executed": "> def how_many_times(string: str, substring: str) -> int:\n>     \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n>     >>> how_many_times('', 'a')\n>     0\n>     >>> how_many_times('aaa', 'a')\n>     3\n>     >>> how_many_times('aaaa', 'aa')\n>     3\n>     \"\"\"\n>     times = 0\n>     for i in range(len(string) - len(substring) + 1):\n\n\n>     return times", "coverage": "> def how_many_times(string: str, substring: str) -> int:\n>     \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n>     >>> how_many_times('', 'a')\n>     0\n>     >>> how_many_times('aaa', 'a')\n>     3\n>     >>> how_many_times('aaaa', 'aa')\n>     3\n>     \"\"\"\n>     times = 0\n>     for i in range(len(string) - len(substring) + 1):\n!         if string[i:i+len(substring)] == substring:\n!             times += 1\n>     return times", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "!", "?"]}, {"test_id": "74", "test": "def test():\n        assert how_many_times('xyxyxyx', 'x') == 4", "coverage_executed": "> def how_many_times(string: str, substring: str) -> int:\n>     \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n>     >>> how_many_times('', 'a')\n>     0\n>     >>> how_many_times('aaa', 'a')\n>     3\n>     >>> how_many_times('aaaa', 'aa')\n>     3\n>     \"\"\"\n>     times = 0\n>     for i in range(len(string) - len(substring) + 1):\n>         if string[i:i+len(substring)] == substring:\n>             times += 1\n>     return times", "coverage": "> def how_many_times(string: str, substring: str) -> int:\n>     \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n>     >>> how_many_times('', 'a')\n>     0\n>     >>> how_many_times('aaa', 'a')\n>     3\n>     >>> how_many_times('aaaa', 'aa')\n>     3\n>     \"\"\"\n>     times = 0\n>     for i in range(len(string) - len(substring) + 1):\n>         if string[i:i+len(substring)] == substring:\n>             times += 1\n>     return times", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "75", "test": "def test():\n        assert how_many_times('cacacacac', 'cac') == 4", "coverage_executed": "> def how_many_times(string: str, substring: str) -> int:\n>     \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n>     >>> how_many_times('', 'a')\n>     0\n>     >>> how_many_times('aaa', 'a')\n>     3\n>     >>> how_many_times('aaaa', 'aa')\n>     3\n>     \"\"\"\n>     times = 0\n>     for i in range(len(string) - len(substring) + 1):\n>         if string[i:i+len(substring)] == substring:\n>             times += 1\n>     return times", "coverage": "> def how_many_times(string: str, substring: str) -> int:\n>     \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n>     >>> how_many_times('', 'a')\n>     0\n>     >>> how_many_times('aaa', 'a')\n>     3\n>     >>> how_many_times('aaaa', 'aa')\n>     3\n>     \"\"\"\n>     times = 0\n>     for i in range(len(string) - len(substring) + 1):\n>         if string[i:i+len(substring)] == substring:\n>             times += 1\n>     return times", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "76", "test": "def test():\n        assert how_many_times('john doe', 'john') == 1", "coverage_executed": "> def how_many_times(string: str, substring: str) -> int:\n>     \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n>     >>> how_many_times('', 'a')\n>     0\n>     >>> how_many_times('aaa', 'a')\n>     3\n>     >>> how_many_times('aaaa', 'aa')\n>     3\n>     \"\"\"\n>     times = 0\n>     for i in range(len(string) - len(substring) + 1):\n>         if string[i:i+len(substring)] == substring:\n>             times += 1\n>     return times", "coverage": "> def how_many_times(string: str, substring: str) -> int:\n>     \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n>     >>> how_many_times('', 'a')\n>     0\n>     >>> how_many_times('aaa', 'a')\n>     3\n>     >>> how_many_times('aaaa', 'aa')\n>     3\n>     \"\"\"\n>     times = 0\n>     for i in range(len(string) - len(substring) + 1):\n>         if string[i:i+len(substring)] == substring:\n>             times += 1\n>     return times", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}]}