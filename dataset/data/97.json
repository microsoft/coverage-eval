{"problem_id": 97, "problem": "parse_music", "method": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]", "tests": [{"test_id": "72", "test": "def test():\n        assert parse_music('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]", "coverage_executed": "> def parse_music(music_string: str) -> List[int]:\n>     \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n>     Your task is to parse this string and return list of integers corresponding to how many beats does each\n>     not last.\n>     Here is a legend:\n>     'o' - whole note, lasts four beats\n>     'o|' - half note, lasts two beats\n>     '.|' - quater note, lasts one beat\n>     >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n>     [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n>     \"\"\"\n>     note_map = {'o': 4, 'o|': 2, '.|': 1}\n>     return [note_map[x] for x in music_string.split(' ') if x]", "coverage": "> def parse_music(music_string: str) -> List[int]:\n>     \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n>     Your task is to parse this string and return list of integers corresponding to how many beats does each\n>     not last.\n>     Here is a legend:\n>     'o' - whole note, lasts four beats\n>     'o|' - half note, lasts two beats\n>     '.|' - quater note, lasts one beat\n>     >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n>     [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n>     \"\"\"\n>     note_map = {'o': 4, 'o|': 2, '.|': 1}\n>     return [note_map[x] for x in music_string.split(' ') if x]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "71", "test": "def test():\n        assert parse_music('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]", "coverage_executed": "> def parse_music(music_string: str) -> List[int]:\n>     \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n>     Your task is to parse this string and return list of integers corresponding to how many beats does each\n>     not last.\n>     Here is a legend:\n>     'o' - whole note, lasts four beats\n>     'o|' - half note, lasts two beats\n>     '.|' - quater note, lasts one beat\n>     >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n>     [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n>     \"\"\"\n>     note_map = {'o': 4, 'o|': 2, '.|': 1}\n>     return [note_map[x] for x in music_string.split(' ') if x]", "coverage": "> def parse_music(music_string: str) -> List[int]:\n>     \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n>     Your task is to parse this string and return list of integers corresponding to how many beats does each\n>     not last.\n>     Here is a legend:\n>     'o' - whole note, lasts four beats\n>     'o|' - half note, lasts two beats\n>     '.|' - quater note, lasts one beat\n>     >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n>     [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n>     \"\"\"\n>     note_map = {'o': 4, 'o|': 2, '.|': 1}\n>     return [note_map[x] for x in music_string.split(' ') if x]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "70", "test": "def test():\n        assert parse_music('.| .| .| .|') == [1, 1, 1, 1]", "coverage_executed": "> def parse_music(music_string: str) -> List[int]:\n>     \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n>     Your task is to parse this string and return list of integers corresponding to how many beats does each\n>     not last.\n>     Here is a legend:\n>     'o' - whole note, lasts four beats\n>     'o|' - half note, lasts two beats\n>     '.|' - quater note, lasts one beat\n>     >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n>     [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n>     \"\"\"\n>     note_map = {'o': 4, 'o|': 2, '.|': 1}\n>     return [note_map[x] for x in music_string.split(' ') if x]", "coverage": "> def parse_music(music_string: str) -> List[int]:\n>     \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n>     Your task is to parse this string and return list of integers corresponding to how many beats does each\n>     not last.\n>     Here is a legend:\n>     'o' - whole note, lasts four beats\n>     'o|' - half note, lasts two beats\n>     '.|' - quater note, lasts one beat\n>     >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n>     [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n>     \"\"\"\n>     note_map = {'o': 4, 'o|': 2, '.|': 1}\n>     return [note_map[x] for x in music_string.split(' ') if x]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "68", "test": "def test():\n        assert parse_music('') == []", "coverage_executed": "> def parse_music(music_string: str) -> List[int]:\n>     \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n>     Your task is to parse this string and return list of integers corresponding to how many beats does each\n>     not last.\n>     Here is a legend:\n>     'o' - whole note, lasts four beats\n>     'o|' - half note, lasts two beats\n>     '.|' - quater note, lasts one beat\n>     >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n>     [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n>     \"\"\"\n>     note_map = {'o': 4, 'o|': 2, '.|': 1}\n>     return [note_map[x] for x in music_string.split(' ') if x]", "coverage": "> def parse_music(music_string: str) -> List[int]:\n>     \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n>     Your task is to parse this string and return list of integers corresponding to how many beats does each\n>     not last.\n>     Here is a legend:\n>     'o' - whole note, lasts four beats\n>     'o|' - half note, lasts two beats\n>     '.|' - quater note, lasts one beat\n>     >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n>     [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n>     \"\"\"\n>     note_map = {'o': 4, 'o|': 2, '.|': 1}\n>     return [note_map[x] for x in music_string.split(' ') if x]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "69", "test": "def test():\n        assert parse_music('o o o o') == [4, 4, 4, 4]", "coverage_executed": "> def parse_music(music_string: str) -> List[int]:\n>     \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n>     Your task is to parse this string and return list of integers corresponding to how many beats does each\n>     not last.\n>     Here is a legend:\n>     'o' - whole note, lasts four beats\n>     'o|' - half note, lasts two beats\n>     '.|' - quater note, lasts one beat\n>     >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n>     [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n>     \"\"\"\n>     note_map = {'o': 4, 'o|': 2, '.|': 1}\n>     return [note_map[x] for x in music_string.split(' ') if x]", "coverage": "> def parse_music(music_string: str) -> List[int]:\n>     \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n>     Your task is to parse this string and return list of integers corresponding to how many beats does each\n>     not last.\n>     Here is a legend:\n>     'o' - whole note, lasts four beats\n>     'o|' - half note, lasts two beats\n>     '.|' - quater note, lasts one beat\n>     >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n>     [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n>     \"\"\"\n>     note_map = {'o': 4, 'o|': 2, '.|': 1}\n>     return [note_map[x] for x in music_string.split(' ') if x]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}