{"problem_id": 67, "problem": "is_bored", "method": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)", "tests": [{"test_id": "564", "test": "def test():\n        assert is_bored(\"You and I are going for a walk\") == 0, \"Test 6\"", "coverage_executed": "> def is_bored(S):\n>     \"\"\"\n>     You'll be given a string of words, and your task is to count the number\n>     of boredoms. A boredom is a sentence that starts with the word \"I\".\n>     Sentences are delimited by '.', '?' or '!'.\n>     For example:\n>     >>> is_bored(\"Hello world\")\n>     0\n>     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n>     1\n>     \"\"\"\n>     import re\n>     sentences = re.split(r'[.?!]\\s*', S)\n>     return sum(sentence[0:2] == 'I ' for sentence in sentences)", "coverage": "> def is_bored(S):\n>     \"\"\"\n>     You'll be given a string of words, and your task is to count the number\n>     of boredoms. A boredom is a sentence that starts with the word \"I\".\n>     Sentences are delimited by '.', '?' or '!'.\n>     For example:\n>     >>> is_bored(\"Hello world\")\n>     0\n>     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n>     1\n>     \"\"\"\n>     import re\n>     sentences = re.split(r'[.?!]\\s*', S)\n>     return sum(sentence[0:2] == 'I ' for sentence in sentences)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "565", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def is_bored(S):\n>     \"\"\"\n>     You'll be given a string of words, and your task is to count the number\n>     of boredoms. A boredom is a sentence that starts with the word \"I\".\n>     Sentences are delimited by '.', '?' or '!'.\n>     For example:\n>     >>> is_bored(\"Hello world\")\n>     0\n>     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n>     1\n>     \"\"\"\n\n\n", "coverage": "> def is_bored(S):\n>     \"\"\"\n>     You'll be given a string of words, and your task is to count the number\n>     of boredoms. A boredom is a sentence that starts with the word \"I\".\n>     Sentences are delimited by '.', '?' or '!'.\n>     For example:\n>     >>> is_bored(\"Hello world\")\n>     0\n>     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n>     1\n>     \"\"\"\n!     import re\n!     sentences = re.split(r'[.?!]\\s*', S)\n!     return sum(sentence[0:2] == 'I ' for sentence in sentences)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "559", "test": "def test():\n        assert is_bored(\"Hello world\") == 0, \"Test 1\"", "coverage_executed": "> def is_bored(S):\n>     \"\"\"\n>     You'll be given a string of words, and your task is to count the number\n>     of boredoms. A boredom is a sentence that starts with the word \"I\".\n>     Sentences are delimited by '.', '?' or '!'.\n>     For example:\n>     >>> is_bored(\"Hello world\")\n>     0\n>     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n>     1\n>     \"\"\"\n>     import re\n>     sentences = re.split(r'[.?!]\\s*', S)\n>     return sum(sentence[0:2] == 'I ' for sentence in sentences)", "coverage": "> def is_bored(S):\n>     \"\"\"\n>     You'll be given a string of words, and your task is to count the number\n>     of boredoms. A boredom is a sentence that starts with the word \"I\".\n>     Sentences are delimited by '.', '?' or '!'.\n>     For example:\n>     >>> is_bored(\"Hello world\")\n>     0\n>     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n>     1\n>     \"\"\"\n>     import re\n>     sentences = re.split(r'[.?!]\\s*', S)\n>     return sum(sentence[0:2] == 'I ' for sentence in sentences)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "561", "test": "def test():\n        assert is_bored(\"I love It !\") == 1, \"Test 3\"", "coverage_executed": "> def is_bored(S):\n>     \"\"\"\n>     You'll be given a string of words, and your task is to count the number\n>     of boredoms. A boredom is a sentence that starts with the word \"I\".\n>     Sentences are delimited by '.', '?' or '!'.\n>     For example:\n>     >>> is_bored(\"Hello world\")\n>     0\n>     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n>     1\n>     \"\"\"\n>     import re\n>     sentences = re.split(r'[.?!]\\s*', S)\n>     return sum(sentence[0:2] == 'I ' for sentence in sentences)", "coverage": "> def is_bored(S):\n>     \"\"\"\n>     You'll be given a string of words, and your task is to count the number\n>     of boredoms. A boredom is a sentence that starts with the word \"I\".\n>     Sentences are delimited by '.', '?' or '!'.\n>     For example:\n>     >>> is_bored(\"Hello world\")\n>     0\n>     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n>     1\n>     \"\"\"\n>     import re\n>     sentences = re.split(r'[.?!]\\s*', S)\n>     return sum(sentence[0:2] == 'I ' for sentence in sentences)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "560", "test": "def test():\n        assert is_bored(\"Is the sky blue?\") == 0, \"Test 2\"", "coverage_executed": "> def is_bored(S):\n>     \"\"\"\n>     You'll be given a string of words, and your task is to count the number\n>     of boredoms. A boredom is a sentence that starts with the word \"I\".\n>     Sentences are delimited by '.', '?' or '!'.\n>     For example:\n>     >>> is_bored(\"Hello world\")\n>     0\n>     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n>     1\n>     \"\"\"\n>     import re\n>     sentences = re.split(r'[.?!]\\s*', S)\n>     return sum(sentence[0:2] == 'I ' for sentence in sentences)", "coverage": "> def is_bored(S):\n>     \"\"\"\n>     You'll be given a string of words, and your task is to count the number\n>     of boredoms. A boredom is a sentence that starts with the word \"I\".\n>     Sentences are delimited by '.', '?' or '!'.\n>     For example:\n>     >>> is_bored(\"Hello world\")\n>     0\n>     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n>     1\n>     \"\"\"\n>     import re\n>     sentences = re.split(r'[.?!]\\s*', S)\n>     return sum(sentence[0:2] == 'I ' for sentence in sentences)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "562", "test": "def test():\n        assert is_bored(\"bIt\") == 0, \"Test 4\"", "coverage_executed": "> def is_bored(S):\n>     \"\"\"\n>     You'll be given a string of words, and your task is to count the number\n>     of boredoms. A boredom is a sentence that starts with the word \"I\".\n>     Sentences are delimited by '.', '?' or '!'.\n>     For example:\n>     >>> is_bored(\"Hello world\")\n>     0\n>     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n>     1\n>     \"\"\"\n>     import re\n>     sentences = re.split(r'[.?!]\\s*', S)\n>     return sum(sentence[0:2] == 'I ' for sentence in sentences)", "coverage": "> def is_bored(S):\n>     \"\"\"\n>     You'll be given a string of words, and your task is to count the number\n>     of boredoms. A boredom is a sentence that starts with the word \"I\".\n>     Sentences are delimited by '.', '?' or '!'.\n>     For example:\n>     >>> is_bored(\"Hello world\")\n>     0\n>     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n>     1\n>     \"\"\"\n>     import re\n>     sentences = re.split(r'[.?!]\\s*', S)\n>     return sum(sentence[0:2] == 'I ' for sentence in sentences)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "563", "test": "def test():\n        assert is_bored(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"", "coverage_executed": "> def is_bored(S):\n>     \"\"\"\n>     You'll be given a string of words, and your task is to count the number\n>     of boredoms. A boredom is a sentence that starts with the word \"I\".\n>     Sentences are delimited by '.', '?' or '!'.\n>     For example:\n>     >>> is_bored(\"Hello world\")\n>     0\n>     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n>     1\n>     \"\"\"\n>     import re\n>     sentences = re.split(r'[.?!]\\s*', S)\n>     return sum(sentence[0:2] == 'I ' for sentence in sentences)", "coverage": "> def is_bored(S):\n>     \"\"\"\n>     You'll be given a string of words, and your task is to count the number\n>     of boredoms. A boredom is a sentence that starts with the word \"I\".\n>     Sentences are delimited by '.', '?' or '!'.\n>     For example:\n>     >>> is_bored(\"Hello world\")\n>     0\n>     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n>     1\n>     \"\"\"\n>     import re\n>     sentences = re.split(r'[.?!]\\s*', S)\n>     return sum(sentence[0:2] == 'I ' for sentence in sentences)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}