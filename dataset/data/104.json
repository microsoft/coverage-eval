{"problem_id": 104, "problem": "rounded_avg", "method": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))", "tests": [{"test_id": "660", "test": "def test():\n        assert rounded_avg(5, 1) == -1", "coverage_executed": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n>         return -1\n\n\n\n", "coverage": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n>         return -1\n!     summation = 0\n!     for i in range(n, m+1):\n!         summation += i\n!     return bin(round(summation/(m - n + 1)))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?", "!", "!", "?"]}, {"test_id": "658", "test": "def test():\n        assert rounded_avg(197,233) == \"0b11010111\"", "coverage_executed": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n!         return -1\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", "?"]}, {"test_id": "659", "test": "def test():\n        assert rounded_avg(7, 5) == -1", "coverage_executed": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n>         return -1\n\n\n\n", "coverage": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n>         return -1\n!     summation = 0\n!     for i in range(n, m+1):\n!         summation += i\n!     return bin(round(summation/(m - n + 1)))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?", "!", "!", "?"]}, {"test_id": "661", "test": "def test():\n        assert rounded_avg(5, 5) == \"0b101\"", "coverage_executed": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n!         return -1\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", "?"]}, {"test_id": "653", "test": "def test():\n        assert rounded_avg(996,997) == \"0b1111100100\"", "coverage_executed": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n!         return -1\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", "?"]}, {"test_id": "652", "test": "def test():\n        assert rounded_avg(964,977) == \"0b1111001010\"", "coverage_executed": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n!         return -1\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", "?"]}, {"test_id": "650", "test": "def test():\n        assert rounded_avg(1, 5) == \"0b11\"", "coverage_executed": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n!         return -1\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", "?"]}, {"test_id": "651", "test": "def test():\n        assert rounded_avg(7, 13) == \"0b1010\"", "coverage_executed": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n!         return -1\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", "?"]}, {"test_id": "655", "test": "def test():\n        assert rounded_avg(185,546) == \"0b101101110\"", "coverage_executed": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n!         return -1\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", "?"]}, {"test_id": "654", "test": "def test():\n        assert rounded_avg(560,851) == \"0b1011000010\"", "coverage_executed": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n!         return -1\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", "?"]}, {"test_id": "656", "test": "def test():\n        assert rounded_avg(362,496) == \"0b110101101\"", "coverage_executed": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n!         return -1\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", "?"]}, {"test_id": "657", "test": "def test():\n        assert rounded_avg(350,902) == \"0b1001110010\"", "coverage_executed": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage": "> def rounded_avg(n, m):\n>     \"\"\"You are given two positive integers n and m, and your task is to compute the\n>     average of the integers from n through m (including n and m). \n>     Round the answer to the nearest integer and convert that to binary.\n>     If n is greater than m, return -1.\n>     Example:\n>     rounded_avg(1, 5) => \"0b11\"\n>     rounded_avg(7, 5) => -1\n>     rounded_avg(10, 20) => \"0b1111\"\n>     rounded_avg(20, 33) => \"0b11010\"\n>     \"\"\"\n>     if m < n:\n!         return -1\n>     summation = 0\n>     for i in range(n, m+1):\n>         summation += i\n>     return bin(round(summation/(m - n + 1)))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", ">", ">", "?"]}]}