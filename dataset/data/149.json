{"problem_id": 149, "problem": "odd_count", "method": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res", "tests": [{"test_id": "725", "test": "def test():\n        assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"", "coverage_executed": "> def odd_count(lst):\n>     \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n>     Each element i of the output should be \"the number of odd elements in the\n>     string i of the input.\" where all the i's should be replaced by the number\n>     of odd digits in the i'th string of the input.\n>     >>> odd_count(['1234567'])\n>     [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>     >>> odd_count(['3',\"11111111\"])\n>     [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n>      \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n>     \"\"\"\n>     res = []\n>     for arr in lst:\n>         n = sum(int(d)%2==1 for d in arr)\n>         res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n>     return res", "coverage": "> def odd_count(lst):\n>     \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n>     Each element i of the output should be \"the number of odd elements in the\n>     string i of the input.\" where all the i's should be replaced by the number\n>     of odd digits in the i'th string of the input.\n>     >>> odd_count(['1234567'])\n>     [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>     >>> odd_count(['3',\"11111111\"])\n>     [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n>      \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n>     \"\"\"\n>     res = []\n>     for arr in lst:\n>         n = sum(int(d)%2==1 for d in arr)\n>         res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "724", "test": "def test():\n        assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"", "coverage_executed": "> def odd_count(lst):\n>     \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n>     Each element i of the output should be \"the number of odd elements in the\n>     string i of the input.\" where all the i's should be replaced by the number\n>     of odd digits in the i'th string of the input.\n>     >>> odd_count(['1234567'])\n>     [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>     >>> odd_count(['3',\"11111111\"])\n>     [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n>      \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n>     \"\"\"\n>     res = []\n>     for arr in lst:\n>         n = sum(int(d)%2==1 for d in arr)\n>         res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n>     return res", "coverage": "> def odd_count(lst):\n>     \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n>     Each element i of the output should be \"the number of odd elements in the\n>     string i of the input.\" where all the i's should be replaced by the number\n>     of odd digits in the i'th string of the input.\n>     >>> odd_count(['1234567'])\n>     [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>     >>> odd_count(['3',\"11111111\"])\n>     [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n>      \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n>     \"\"\"\n>     res = []\n>     for arr in lst:\n>         n = sum(int(d)%2==1 for d in arr)\n>         res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n>     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "?"]}, {"test_id": "727", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def odd_count(lst):\n>     \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n>     Each element i of the output should be \"the number of odd elements in the\n>     string i of the input.\" where all the i's should be replaced by the number\n>     of odd digits in the i'th string of the input.\n>     >>> odd_count(['1234567'])\n>     [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>     >>> odd_count(['3',\"11111111\"])\n>     [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n>      \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n>     \"\"\"\n\n\n\n\n", "coverage": "> def odd_count(lst):\n>     \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n>     Each element i of the output should be \"the number of odd elements in the\n>     string i of the input.\" where all the i's should be replaced by the number\n>     of odd digits in the i'th string of the input.\n>     >>> odd_count(['1234567'])\n>     [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>     >>> odd_count(['3',\"11111111\"])\n>     [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n>      \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n>     \"\"\"\n!     res = []\n!     for arr in lst:\n!         n = sum(int(d)%2==1 for d in arr)\n!         res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n!     return res", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "!", "!", "!", "?"]}]}