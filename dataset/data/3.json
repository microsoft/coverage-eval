{"problem_id": 3, "problem": "int_to_mini_roman", "method": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()", "tests": [{"test_id": "1119", "test": "def test():\n        assert int_to_mini_roman(500) == 'd'", "coverage_executed": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1121", "test": "def test():\n        assert int_to_mini_roman(4) == 'iv'", "coverage_executed": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1120", "test": "def test():\n        assert int_to_mini_roman(1) == 'i'", "coverage_executed": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1118", "test": "def test():\n        assert int_to_mini_roman(426) == 'cdxxvi'", "coverage_executed": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1122", "test": "def test():\n        assert int_to_mini_roman(43) == 'xliii'", "coverage_executed": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1123", "test": "def test():\n        assert int_to_mini_roman(90) == 'xc'", "coverage_executed": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1127", "test": "def test():\n        assert int_to_mini_roman(994) == 'cmxciv'", "coverage_executed": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1126", "test": "def test():\n        assert int_to_mini_roman(900) == 'cm'", "coverage_executed": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1124", "test": "def test():\n        assert int_to_mini_roman(94) == 'xciv'", "coverage_executed": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1125", "test": "def test():\n        assert int_to_mini_roman(532) == 'dxxxii'", "coverage_executed": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1115", "test": "def test():\n        assert int_to_mini_roman(19) == 'xix'", "coverage_executed": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1117", "test": "def test():\n        assert int_to_mini_roman(251) == 'ccli'", "coverage_executed": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1116", "test": "def test():\n        assert int_to_mini_roman(152) == 'clii'", "coverage_executed": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1128", "test": "def test():\n        assert int_to_mini_roman(1000) == 'm'", "coverage_executed": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage": "> def int_to_mini_roman(number):\n>     \"\"\"\n>     Given a positive integer, obtain its roman numeral equivalent as a string,\n>     and return it in lowercase.\n>     Restrictions: 1 <= num <= 1000\n>     Examples:\n>     >>> int_to_mini_roman(19) == 'xix'\n>     >>> int_to_mini_roman(152) == 'clii'\n>     >>> int_to_mini_roman(426) == 'cdxxvi'\n>     \"\"\"\n>     num = [1, 4, 5, 9, 10, 40, 50, 90,  \n>            100, 400, 500, 900, 1000] \n>     sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n>            \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n>     i = 12\n>     res = ''\n>     while number: \n>         div = number // num[i] \n>         number %= num[i] \n>         while div: \n>             res += sym[i] \n>             div -= 1\n>         i -= 1\n>     return res.lower()", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?"]}]}