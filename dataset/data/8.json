{"problem_id": 8, "problem": "pairs_sum_to_zero", "method": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False", "tests": [{"test_id": "197", "test": "def test():\n        assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "coverage_executed": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n\n>     return False", "coverage": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n!                 return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "?"]}, {"test_id": "196", "test": "def test():\n        assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "coverage_executed": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n\n>     return False", "coverage": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n!                 return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "?"]}, {"test_id": "194", "test": "def test():\n        assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "coverage_executed": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n>                 return True\n", "coverage": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n>                 return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "195", "test": "def test():\n        assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "coverage_executed": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n>                 return True\n", "coverage": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n>                 return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "191", "test": "def test():\n        assert pairs_sum_to_zero([1, 2, 3, 7]) == False", "coverage_executed": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n\n>     return False", "coverage": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n!                 return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "?"]}, {"test_id": "190", "test": "def test():\n        assert pairs_sum_to_zero([1, 3, -2, 1]) == False", "coverage_executed": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n\n>     return False", "coverage": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n!                 return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "?"]}, {"test_id": "192", "test": "def test():\n        assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "coverage_executed": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n>                 return True\n", "coverage": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n>                 return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "193", "test": "def test():\n        assert pairs_sum_to_zero([1]) == False", "coverage_executed": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n\n\n>     return False", "coverage": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n!             if l1 + l[j] == 0:\n!                 return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "?"]}, {"test_id": "189", "test": "def test():\n        assert pairs_sum_to_zero([1, 3, 5, 0]) == False", "coverage_executed": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n\n>     return False", "coverage": "> def pairs_sum_to_zero(l):\n>     \"\"\"\n>     pairs_sum_to_zero takes a list of integers as an input.\n>     it returns True if there are two distinct elements in the list that\n>     sum to zero, and False otherwise.\n>     >>> pairs_sum_to_zero([1, 3, 5, 0])\n>     False\n>     >>> pairs_sum_to_zero([1, 3, -2, 1])\n>     False\n>     >>> pairs_sum_to_zero([1, 2, 3, 7])\n>     False\n>     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n>     True\n>     >>> pairs_sum_to_zero([1])\n>     False\n>     \"\"\"\n>     for i, l1 in enumerate(l):\n>         for j in range(i + 1, len(l)):\n>             if l1 + l[j] == 0:\n!                 return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "?"]}]}