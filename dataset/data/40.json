{"problem_id": 40, "problem": "minSubArraySum", "method": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum", "tests": [{"test_id": "735", "test": "def test():\n        assert minSubArraySum([10, 11, 13, 8, 3, 4]) == 3", "coverage_executed": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n>         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n>         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?", "?"]}, {"test_id": "734", "test": "def test():\n        assert minSubArraySum([100, -1, -2, -3, 10, -5]) == -6", "coverage_executed": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n\n>     min_sum = -max_sum\n>     return min_sum", "coverage": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n!         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?", "?"]}, {"test_id": "736", "test": "def test():\n        assert minSubArraySum([100, -33, 32, -1, 0, -2]) == -33", "coverage_executed": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n\n>     min_sum = -max_sum\n>     return min_sum", "coverage": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n!         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?", "?"]}, {"test_id": "737", "test": "def test():\n        assert minSubArraySum([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n\n>     min_sum = -max_sum\n>     return min_sum", "coverage": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n!             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n!         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", ">", ">", "!", "?", "?"]}, {"test_id": "733", "test": "def test():\n        assert minSubArraySum([-1, -2, -3, 10, -5]) == -6", "coverage_executed": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n\n>     min_sum = -max_sum\n>     return min_sum", "coverage": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n!         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?", "?"]}, {"test_id": "732", "test": "def test():\n        assert minSubArraySum([0, 10, 20, 1000000]) == 0", "coverage_executed": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n>         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n>         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?", "?"]}, {"test_id": "730", "test": "def test():\n        assert minSubArraySum([-1, -2, -3, 2, -10]) == -14", "coverage_executed": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n\n>     min_sum = -max_sum\n>     return min_sum", "coverage": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n!             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n!         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", ">", ">", "!", "?", "?"]}, {"test_id": "731", "test": "def test():\n        assert minSubArraySum([-9999999999999999]) == -9999999999999999", "coverage_executed": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n\n>     min_sum = -max_sum\n>     return min_sum", "coverage": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n!             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n!         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", ">", ">", "!", "?", "?"]}, {"test_id": "738", "test": "def test():\n        assert minSubArraySum([7]) == 7", "coverage_executed": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n>         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n>         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?", "?"]}, {"test_id": "739", "test": "def test():\n        assert minSubArraySum([1, -1]) == -1", "coverage_executed": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n\n>     min_sum = -max_sum\n>     return min_sum", "coverage": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n!         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "!", "?", "?"]}, {"test_id": "729", "test": "def test():\n        assert minSubArraySum([-1, -2, -3]) == -6", "coverage_executed": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n\n>     min_sum = -max_sum\n>     return min_sum", "coverage": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n!             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n!         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", ">", ">", "!", "?", "?"]}, {"test_id": "728", "test": "def test():\n        assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n>         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage": "> def minSubArraySum(nums):\n>     \"\"\"\n>     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n>     of nums.\n>     Example\n>     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n>     minSubArraySum([-1, -2, -3]) == -6\n>     \"\"\"\n>     max_sum = 0\n>     s = 0\n>     for num in nums:\n>         s += -num\n>         if (s < 0):\n>             s = 0\n>         max_sum = max(s, max_sum)\n>     if max_sum == 0:\n>         max_sum = max(-i for i in nums)\n>     min_sum = -max_sum\n>     return min_sum", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", ">", "?", "?"]}]}