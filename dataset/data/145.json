{"problem_id": 145, "problem": "has_close_elements", "method": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False", "tests": [{"test_id": "0", "test": "def test():\n        assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True", "coverage_executed": "> def has_close_elements(numbers: List[float], threshold: float) -> bool:\n>     \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n>     given threshold.\n>     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n>     False\n>     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n>     True\n>     \"\"\"\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 distance = abs(elem - elem2)\n>                 if distance < threshold:\n>                     return True\n", "coverage": "> def has_close_elements(numbers: List[float], threshold: float) -> bool:\n>     \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n>     given threshold.\n>     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n>     False\n>     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n>     True\n>     \"\"\"\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 distance = abs(elem - elem2)\n>                 if distance < threshold:\n>                     return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "1", "test": "def test():\n        assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False", "coverage_executed": "> def has_close_elements(numbers: List[float], threshold: float) -> bool:\n>     \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n>     given threshold.\n>     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n>     False\n>     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n>     True\n>     \"\"\"\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 distance = abs(elem - elem2)\n>                 if distance < threshold:\n\n>     return False", "coverage": "> def has_close_elements(numbers: List[float], threshold: float) -> bool:\n>     \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n>     given threshold.\n>     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n>     False\n>     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n>     True\n>     \"\"\"\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 distance = abs(elem - elem2)\n>                 if distance < threshold:\n!                     return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "!", "?"]}, {"test_id": "3", "test": "def test():\n        assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False", "coverage_executed": "> def has_close_elements(numbers: List[float], threshold: float) -> bool:\n>     \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n>     given threshold.\n>     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n>     False\n>     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n>     True\n>     \"\"\"\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 distance = abs(elem - elem2)\n>                 if distance < threshold:\n\n>     return False", "coverage": "> def has_close_elements(numbers: List[float], threshold: float) -> bool:\n>     \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n>     given threshold.\n>     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n>     False\n>     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n>     True\n>     \"\"\"\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 distance = abs(elem - elem2)\n>                 if distance < threshold:\n!                     return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "!", "?"]}, {"test_id": "2", "test": "def test():\n        assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True", "coverage_executed": "> def has_close_elements(numbers: List[float], threshold: float) -> bool:\n>     \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n>     given threshold.\n>     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n>     False\n>     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n>     True\n>     \"\"\"\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 distance = abs(elem - elem2)\n>                 if distance < threshold:\n>                     return True\n", "coverage": "> def has_close_elements(numbers: List[float], threshold: float) -> bool:\n>     \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n>     given threshold.\n>     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n>     False\n>     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n>     True\n>     \"\"\"\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 distance = abs(elem - elem2)\n>                 if distance < threshold:\n>                     return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "6", "test": "def test():\n        assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False", "coverage_executed": "> def has_close_elements(numbers: List[float], threshold: float) -> bool:\n>     \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n>     given threshold.\n>     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n>     False\n>     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n>     True\n>     \"\"\"\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 distance = abs(elem - elem2)\n>                 if distance < threshold:\n\n>     return False", "coverage": "> def has_close_elements(numbers: List[float], threshold: float) -> bool:\n>     \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n>     given threshold.\n>     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n>     False\n>     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n>     True\n>     \"\"\"\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 distance = abs(elem - elem2)\n>                 if distance < threshold:\n!                     return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", "!", "?"]}, {"test_id": "5", "test": "def test():\n        assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True", "coverage_executed": "> def has_close_elements(numbers: List[float], threshold: float) -> bool:\n>     \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n>     given threshold.\n>     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n>     False\n>     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n>     True\n>     \"\"\"\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 distance = abs(elem - elem2)\n>                 if distance < threshold:\n>                     return True\n", "coverage": "> def has_close_elements(numbers: List[float], threshold: float) -> bool:\n>     \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n>     given threshold.\n>     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n>     False\n>     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n>     True\n>     \"\"\"\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 distance = abs(elem - elem2)\n>                 if distance < threshold:\n>                     return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "4", "test": "def test():\n        assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True", "coverage_executed": "> def has_close_elements(numbers: List[float], threshold: float) -> bool:\n>     \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n>     given threshold.\n>     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n>     False\n>     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n>     True\n>     \"\"\"\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 distance = abs(elem - elem2)\n>                 if distance < threshold:\n>                     return True\n", "coverage": "> def has_close_elements(numbers: List[float], threshold: float) -> bool:\n>     \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n>     given threshold.\n>     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n>     False\n>     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n>     True\n>     \"\"\"\n>     for idx, elem in enumerate(numbers):\n>         for idx2, elem2 in enumerate(numbers):\n>             if idx != idx2:\n>                 distance = abs(elem - elem2)\n>                 if distance < threshold:\n>                     return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", ">", ">", "?"]}]}