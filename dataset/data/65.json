{"problem_id": 65, "problem": "choose_num", "method": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1", "tests": [{"test_id": "643", "test": "def test():\n        assert choose_num(13, 12) == -1", "coverage_executed": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n>         return -1\n\n\n\n\n", "coverage": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n>         return -1\n!     if y % 2 == 0:\n!         return y\n!     if x == y:\n!         return -1\n!     return y - 1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "!", "!", "?"]}, {"test_id": "642", "test": "def test():\n        assert choose_num(12, 15) == 14", "coverage_executed": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n\n>     if y % 2 == 0:\n\n>     if x == y:\n\n>     return y - 1", "coverage": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n!         return -1\n>     if y % 2 == 0:\n!         return y\n>     if x == y:\n!         return -1\n>     return y - 1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", "?"]}, {"test_id": "646", "test": "def test():\n        assert choose_num(6, 29) == 28", "coverage_executed": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n\n>     if y % 2 == 0:\n\n>     if x == y:\n\n>     return y - 1", "coverage": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n!         return -1\n>     if y % 2 == 0:\n!         return y\n>     if x == y:\n!         return -1\n>     return y - 1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", "!", "?"]}, {"test_id": "647", "test": "def test():\n        assert choose_num(27, 10) == -1", "coverage_executed": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n>         return -1\n\n\n\n\n", "coverage": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n>         return -1\n!     if y % 2 == 0:\n!         return y\n!     if x == y:\n!         return -1\n!     return y - 1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "!", "!", "?"]}, {"test_id": "645", "test": "def test():\n        assert choose_num(5234, 5233) == -1", "coverage_executed": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n>         return -1\n\n\n\n\n", "coverage": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n>         return -1\n!     if y % 2 == 0:\n!         return y\n!     if x == y:\n!         return -1\n!     return y - 1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", "!", "!", "?"]}, {"test_id": "644", "test": "def test():\n        assert choose_num(33, 12354) == 12354", "coverage_executed": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n\n>     if y % 2 == 0:\n>         return y\n\n\n", "coverage": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n!         return -1\n>     if y % 2 == 0:\n>         return y\n!     if x == y:\n!         return -1\n!     return y - 1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", "!", "!", "?"]}, {"test_id": "648", "test": "def test():\n        assert choose_num(7, 7) == -1", "coverage_executed": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n\n>     if y % 2 == 0:\n\n>     if x == y:\n>         return -1\n", "coverage": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n!         return -1\n>     if y % 2 == 0:\n!         return y\n>     if x == y:\n>         return -1\n!     return y - 1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", "!", ">", ">", "?"]}, {"test_id": "649", "test": "def test():\n        assert choose_num(546, 546) == 546", "coverage_executed": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n\n>     if y % 2 == 0:\n>         return y\n\n\n", "coverage": "> def choose_num(x, y):\n>     \"\"\"This function takes two positive numbers x and y and returns the\n>     biggest even integer number that is in the range [x, y] inclusive. If \n>     there's no such number, then the function should return -1.\n>     For example:\n>     choose_num(12, 15) = 14\n>     choose_num(13, 12) = -1\n>     \"\"\"\n>     if x > y:\n!         return -1\n>     if y % 2 == 0:\n>         return y\n!     if x == y:\n!         return -1\n!     return y - 1", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", "!", "!", "?"]}]}