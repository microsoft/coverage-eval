{"problem_id": 36, "problem": "reverse_delete", "method": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)", "tests": [{"test_id": "715", "test": "def test():\n        assert reverse_delete(\"abcde\",\"ae\") == ('bcd',False)", "coverage_executed": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "716", "test": "def test():\n        assert reverse_delete(\"abcdef\", \"b\") == ('acdef',False)", "coverage_executed": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "717", "test": "def test():\n        assert reverse_delete(\"abcdedcba\",\"ab\") == ('cdedc',True)", "coverage_executed": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "720", "test": "def test():\n        assert reverse_delete(\"abcdedcba\",\"\") == ('abcdedcba',True)", "coverage_executed": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "718", "test": "def test():\n        assert reverse_delete(\"dwik\",\"w\") == ('dik',False)", "coverage_executed": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "719", "test": "def test():\n        assert reverse_delete(\"a\",\"a\") == ('',True)", "coverage_executed": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "721", "test": "def test():\n        assert reverse_delete(\"abcdedcba\",\"v\") == ('abcdedcba',True)", "coverage_executed": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "723", "test": "def test():\n        assert reverse_delete(\"mamma\", \"mia\") == (\"\", True)", "coverage_executed": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "722", "test": "def test():\n        assert reverse_delete(\"vabba\",\"v\") == ('abba',True)", "coverage_executed": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage": "> def reverse_delete(s,c):\n>     \"\"\"Task\n>     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n>     then check if the result string is palindrome.\n>     A string is called palindrome if it reads the same backward as forward.\n>     You should return a tuple containing the result string and True/False for the check.\n>     Example\n>     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n>     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n>     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n>     \"\"\"\n>     s = ''.join([char for char in s if char not in c])\n>     return (s,s[::-1] == s)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}