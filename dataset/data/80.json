{"problem_id": 80, "problem": "fib4", "method": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n    return results[-1]", "tests": [{"test_id": "209", "test": "def test():\n        assert fib4(8) == 28", "coverage_executed": "> def fib4(n: int):\n>     \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n>     fib4(0) -> 0\n>     fib4(1) -> 0\n>     fib4(2) -> 2\n>     fib4(3) -> 0\n>     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n>     Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>     >>> fib4(5)\n>     4\n>     >>> fib4(6)\n>     8\n>     >>> fib4(7)\n>     14\n>     \"\"\"\n>     results = [0, 0, 2, 0]\n>     if n < 4:\n\n>     for _ in range(4, n + 1):\n>         results.append(results[-1] + results[-2] + results[-3] + results[-4])\n>         results.pop(0)\n>     return results[-1]", "coverage": "> def fib4(n: int):\n>     \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n>     fib4(0) -> 0\n>     fib4(1) -> 0\n>     fib4(2) -> 2\n>     fib4(3) -> 0\n>     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n>     Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>     >>> fib4(5)\n>     4\n>     >>> fib4(6)\n>     8\n>     >>> fib4(7)\n>     14\n>     \"\"\"\n>     results = [0, 0, 2, 0]\n>     if n < 4:\n!         return results[n]\n>     for _ in range(4, n + 1):\n>         results.append(results[-1] + results[-2] + results[-3] + results[-4])\n>         results.pop(0)\n>     return results[-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", "?"]}, {"test_id": "208", "test": "def test():\n        assert fib4(5) == 4", "coverage_executed": "> def fib4(n: int):\n>     \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n>     fib4(0) -> 0\n>     fib4(1) -> 0\n>     fib4(2) -> 2\n>     fib4(3) -> 0\n>     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n>     Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>     >>> fib4(5)\n>     4\n>     >>> fib4(6)\n>     8\n>     >>> fib4(7)\n>     14\n>     \"\"\"\n>     results = [0, 0, 2, 0]\n>     if n < 4:\n\n>     for _ in range(4, n + 1):\n>         results.append(results[-1] + results[-2] + results[-3] + results[-4])\n>         results.pop(0)\n>     return results[-1]", "coverage": "> def fib4(n: int):\n>     \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n>     fib4(0) -> 0\n>     fib4(1) -> 0\n>     fib4(2) -> 2\n>     fib4(3) -> 0\n>     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n>     Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>     >>> fib4(5)\n>     4\n>     >>> fib4(6)\n>     8\n>     >>> fib4(7)\n>     14\n>     \"\"\"\n>     results = [0, 0, 2, 0]\n>     if n < 4:\n!         return results[n]\n>     for _ in range(4, n + 1):\n>         results.append(results[-1] + results[-2] + results[-3] + results[-4])\n>         results.pop(0)\n>     return results[-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", "?"]}, {"test_id": "210", "test": "def test():\n        assert fib4(10) == 104", "coverage_executed": "> def fib4(n: int):\n>     \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n>     fib4(0) -> 0\n>     fib4(1) -> 0\n>     fib4(2) -> 2\n>     fib4(3) -> 0\n>     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n>     Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>     >>> fib4(5)\n>     4\n>     >>> fib4(6)\n>     8\n>     >>> fib4(7)\n>     14\n>     \"\"\"\n>     results = [0, 0, 2, 0]\n>     if n < 4:\n\n>     for _ in range(4, n + 1):\n>         results.append(results[-1] + results[-2] + results[-3] + results[-4])\n>         results.pop(0)\n>     return results[-1]", "coverage": "> def fib4(n: int):\n>     \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n>     fib4(0) -> 0\n>     fib4(1) -> 0\n>     fib4(2) -> 2\n>     fib4(3) -> 0\n>     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n>     Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>     >>> fib4(5)\n>     4\n>     >>> fib4(6)\n>     8\n>     >>> fib4(7)\n>     14\n>     \"\"\"\n>     results = [0, 0, 2, 0]\n>     if n < 4:\n!         return results[n]\n>     for _ in range(4, n + 1):\n>         results.append(results[-1] + results[-2] + results[-3] + results[-4])\n>         results.pop(0)\n>     return results[-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", "?"]}, {"test_id": "211", "test": "def test():\n        assert fib4(12) == 386", "coverage_executed": "> def fib4(n: int):\n>     \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n>     fib4(0) -> 0\n>     fib4(1) -> 0\n>     fib4(2) -> 2\n>     fib4(3) -> 0\n>     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n>     Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>     >>> fib4(5)\n>     4\n>     >>> fib4(6)\n>     8\n>     >>> fib4(7)\n>     14\n>     \"\"\"\n>     results = [0, 0, 2, 0]\n>     if n < 4:\n\n>     for _ in range(4, n + 1):\n>         results.append(results[-1] + results[-2] + results[-3] + results[-4])\n>         results.pop(0)\n>     return results[-1]", "coverage": "> def fib4(n: int):\n>     \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n>     fib4(0) -> 0\n>     fib4(1) -> 0\n>     fib4(2) -> 2\n>     fib4(3) -> 0\n>     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n>     Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>     >>> fib4(5)\n>     4\n>     >>> fib4(6)\n>     8\n>     >>> fib4(7)\n>     14\n>     \"\"\"\n>     results = [0, 0, 2, 0]\n>     if n < 4:\n!         return results[n]\n>     for _ in range(4, n + 1):\n>         results.append(results[-1] + results[-2] + results[-3] + results[-4])\n>         results.pop(0)\n>     return results[-1]", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", "?"]}]}