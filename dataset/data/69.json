{"problem_id": 69, "problem": "maximum", "method": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    Example 1:\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n    Example 2:\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n    Example 3:\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans", "tests": [{"test_id": "798", "test": "def test():\n        assert maximum([4, -4], 2) == [-4, 4]", "coverage_executed": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n!         return []\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", "?", "?"]}, {"test_id": "799", "test": "def test():\n        assert maximum([-10, 10], 2) == [-10, 10]", "coverage_executed": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n!         return []\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", "?", "?"]}, {"test_id": "800", "test": "def test():\n        assert maximum([1, 2, 3, -23, 243, -400, 0], 0) == []", "coverage_executed": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n>         return []\n\n\n", "coverage": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n>         return []\n!     arr.sort()\n!     ans = arr[-k:]\n!     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "?", "?", "?"]}, {"test_id": "796", "test": "def test():\n        assert maximum([-1, 0, 2, 5, 3, -10], 2) == [3, 5]", "coverage_executed": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n!         return []\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", "?", "?"]}, {"test_id": "797", "test": "def test():\n        assert maximum([1, 0, 5, -7], 1) == [5]", "coverage_executed": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n!         return []\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", "?", "?"]}, {"test_id": "795", "test": "def test():\n        assert maximum([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]", "coverage_executed": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n!         return []\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", "?", "?"]}, {"test_id": "794", "test": "def test():\n        assert maximum([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]", "coverage_executed": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n!         return []\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", "?", "?"]}, {"test_id": "790", "test": "def test():\n        assert maximum([-3, -4, 5], 3) == [-4, -3, 5]", "coverage_executed": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n!         return []\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", "?", "?"]}, {"test_id": "791", "test": "def test():\n        assert maximum([4, -4, 4], 2) == [4, 4]", "coverage_executed": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n!         return []\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", "?", "?"]}, {"test_id": "793", "test": "def test():\n        assert maximum([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]", "coverage_executed": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n!         return []\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", "?", "?"]}, {"test_id": "792", "test": "def test():\n        assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]", "coverage_executed": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage": "> def maximum(arr, k):\n>     \"\"\"\n>     Given an array arr of integers and a positive integer k, return a sorted list \n>     of length k with the maximum k numbers in arr.\n>     Example 1:\n>         Input: arr = [-3, -4, 5], k = 3\n>         Output: [-4, -3, 5]\n>     Example 2:\n>         Input: arr = [4, -4, 4], k = 2\n>         Output: [4, 4]\n>     Example 3:\n>         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n>         Output: [2]\n>     Note:\n>         1. The length of the array will be in the range of [1, 1000].\n>         2. The elements in the array will be in the range of [-1000, 1000].\n>         3. 0 <= k <= len(arr)\n>     \"\"\"\n>     if k == 0:\n!         return []\n>     arr.sort()\n>     ans = arr[-k:]\n>     return ans", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", "?", "?", "?"]}]}