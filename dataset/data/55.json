{"problem_id": 55, "problem": "count_nums", "method": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "tests": [{"test_id": "694", "test": "def test():\n        assert True, \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n\n\n\n\n\n\n", "coverage": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n!     def digits_sum(n):\n!         neg = 1\n!         if n < 0: n, neg = -1 * n, -1 \n!         n = [int(i) for i in str(n)]\n!         n[0] = n[0] * neg\n!         return sum(n)\n!     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "!", "?", "?", "?", "?"]}, {"test_id": "693", "test": "def test():\n        assert count_nums([1]) == 1", "coverage_executed": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n>         neg = 1\n>         if n < 0: n, neg = -1 * n, -1 \n>         n = [int(i) for i in str(n)]\n>         n[0] = n[0] * neg\n>         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n>         neg = 1\n>         if n < 0: n, neg = -1 * n, -1 \n>         n = [int(i) for i in str(n)]\n>         n[0] = n[0] * neg\n>         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?", "?", "?"]}, {"test_id": "692", "test": "def test():\n        assert count_nums([-0, 1**0]) == 1", "coverage_executed": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n>         neg = 1\n>         if n < 0: n, neg = -1 * n, -1 \n>         n = [int(i) for i in str(n)]\n>         n[0] = n[0] * neg\n>         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n>         neg = 1\n>         if n < 0: n, neg = -1 * n, -1 \n>         n = [int(i) for i in str(n)]\n>         n[0] = n[0] * neg\n>         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?", "?", "?"]}, {"test_id": "690", "test": "def test():\n        assert count_nums([1, 100, 98, -7, 1, -1]) == 4", "coverage_executed": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n>         neg = 1\n>         if n < 0: n, neg = -1 * n, -1 \n>         n = [int(i) for i in str(n)]\n>         n[0] = n[0] * neg\n>         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n>         neg = 1\n>         if n < 0: n, neg = -1 * n, -1 \n>         n = [int(i) for i in str(n)]\n>         n[0] = n[0] * neg\n>         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?", "?", "?"]}, {"test_id": "687", "test": "def test():\n        assert count_nums([-1, -2, 0]) == 0", "coverage_executed": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n>         neg = 1\n>         if n < 0: n, neg = -1 * n, -1 \n>         n = [int(i) for i in str(n)]\n>         n[0] = n[0] * neg\n>         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n>         neg = 1\n>         if n < 0: n, neg = -1 * n, -1 \n>         n = [int(i) for i in str(n)]\n>         n[0] = n[0] * neg\n>         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?", "?", "?"]}, {"test_id": "686", "test": "def test():\n        assert count_nums([]) == 0", "coverage_executed": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n\n\n\n\n\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n!         neg = 1\n!         if n < 0: n, neg = -1 * n, -1 \n!         n = [int(i) for i in str(n)]\n!         n[0] = n[0] * neg\n!         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "!", "?", "?", "?", "?"]}, {"test_id": "691", "test": "def test():\n        assert count_nums([12, 23, 34, -45, -56, 0]) == 5", "coverage_executed": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n>         neg = 1\n>         if n < 0: n, neg = -1 * n, -1 \n>         n = [int(i) for i in str(n)]\n>         n[0] = n[0] * neg\n>         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n>         neg = 1\n>         if n < 0: n, neg = -1 * n, -1 \n>         n = [int(i) for i in str(n)]\n>         n[0] = n[0] * neg\n>         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?", "?", "?"]}, {"test_id": "689", "test": "def test():\n        assert count_nums([1, 6, 9, -6, 0, 1, 5]) == 5", "coverage_executed": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n>         neg = 1\n>         if n < 0: n, neg = -1 * n, -1 \n>         n = [int(i) for i in str(n)]\n>         n[0] = n[0] * neg\n>         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n>         neg = 1\n>         if n < 0: n, neg = -1 * n, -1 \n>         n = [int(i) for i in str(n)]\n>         n[0] = n[0] * neg\n>         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?", "?", "?"]}, {"test_id": "688", "test": "def test():\n        assert count_nums([1, 1, 2, -2, 3, 4, 5]) == 6", "coverage_executed": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n>         neg = 1\n>         if n < 0: n, neg = -1 * n, -1 \n>         n = [int(i) for i in str(n)]\n>         n[0] = n[0] * neg\n>         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage": "> def count_nums(arr):\n>     \"\"\"\n>     Write a function count_nums which takes an array of integers and returns\n>     the number of elements which has a sum of digits > 0.\n>     If a number is negative, then its first signed digit will be negative:\n>     e.g. -123 has signed digits -1, 2, and 3.\n>     >>> count_nums([]) == 0\n>     >>> count_nums([-1, 11, -11]) == 1\n>     >>> count_nums([1, 1, 2]) == 3\n>     \"\"\"\n>     def digits_sum(n):\n>         neg = 1\n>         if n < 0: n, neg = -1 * n, -1 \n>         n = [int(i) for i in str(n)]\n>         n[0] = n[0] * neg\n>         return sum(n)\n>     return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "?", "?", "?", "?"]}]}