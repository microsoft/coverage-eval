{"problem_id": 33, "problem": "cycpattern_check", "method": "def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False", "tests": [{"test_id": "1104", "test": "def test():\n        assert  cycpattern_check(\"abab\",\"aabb\") == False , \"test #4\"", "coverage_executed": "> def cycpattern_check(a , b):\n>     \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n>     cycpattern_check(\"abcd\",\"abd\") => False\n>     cycpattern_check(\"hello\",\"ell\") => True\n>     cycpattern_check(\"whassup\",\"psus\") => False\n>     cycpattern_check(\"abab\",\"baa\") => True\n>     cycpattern_check(\"efef\",\"eeff\") => False\n>     cycpattern_check(\"himenss\",\"simen\") => True\n>     \"\"\"\n>     l = len(b)\n>     pat = b + b\n>     for i in range(len(a) - l + 1):\n>         for j in range(l + 1):\n>             if a[i:i+l] == pat[j:j+l]:\n\n>     return False", "coverage": "> def cycpattern_check(a , b):\n>     \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n>     cycpattern_check(\"abcd\",\"abd\") => False\n>     cycpattern_check(\"hello\",\"ell\") => True\n>     cycpattern_check(\"whassup\",\"psus\") => False\n>     cycpattern_check(\"abab\",\"baa\") => True\n>     cycpattern_check(\"efef\",\"eeff\") => False\n>     cycpattern_check(\"himenss\",\"simen\") => True\n>     \"\"\"\n>     l = len(b)\n>     pat = b + b\n>     for i in range(len(a) - l + 1):\n>         for j in range(l + 1):\n>             if a[i:i+l] == pat[j:j+l]:\n!                 return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "?"]}, {"test_id": "1105", "test": "def test():\n        assert  cycpattern_check(\"winemtt\",\"tinem\") == True , \"test #5\"", "coverage_executed": "> def cycpattern_check(a , b):\n>     \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n>     cycpattern_check(\"abcd\",\"abd\") => False\n>     cycpattern_check(\"hello\",\"ell\") => True\n>     cycpattern_check(\"whassup\",\"psus\") => False\n>     cycpattern_check(\"abab\",\"baa\") => True\n>     cycpattern_check(\"efef\",\"eeff\") => False\n>     cycpattern_check(\"himenss\",\"simen\") => True\n>     \"\"\"\n>     l = len(b)\n>     pat = b + b\n>     for i in range(len(a) - l + 1):\n>         for j in range(l + 1):\n>             if a[i:i+l] == pat[j:j+l]:\n>                 return True\n", "coverage": "> def cycpattern_check(a , b):\n>     \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n>     cycpattern_check(\"abcd\",\"abd\") => False\n>     cycpattern_check(\"hello\",\"ell\") => True\n>     cycpattern_check(\"whassup\",\"psus\") => False\n>     cycpattern_check(\"abab\",\"baa\") => True\n>     cycpattern_check(\"efef\",\"eeff\") => False\n>     cycpattern_check(\"himenss\",\"simen\") => True\n>     \"\"\"\n>     l = len(b)\n>     pat = b + b\n>     for i in range(len(a) - l + 1):\n>         for j in range(l + 1):\n>             if a[i:i+l] == pat[j:j+l]:\n>                 return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "1102", "test": "def test():\n        assert  cycpattern_check(\"whattup\",\"ptut\") == False , \"test #2\"", "coverage_executed": "> def cycpattern_check(a , b):\n>     \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n>     cycpattern_check(\"abcd\",\"abd\") => False\n>     cycpattern_check(\"hello\",\"ell\") => True\n>     cycpattern_check(\"whassup\",\"psus\") => False\n>     cycpattern_check(\"abab\",\"baa\") => True\n>     cycpattern_check(\"efef\",\"eeff\") => False\n>     cycpattern_check(\"himenss\",\"simen\") => True\n>     \"\"\"\n>     l = len(b)\n>     pat = b + b\n>     for i in range(len(a) - l + 1):\n>         for j in range(l + 1):\n>             if a[i:i+l] == pat[j:j+l]:\n\n>     return False", "coverage": "> def cycpattern_check(a , b):\n>     \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n>     cycpattern_check(\"abcd\",\"abd\") => False\n>     cycpattern_check(\"hello\",\"ell\") => True\n>     cycpattern_check(\"whassup\",\"psus\") => False\n>     cycpattern_check(\"abab\",\"baa\") => True\n>     cycpattern_check(\"efef\",\"eeff\") => False\n>     cycpattern_check(\"himenss\",\"simen\") => True\n>     \"\"\"\n>     l = len(b)\n>     pat = b + b\n>     for i in range(len(a) - l + 1):\n>         for j in range(l + 1):\n>             if a[i:i+l] == pat[j:j+l]:\n!                 return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "?"]}, {"test_id": "1103", "test": "def test():\n        assert  cycpattern_check(\"efef\",\"fee\") == True , \"test #3\"", "coverage_executed": "> def cycpattern_check(a , b):\n>     \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n>     cycpattern_check(\"abcd\",\"abd\") => False\n>     cycpattern_check(\"hello\",\"ell\") => True\n>     cycpattern_check(\"whassup\",\"psus\") => False\n>     cycpattern_check(\"abab\",\"baa\") => True\n>     cycpattern_check(\"efef\",\"eeff\") => False\n>     cycpattern_check(\"himenss\",\"simen\") => True\n>     \"\"\"\n>     l = len(b)\n>     pat = b + b\n>     for i in range(len(a) - l + 1):\n>         for j in range(l + 1):\n>             if a[i:i+l] == pat[j:j+l]:\n>                 return True\n", "coverage": "> def cycpattern_check(a , b):\n>     \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n>     cycpattern_check(\"abcd\",\"abd\") => False\n>     cycpattern_check(\"hello\",\"ell\") => True\n>     cycpattern_check(\"whassup\",\"psus\") => False\n>     cycpattern_check(\"abab\",\"baa\") => True\n>     cycpattern_check(\"efef\",\"eeff\") => False\n>     cycpattern_check(\"himenss\",\"simen\") => True\n>     \"\"\"\n>     l = len(b)\n>     pat = b + b\n>     for i in range(len(a) - l + 1):\n>         for j in range(l + 1):\n>             if a[i:i+l] == pat[j:j+l]:\n>                 return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "1101", "test": "def test():\n        assert  cycpattern_check(\"yello\",\"ell\") == True , \"test #1\"", "coverage_executed": "> def cycpattern_check(a , b):\n>     \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n>     cycpattern_check(\"abcd\",\"abd\") => False\n>     cycpattern_check(\"hello\",\"ell\") => True\n>     cycpattern_check(\"whassup\",\"psus\") => False\n>     cycpattern_check(\"abab\",\"baa\") => True\n>     cycpattern_check(\"efef\",\"eeff\") => False\n>     cycpattern_check(\"himenss\",\"simen\") => True\n>     \"\"\"\n>     l = len(b)\n>     pat = b + b\n>     for i in range(len(a) - l + 1):\n>         for j in range(l + 1):\n>             if a[i:i+l] == pat[j:j+l]:\n>                 return True\n", "coverage": "> def cycpattern_check(a , b):\n>     \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n>     cycpattern_check(\"abcd\",\"abd\") => False\n>     cycpattern_check(\"hello\",\"ell\") => True\n>     cycpattern_check(\"whassup\",\"psus\") => False\n>     cycpattern_check(\"abab\",\"baa\") => True\n>     cycpattern_check(\"efef\",\"eeff\") => False\n>     cycpattern_check(\"himenss\",\"simen\") => True\n>     \"\"\"\n>     l = len(b)\n>     pat = b + b\n>     for i in range(len(a) - l + 1):\n>         for j in range(l + 1):\n>             if a[i:i+l] == pat[j:j+l]:\n>                 return True\n!     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", ">", "?"]}, {"test_id": "1100", "test": "def test():\n        assert  cycpattern_check(\"xyzw\",\"xyw\") == False , \"test #0\"", "coverage_executed": "> def cycpattern_check(a , b):\n>     \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n>     cycpattern_check(\"abcd\",\"abd\") => False\n>     cycpattern_check(\"hello\",\"ell\") => True\n>     cycpattern_check(\"whassup\",\"psus\") => False\n>     cycpattern_check(\"abab\",\"baa\") => True\n>     cycpattern_check(\"efef\",\"eeff\") => False\n>     cycpattern_check(\"himenss\",\"simen\") => True\n>     \"\"\"\n>     l = len(b)\n>     pat = b + b\n>     for i in range(len(a) - l + 1):\n>         for j in range(l + 1):\n>             if a[i:i+l] == pat[j:j+l]:\n\n>     return False", "coverage": "> def cycpattern_check(a , b):\n>     \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n>     cycpattern_check(\"abcd\",\"abd\") => False\n>     cycpattern_check(\"hello\",\"ell\") => True\n>     cycpattern_check(\"whassup\",\"psus\") => False\n>     cycpattern_check(\"abab\",\"baa\") => True\n>     cycpattern_check(\"efef\",\"eeff\") => False\n>     cycpattern_check(\"himenss\",\"simen\") => True\n>     \"\"\"\n>     l = len(b)\n>     pat = b + b\n>     for i in range(len(a) - l + 1):\n>         for j in range(l + 1):\n>             if a[i:i+l] == pat[j:j+l]:\n!                 return True\n>     return False", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", ">", "!", "?"]}]}