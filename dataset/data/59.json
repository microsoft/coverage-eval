{"problem_id": 59, "problem": "get_odd_collatz", "method": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n        if n%2 == 1:\n            odd_collatz.append(int(n))\n    return sorted(odd_collatz)", "tests": [{"test_id": "813", "test": "def test():\n        assert get_odd_collatz(14) == [1, 5, 7, 11, 13, 17]", "coverage_executed": "> def get_odd_collatz(n):\n>     \"\"\"\n>     Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n>     The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n>     as follows: start with any positive integer n. Then each term is obtained from the \n>     previous term as follows: if the previous term is even, the next term is one half of \n>     the previous term. If the previous term is odd, the next term is 3 times the previous\n>     term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n>     Note: \n>         1. Collatz(1) is [1].\n>         2. returned list sorted in increasing order.\n>     For example:\n>     get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n>     \"\"\"\n>     if n%2==0:\n>         odd_collatz = [] \n\n\n>     while n > 1:\n>         if n % 2 == 0:\n>             n = n/2\n>         else:\n>             n = n*3 + 1\n>         if n%2 == 1:\n>             odd_collatz.append(int(n))\n>     return sorted(odd_collatz)", "coverage": "> def get_odd_collatz(n):\n>     \"\"\"\n>     Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n>     The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n>     as follows: start with any positive integer n. Then each term is obtained from the \n>     previous term as follows: if the previous term is even, the next term is one half of \n>     the previous term. If the previous term is odd, the next term is 3 times the previous\n>     term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n>     Note: \n>         1. Collatz(1) is [1].\n>         2. returned list sorted in increasing order.\n>     For example:\n>     get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n>     \"\"\"\n>     if n%2==0:\n>         odd_collatz = [] \n!     else:\n!         odd_collatz = [n]\n>     while n > 1:\n>         if n % 2 == 0:\n>             n = n/2\n>         else:\n>             n = n*3 + 1\n>         if n%2 == 1:\n>             odd_collatz.append(int(n))\n>     return sorted(odd_collatz)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "814", "test": "def test():\n        assert get_odd_collatz(5) == [1, 5]", "coverage_executed": "> def get_odd_collatz(n):\n>     \"\"\"\n>     Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n>     The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n>     as follows: start with any positive integer n. Then each term is obtained from the \n>     previous term as follows: if the previous term is even, the next term is one half of \n>     the previous term. If the previous term is odd, the next term is 3 times the previous\n>     term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n>     Note: \n>         1. Collatz(1) is [1].\n>         2. returned list sorted in increasing order.\n>     For example:\n>     get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n>     \"\"\"\n>     if n%2==0:\n\n>     else:\n>         odd_collatz = [n]\n>     while n > 1:\n>         if n % 2 == 0:\n>             n = n/2\n>         else:\n>             n = n*3 + 1\n>         if n%2 == 1:\n>             odd_collatz.append(int(n))\n>     return sorted(odd_collatz)", "coverage": "> def get_odd_collatz(n):\n>     \"\"\"\n>     Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n>     The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n>     as follows: start with any positive integer n. Then each term is obtained from the \n>     previous term as follows: if the previous term is even, the next term is one half of \n>     the previous term. If the previous term is odd, the next term is 3 times the previous\n>     term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n>     Note: \n>         1. Collatz(1) is [1].\n>         2. returned list sorted in increasing order.\n>     For example:\n>     get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n>     \"\"\"\n>     if n%2==0:\n!         odd_collatz = [] \n>     else:\n>         odd_collatz = [n]\n>     while n > 1:\n>         if n % 2 == 0:\n>             n = n/2\n>         else:\n>             n = n*3 + 1\n>         if n%2 == 1:\n>             odd_collatz.append(int(n))\n>     return sorted(odd_collatz)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "815", "test": "def test():\n        assert get_odd_collatz(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"", "coverage_executed": "> def get_odd_collatz(n):\n>     \"\"\"\n>     Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n>     The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n>     as follows: start with any positive integer n. Then each term is obtained from the \n>     previous term as follows: if the previous term is even, the next term is one half of \n>     the previous term. If the previous term is odd, the next term is 3 times the previous\n>     term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n>     Note: \n>         1. Collatz(1) is [1].\n>         2. returned list sorted in increasing order.\n>     For example:\n>     get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n>     \"\"\"\n>     if n%2==0:\n>         odd_collatz = [] \n\n\n>     while n > 1:\n>         if n % 2 == 0:\n>             n = n/2\n>         else:\n>             n = n*3 + 1\n>         if n%2 == 1:\n>             odd_collatz.append(int(n))\n>     return sorted(odd_collatz)", "coverage": "> def get_odd_collatz(n):\n>     \"\"\"\n>     Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n>     The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n>     as follows: start with any positive integer n. Then each term is obtained from the \n>     previous term as follows: if the previous term is even, the next term is one half of \n>     the previous term. If the previous term is odd, the next term is 3 times the previous\n>     term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n>     Note: \n>         1. Collatz(1) is [1].\n>         2. returned list sorted in increasing order.\n>     For example:\n>     get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n>     \"\"\"\n>     if n%2==0:\n>         odd_collatz = [] \n!     else:\n!         odd_collatz = [n]\n>     while n > 1:\n>         if n % 2 == 0:\n>             n = n/2\n>         else:\n>             n = n*3 + 1\n>         if n%2 == 1:\n>             odd_collatz.append(int(n))\n>     return sorted(odd_collatz)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "?"]}, {"test_id": "816", "test": "def test():\n        assert get_odd_collatz(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"", "coverage_executed": "> def get_odd_collatz(n):\n>     \"\"\"\n>     Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n>     The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n>     as follows: start with any positive integer n. Then each term is obtained from the \n>     previous term as follows: if the previous term is even, the next term is one half of \n>     the previous term. If the previous term is odd, the next term is 3 times the previous\n>     term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n>     Note: \n>         1. Collatz(1) is [1].\n>         2. returned list sorted in increasing order.\n>     For example:\n>     get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n>     \"\"\"\n>     if n%2==0:\n\n>     else:\n>         odd_collatz = [n]\n>     while n > 1:\n\n\n\n\n\n\n>     return sorted(odd_collatz)", "coverage": "> def get_odd_collatz(n):\n>     \"\"\"\n>     Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n>     The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n>     as follows: start with any positive integer n. Then each term is obtained from the \n>     previous term as follows: if the previous term is even, the next term is one half of \n>     the previous term. If the previous term is odd, the next term is 3 times the previous\n>     term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n>     Note: \n>         1. Collatz(1) is [1].\n>         2. returned list sorted in increasing order.\n>     For example:\n>     get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n>     \"\"\"\n>     if n%2==0:\n!         odd_collatz = [] \n>     else:\n>         odd_collatz = [n]\n>     while n > 1:\n!         if n % 2 == 0:\n!             n = n/2\n!         else:\n!             n = n*3 + 1\n!         if n%2 == 1:\n!             odd_collatz.append(int(n))\n>     return sorted(odd_collatz)", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", "!", "!", "!", "!", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", ">", "!", ">", ">", ">", "!", "!", "!", "!", "!", "!", "?"]}]}