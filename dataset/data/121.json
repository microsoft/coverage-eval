{"problem_id": 121, "problem": "get_row", "method": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])", "tests": [{"test_id": "532", "test": "def test():\n        assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]", "coverage_executed": "> def get_row(lst, x):\n>     \"\"\"\n>     You are given a 2 dimensional data, as a nested lists,\n>     which is similar to matrix, however, unlike matrices,\n>     each row may contain a different number of columns.\n>     Given lst, and integer x, find integers x in the list,\n>     and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n>     each tuple is a coordinate - (row, columns), starting with 0.\n>     Sort coordinates initially by rows in ascending order.\n>     Also, sort coordinates of the row by columns in descending order.\n>     Examples:\n>     get_row([\n>       [1,2,3,4,5,6],\n>       [1,2,3,4,1,6],\n>       [1,2,3,4,5,1]\n>     ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n>     get_row([], 1) == []\n>     get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n>     \"\"\"\n>     coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n>     return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])", "coverage": "> def get_row(lst, x):\n>     \"\"\"\n>     You are given a 2 dimensional data, as a nested lists,\n>     which is similar to matrix, however, unlike matrices,\n>     each row may contain a different number of columns.\n>     Given lst, and integer x, find integers x in the list,\n>     and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n>     each tuple is a coordinate - (row, columns), starting with 0.\n>     Sort coordinates initially by rows in ascending order.\n>     Also, sort coordinates of the row by columns in descending order.\n>     Examples:\n>     get_row([\n>       [1,2,3,4,5,6],\n>       [1,2,3,4,1,6],\n>       [1,2,3,4,5,1]\n>     ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n>     get_row([], 1) == []\n>     get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n>     \"\"\"\n>     coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n>     return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "530", "test": "def test():\n        assert get_row([], 1) == []", "coverage_executed": "> def get_row(lst, x):\n>     \"\"\"\n>     You are given a 2 dimensional data, as a nested lists,\n>     which is similar to matrix, however, unlike matrices,\n>     each row may contain a different number of columns.\n>     Given lst, and integer x, find integers x in the list,\n>     and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n>     each tuple is a coordinate - (row, columns), starting with 0.\n>     Sort coordinates initially by rows in ascending order.\n>     Also, sort coordinates of the row by columns in descending order.\n>     Examples:\n>     get_row([\n>       [1,2,3,4,5,6],\n>       [1,2,3,4,1,6],\n>       [1,2,3,4,5,1]\n>     ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n>     get_row([], 1) == []\n>     get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n>     \"\"\"\n>     coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n>     return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])", "coverage": "> def get_row(lst, x):\n>     \"\"\"\n>     You are given a 2 dimensional data, as a nested lists,\n>     which is similar to matrix, however, unlike matrices,\n>     each row may contain a different number of columns.\n>     Given lst, and integer x, find integers x in the list,\n>     and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n>     each tuple is a coordinate - (row, columns), starting with 0.\n>     Sort coordinates initially by rows in ascending order.\n>     Also, sort coordinates of the row by columns in descending order.\n>     Examples:\n>     get_row([\n>       [1,2,3,4,5,6],\n>       [1,2,3,4,1,6],\n>       [1,2,3,4,5,1]\n>     ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n>     get_row([], 1) == []\n>     get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n>     \"\"\"\n>     coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n>     return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}, {"test_id": "531", "test": "def test():\n        assert get_row([[1]], 2) == []", "coverage_executed": "> def get_row(lst, x):\n>     \"\"\"\n>     You are given a 2 dimensional data, as a nested lists,\n>     which is similar to matrix, however, unlike matrices,\n>     each row may contain a different number of columns.\n>     Given lst, and integer x, find integers x in the list,\n>     and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n>     each tuple is a coordinate - (row, columns), starting with 0.\n>     Sort coordinates initially by rows in ascending order.\n>     Also, sort coordinates of the row by columns in descending order.\n>     Examples:\n>     get_row([\n>       [1,2,3,4,5,6],\n>       [1,2,3,4,1,6],\n>       [1,2,3,4,5,1]\n>     ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n>     get_row([], 1) == []\n>     get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n>     \"\"\"\n>     coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n>     return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])", "coverage": "> def get_row(lst, x):\n>     \"\"\"\n>     You are given a 2 dimensional data, as a nested lists,\n>     which is similar to matrix, however, unlike matrices,\n>     each row may contain a different number of columns.\n>     Given lst, and integer x, find integers x in the list,\n>     and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n>     each tuple is a coordinate - (row, columns), starting with 0.\n>     Sort coordinates initially by rows in ascending order.\n>     Also, sort coordinates of the row by columns in descending order.\n>     Examples:\n>     get_row([\n>       [1,2,3,4,5,6],\n>       [1,2,3,4,1,6],\n>       [1,2,3,4,5,1]\n>     ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n>     get_row([], 1) == []\n>     get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n>     \"\"\"\n>     coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n>     return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])", "coverage_sequence": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"], "branch_sequence": ["?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]}]}